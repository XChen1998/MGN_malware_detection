/** @file zitopt.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef ZITOPT_H
#define ZITOPT_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "ziterate"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "ziterate"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "DEVELOPMENT"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  char * blacklist_file_arg;	/**< @brief File of subnets to exclude, in CIDR notation, one-per line..  */
  char * blacklist_file_orig;	/**< @brief File of subnets to exclude, in CIDR notation, one-per line. original value given at command line.  */
  const char *blacklist_file_help; /**< @brief File of subnets to exclude, in CIDR notation, one-per line. help description.  */
  char * whitelist_file_arg;	/**< @brief File of subnets to include, in CIDR notation, one-per line..  */
  char * whitelist_file_orig;	/**< @brief File of subnets to include, in CIDR notation, one-per line. original value given at command line.  */
  const char *whitelist_file_help; /**< @brief File of subnets to include, in CIDR notation, one-per line. help description.  */
  char * log_file_arg;	/**< @brief File to log to.  */
  char * log_file_orig;	/**< @brief File to log to original value given at command line.  */
  const char *log_file_help; /**< @brief File to log to help description.  */
  int verbosity_arg;	/**< @brief Set log level verbosity (0-5, default 3) (default='3').  */
  char * verbosity_orig;	/**< @brief Set log level verbosity (0-5, default 3) original value given at command line.  */
  const char *verbosity_help; /**< @brief Set log level verbosity (0-5, default 3) help description.  */
  const char *ignore_blacklist_errors_help; /**< @brief Ignore invalid entires in the blacklist/whitelist (default false) help description.  */
  #if defined(HAVE_LONG_LONG) || defined(HAVE_LONG_LONG_INT)
  long long int seed_arg;	/**< @brief Seed used to select address permutation.  */
  #else
  long seed_arg;	/**< @brief Seed used to select address permutation.  */
  #endif
  char * seed_orig;	/**< @brief Seed used to select address permutation original value given at command line.  */
  const char *seed_help; /**< @brief Seed used to select address permutation help description.  */
  char * max_targets_arg;	/**< @brief Cap number of IPs to generate (as a number or a percentage of the address space).  */
  char * max_targets_orig;	/**< @brief Cap number of IPs to generate (as a number or a percentage of the address space) original value given at command line.  */
  const char *max_targets_help; /**< @brief Cap number of IPs to generate (as a number or a percentage of the address space) help description.  */
  const char *disable_syslog_help; /**< @brief Disables logging messages to syslog help description.  */
  int shards_arg;	/**< @brief total number of shards (default='1').  */
  char * shards_orig;	/**< @brief total number of shards original value given at command line.  */
  const char *shards_help; /**< @brief total number of shards help description.  */
  int shard_arg;	/**< @brief shard this scan is targeting (0 indexed) (default='0').  */
  char * shard_orig;	/**< @brief shard this scan is targeting (0 indexed) original value given at command line.  */
  const char *shard_help; /**< @brief shard this scan is targeting (0 indexed) help description.  */
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  
  unsigned int blacklist_file_given ;	/**< @brief Whether blacklist-file was given.  */
  unsigned int whitelist_file_given ;	/**< @brief Whether whitelist-file was given.  */
  unsigned int log_file_given ;	/**< @brief Whether log-file was given.  */
  unsigned int verbosity_given ;	/**< @brief Whether verbosity was given.  */
  unsigned int ignore_blacklist_errors_given ;	/**< @brief Whether ignore-blacklist-errors was given.  */
  unsigned int seed_given ;	/**< @brief Whether seed was given.  */
  unsigned int max_targets_given ;	/**< @brief Whether max-targets was given.  */
  unsigned int disable_syslog_given ;	/**< @brief Whether disable-syslog was given.  */
  unsigned int shards_given ;	/**< @brief Whether shards was given.  */
  unsigned int shard_given ;	/**< @brief Whether shard was given.  */
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_config_file() instead
 */
int cmdline_parser_configfile (const char *filename,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_config_file (const char *filename,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* ZITOPT_H */
