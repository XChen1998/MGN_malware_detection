#!/usr/bin/env perl
#
# This file is part of Linux.Wifatch
#
# Copyright (c) 2013,2014,2015 The White Team <rav7teif@ya.ru>
#
# Linux.Wifatch is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Linux.Wifatch is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Linux.Wifatch. If not, see <http://www.gnu.org/licenses/>.
#

# add meta information about specimens to the database
# remove duplicates, or files that are an exact prefix of another file

use strict;

use bm::tn;
use bm::file;
use bm::meta;
use bm::sql;
use bm::specimen;

use Digest::SHA  ();
use Digest::SHA3 ();

my @names;

for my $cat (0 .. $#bm::specimen::CATEGORY) {
	my %indb;
	{
		my @sha256 = sql_fetchall "select sha256 from specimen where category = ?", $cat;
		@indb{@sha256} = (1) x @sha256;
	}

	for my $bin (<specimen/$bm::specimen::CATEGORY[$cat]/*.bin>) {
		(my $sha256 = $bin) =~ s%^.*/%%;
		$sha256 = pack "H64", $sha256;
		next if delete $indb{$sha256};
		push @{ $names[$cat] }, [$bin, $sha256];
	}

	for my $sha256 (keys %indb) {
		next if -f bm::specimen::path $cat, $sha256, "meta";
		printf "removing from database: %s %s\n", $bm::specimen::CATEGORY[$cat], unpack "H*", $sha256;
		sql_exec "delete from specimen where sha256 = ?", $sha256;
	}
}

for my $cat (0 .. $#bm::specimen::CATEGORY) {
bin:
	for (@{ $names[$cat] }) {
		my ($bin, $sha256) = @$_;

		bm::specimen::load $cat, $sha256, my $data
			or die "$bin: $!\n";
		length $data
			or die "$bin: zero length file\n";

		my $sha3_1k = Digest::SHA3::sha3_256 substr $data, 0, 1024;

		my $st = sql_exec
			\my ($o_sha256, $o_cat),
			"select sha256, category from specimen where sha3_1k = ?",
			$sha3_1k;

		while ($st->fetch) {
			bm::specimen::load $o_cat, $o_sha256, my $o_data
				or next;

			if (length $o_data >= length $data) {
				if ($data eq substr $o_data, 0, length $data) {
					printf "%s is prefix of %s\n", $bin, bm::specimen::pathbin $o_cat, $o_sha256;
					my $sha3 = Digest::SHA3::sha3_256 $data;
					unlink "specimen/sha3_fetch/" . unpack "H*", $sha3;    # TODO: temp hack
					unlink bm::specimen::path $cat, $sha256, $_ for qw(meta bin upx);
					next bin;
				}
			} else {
				if ($o_data eq substr $data, 0, length $o_data) {
					printf "%s extends %s\n", $bin, bm::specimen::pathbin $o_cat, $o_sha256;
					sql_exec "delete from specimen where sha256 = ?", $o_sha256;
					unlink bm::specimen::path $o_cat, $o_sha256, $_ for qw(meta bin upx);
				}
			}
		}

		print "$bin: new\n";
		my $sha3 = Digest::SHA3::sha3_256 $data;
		unlink "specimen/sha3_fetch/" . unpack "H*", $sha3;    # TODO: temp hack
		sql_exec
			"insert into specimen (sha256, sha3_1k, sha3, fnv_1k, fnv, size, category) values (?, ?, ?, ?, ?, ?, ?)",
			(Digest::SHA::sha256 $data),
			$sha3_1k,
			$sha3,
			(bm::file::fnv32a substr $data, 0, 1024),
			(bm::file::fnv32a $data),
			length $data,
			$cat;
	}
}

