#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 9, 256),(0, 11, 256),(0, 13, 256),(0, 16, 256),(3, 4, 256),(4, 3, 256),(4, 5, 1),(5, 4, 1),(6, 8, 256),(7, 8, 256),(8, 6, 256),(8, 7, 256),(8, 14, 256),(9, 0, 256),(9, 10, 1),(10, 9, 1),(11, 0, 256),(11, 12, 1),(12, 11, 1),(13, 0, 256),(14, 8, 256),(14, 15, 1),(14, 15, 1),(15, 14, 1),(15, 14, 1),(16, 0, 256),(16, 17, 1),(17, 16, 1),(17, 18, 1),(18, 17, 1),(20, 23, 256),(21, 26, 256),(22, 25, 256),(23, 20, 256),(24, 25, 256),(25, 22, 256),(25, 24, 256),(25, 28, 256),(25, 32, 256),(25, 35, 256),(26, 21, 256),(26, 27, 1),(27, 26, 1),(28, 25, 256),(28, 29, 1),(29, 28, 1),(29, 30, 256),(30, 29, 256),(30, 31, 1),(31, 30, 1),(32, 25, 256),(32, 33, 1),(33, 32, 1),(33, 34, 256),(34, 33, 256),(35, 25, 256),(35, 36, 1),(36, 35, 1),(36, 37, 256),(37, 36, 256),(37, 38, 1),(37, 38, 1),(38, 37, 1),(38, 37, 1),(38, 39, 1),(39, 38, 1),(40, 45, 256),(43, 48, 256),(43, 50, 256),(45, 40, 256),(45, 46, 256),(46, 45, 256),(46, 47, 1),(46, 47, 1),(47, 46, 1),(47, 46, 1),(48, 43, 256),(48, 49, 1),(49, 48, 1),(49, 50, 256),(50, 43, 256),(50, 49, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
