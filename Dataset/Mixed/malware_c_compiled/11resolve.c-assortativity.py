#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(2, 33, 256),(3, 34, 256),(4, 35, 256),(5, 36, 1),(5, 38, 1),(5, 40, 1),(6, 42, 256),(7, 46, 256),(8, 49, 256),(10, 50, 256),(12, 51, 256),(13, 52, 256),(14, 53, 256),(15, 54, 256),(16, 55, 256),(33, 2, 256),(33, 57, 256),(34, 3, 256),(34, 47, 256),(35, 4, 256),(36, 5, 1),(36, 37, 1),(37, 36, 1),(38, 5, 1),(38, 39, 1),(39, 38, 1),(40, 5, 1),(40, 41, 1),(41, 40, 1),(41, 42, 256),(42, 6, 256),(42, 41, 256),(42, 43, 256),(43, 42, 256),(43, 44, 1),(44, 43, 1),(44, 45, 1),(45, 44, 1),(45, 46, 256),(46, 7, 256),(46, 45, 256),(46, 56, 256),(47, 34, 256),(47, 48, 1),(48, 47, 1),(48, 49, 256),(49, 8, 256),(49, 48, 256),(49, 58, 256),(50, 10, 256),(51, 12, 256),(52, 13, 256),(53, 14, 256),(54, 15, 256),(55, 16, 256),(56, 46, 256),(57, 33, 256),(58, 49, 256),(58, 59, 1),(59, 58, 1),(59, 60, 1),(60, 59, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
