#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 73, 256),(3, 90, 256),(10, 11, 1),(11, 10, 1),(11, 12, 1),(12, 11, 1),(12, 13, 1),(13, 12, 1),(14, 15, 256),(15, 14, 256),(15, 17, 1),(16, 17, 1),(16, 17, 1),(17, 15, 1),(17, 16, 1),(17, 16, 1),(17, 18, 1),(18, 17, 1),(19, 20, 256),(20, 19, 256),(20, 21, 256),(21, 20, 256),(21, 22, 1),(22, 21, 1),(23, 29, 256),(24, 25, 256),(25, 24, 256),(25, 26, 1),(26, 25, 1),(27, 28, 1),(27, 28, 1),(28, 27, 1),(28, 27, 1),(29, 23, 256),(29, 30, 1),(30, 29, 1),(30, 31, 1),(31, 30, 1),(32, 44, 256),(33, 76, 256),(34, 46, 256),(39, 78, 1),(42, 48, 1),(42, 51, 1),(42, 54, 1),(42, 57, 1),(42, 60, 1),(42, 63, 1),(42, 66, 1),(42, 68, 1),(43, 47, 256),(44, 32, 256),(45, 46, 256),(46, 34, 256),(46, 45, 256),(46, 70, 256),(46, 77, 256),(47, 43, 256),(48, 42, 1),(48, 49, 1),(49, 48, 1),(50, 52, 256),(51, 42, 1),(51, 52, 256),(52, 50, 256),(52, 51, 256),(53, 55, 256),(54, 42, 1),(54, 55, 256),(55, 53, 256),(55, 54, 256),(56, 58, 256),(57, 42, 1),(57, 58, 256),(58, 56, 256),(58, 57, 256),(59, 61, 256),(60, 42, 1),(60, 61, 256),(61, 59, 256),(61, 60, 256),(62, 64, 256),(63, 42, 1),(63, 64, 256),(64, 62, 256),(64, 63, 256),(65, 67, 256),(66, 42, 1),(66, 67, 256),(67, 65, 256),(67, 66, 256),(68, 42, 1),(68, 69, 256),(69, 68, 256),(70, 46, 256),(70, 71, 1),(71, 70, 1),(71, 72, 256),(72, 71, 256),(72, 73, 256),(73, 0, 256),(73, 72, 256),(73, 74, 256),(74, 73, 256),(74, 75, 1),(75, 74, 1),(76, 33, 256),(77, 46, 256),(77, 78, 1),(78, 39, 1),(78, 77, 1),(78, 79, 1),(79, 78, 1),(80, 92, 256),(81, 88, 256),(82, 89, 256),(83, 94, 1),(86, 91, 256),(87, 88, 256),(88, 81, 256),(88, 87, 256),(88, 93, 256),(89, 82, 256),(90, 3, 256),(91, 86, 256),(92, 80, 256),(93, 88, 256),(93, 94, 1),(94, 83, 1),(94, 93, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
