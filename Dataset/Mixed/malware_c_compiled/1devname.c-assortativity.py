#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 42, 1),(4, 20, 256),(11, 17, 256),(11, 22, 256),(11, 26, 256),(17, 11, 256),(17, 18, 1),(17, 18, 1),(18, 17, 1),(18, 17, 1),(20, 4, 256),(22, 11, 256),(22, 23, 1),(22, 23, 1),(23, 22, 1),(23, 22, 1),(24, 25, 1),(25, 24, 1),(26, 11, 256),(26, 28, 256),(26, 33, 256),(28, 26, 256),(28, 29, 1),(28, 29, 1),(29, 28, 1),(29, 28, 1),(31, 32, 1),(32, 31, 1),(33, 26, 256),(33, 34, 1),(34, 33, 1),(35, 36, 1),(35, 36, 1),(36, 35, 1),(36, 35, 1),(37, 39, 256),(38, 39, 256),(39, 37, 256),(39, 38, 256),(39, 40, 256),(40, 39, 256),(40, 41, 1),(40, 41, 1),(41, 40, 1),(41, 40, 1),(41, 42, 1),(42, 0, 1),(42, 41, 1),(44, 45, 1),(44, 45, 1),(45, 44, 1),(45, 44, 1),(46, 47, 1),(46, 47, 1),(47, 46, 1),(47, 46, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
