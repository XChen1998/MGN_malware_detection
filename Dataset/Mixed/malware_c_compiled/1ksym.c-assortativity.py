#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 66, 256),(2, 74, 256),(4, 19, 256),(7, 18, 256),(18, 7, 256),(18, 73, 256),(19, 4, 256),(19, 20, 1),(20, 19, 1),(20, 21, 1),(20, 21, 1),(21, 20, 1),(21, 20, 1),(23, 24, 1),(24, 23, 1),(24, 25, 256),(24, 27, 1),(25, 24, 256),(26, 27, 1),(27, 24, 1),(27, 26, 1),(28, 29, 1),(29, 28, 1),(30, 33, 1),(31, 32, 1),(32, 31, 1),(32, 33, 1),(33, 30, 1),(33, 32, 1),(33, 34, 256),(34, 33, 256),(34, 35, 256),(34, 37, 256),(35, 34, 256),(35, 36, 1),(35, 36, 1),(36, 35, 1),(36, 35, 1),(37, 34, 256),(37, 38, 1),(38, 37, 1),(38, 39, 256),(39, 38, 256),(39, 40, 256),(39, 44, 256),(40, 39, 256),(40, 41, 256),(41, 40, 256),(41, 42, 1),(42, 41, 1),(42, 43, 1),(43, 42, 1),(44, 39, 256),(44, 45, 256),(45, 44, 256),(45, 46, 1),(46, 45, 1),(46, 47, 1),(47, 46, 1),(48, 51, 256),(49, 52, 256),(50, 53, 256),(51, 48, 256),(51, 54, 256),(52, 49, 256),(53, 50, 256),(54, 51, 256),(54, 55, 1),(55, 54, 1),(56, 57, 1),(57, 56, 1),(57, 58, 256),(58, 57, 256),(59, 65, 256),(60, 68, 256),(61, 65, 256),(64, 69, 256),(65, 59, 256),(65, 61, 256),(66, 0, 256),(66, 67, 1),(67, 66, 1),(68, 60, 256),(68, 76, 256),(69, 64, 256),(69, 70, 256),(70, 69, 256),(70, 71, 1),(71, 70, 1),(71, 72, 1),(72, 71, 1),(73, 18, 256),(73, 75, 1),(74, 2, 256),(74, 75, 1),(75, 73, 1),(75, 74, 1),(76, 68, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
