#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(17, 23, 256),(18, 26, 256),(19, 29, 256),(22, 23, 256),(23, 17, 256),(23, 22, 256),(23, 24, 1),(24, 23, 1),(25, 26, 256),(26, 18, 256),(26, 25, 256),(26, 27, 1),(27, 26, 1),(28, 29, 256),(29, 19, 256),(29, 28, 256),(29, 30, 1),(30, 29, 1),(31, 33, 256),(31, 58, 1),(32, 33, 256),(33, 31, 256),(33, 32, 256),(33, 34, 256),(33, 38, 256),(33, 42, 256),(33, 46, 256),(33, 50, 256),(33, 54, 256),(34, 33, 256),(34, 35, 1),(35, 34, 1),(35, 36, 1),(36, 35, 1),(36, 37, 256),(37, 36, 256),(38, 33, 256),(38, 39, 1),(39, 38, 1),(39, 40, 1),(40, 39, 1),(40, 41, 256),(41, 40, 256),(42, 33, 256),(42, 43, 1),(43, 42, 1),(43, 44, 1),(44, 43, 1),(44, 45, 256),(45, 44, 256),(46, 33, 256),(46, 47, 1),(47, 46, 1),(47, 48, 1),(48, 47, 1),(48, 49, 256),(49, 48, 256),(50, 33, 256),(50, 51, 1),(51, 50, 1),(51, 52, 1),(52, 51, 1),(52, 53, 256),(53, 52, 256),(54, 33, 256),(54, 55, 1),(55, 54, 1),(55, 56, 1),(56, 55, 1),(56, 57, 256),(57, 56, 256),(58, 31, 1),(58, 67, 256),(59, 68, 256),(60, 69, 256),(61, 67, 256),(62, 68, 256),(63, 69, 256),(64, 115, 256),(65, 77, 256),(66, 102, 256),(67, 58, 256),(67, 61, 256),(67, 70, 256),(67, 81, 256),(67, 94, 256),(67, 108, 256),(67, 120, 256),(68, 59, 256),(68, 62, 256),(68, 111, 256),(68, 125, 256),(69, 60, 256),(69, 63, 256),(69, 78, 256),(69, 87, 256),(69, 91, 256),(69, 103, 256),(69, 118, 256),(70, 67, 256),(70, 71, 1),(71, 70, 1),(71, 72, 1),(72, 71, 1),(72, 73, 256),(73, 72, 256),(73, 74, 1),(74, 73, 1),(74, 75, 1),(75, 74, 1),(75, 76, 1),(76, 75, 1),(76, 77, 256),(77, 65, 256),(77, 76, 256),(77, 100, 256),(77, 106, 256),(78, 69, 256),(78, 79, 1),(79, 78, 1),(79, 80, 1),(80, 79, 1),(80, 85, 1),(81, 67, 256),(81, 82, 1),(82, 81, 1),(82, 83, 1),(83, 82, 1),(83, 84, 256),(83, 86, 256),(84, 83, 256),(84, 85, 1),(85, 80, 1),(85, 84, 1),(85, 86, 256),(85, 90, 1),(86, 83, 256),(86, 85, 256),(87, 69, 256),(87, 88, 1),(88, 87, 1),(88, 89, 1),(89, 88, 1),(89, 90, 1),(90, 85, 1),(90, 89, 1),(91, 69, 256),(91, 92, 1),(92, 91, 1),(92, 93, 1),(93, 92, 1),(93, 98, 1),(94, 67, 256),(94, 95, 1),(95, 94, 1),(95, 96, 1),(96, 95, 1),(96, 97, 256),(96, 99, 256),(97, 96, 256),(97, 98, 1),(98, 93, 1),(98, 97, 1),(98, 99, 256),(99, 96, 256),(99, 98, 256),(100, 77, 256),(100, 101, 1),(101, 100, 1),(101, 102, 256),(102, 66, 256),(102, 101, 256),(102, 104, 256),(102, 112, 256),(102, 114, 256),(103, 69, 256),(103, 105, 1),(104, 102, 256),(104, 105, 1),(105, 103, 1),(105, 104, 1),(106, 77, 256),(106, 107, 1),(107, 106, 1),(107, 110, 1),(108, 67, 256),(108, 109, 1),(109, 108, 1),(109, 110, 1),(110, 107, 1),(110, 109, 1),(111, 68, 256),(112, 102, 256),(112, 113, 1),(113, 112, 1),(114, 102, 256),(114, 115, 256),(115, 64, 256),(115, 114, 256),(115, 116, 256),(115, 123, 256),(115, 128, 256),(115, 130, 256),(116, 115, 256),(116, 117, 1),(117, 116, 1),(117, 119, 1),(118, 69, 256),(118, 119, 1),(119, 117, 1),(119, 118, 1),(120, 67, 256),(120, 121, 1),(121, 120, 1),(121, 122, 1),(122, 121, 1),(123, 115, 256),(123, 124, 1),(124, 123, 1),(124, 126, 1),(125, 68, 256),(125, 126, 1),(126, 124, 1),(126, 125, 1),(126, 127, 1),(127, 126, 1),(128, 115, 256),(128, 129, 1),(129, 128, 1),(129, 130, 256),(130, 115, 256),(130, 129, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
