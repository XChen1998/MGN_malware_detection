#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(13, 30, 256),(14, 33, 256),(15, 36, 256),(18, 41, 256),(20, 44, 256),(27, 28, 1),(27, 28, 1),(28, 27, 1),(28, 27, 1),(29, 30, 256),(30, 13, 256),(30, 29, 256),(30, 31, 1),(31, 30, 1),(32, 33, 256),(33, 14, 256),(33, 32, 256),(33, 34, 1),(34, 33, 1),(35, 36, 256),(36, 15, 256),(36, 35, 256),(36, 37, 1),(37, 36, 1),(38, 39, 1),(39, 38, 1),(40, 41, 256),(41, 18, 256),(41, 40, 256),(41, 42, 1),(42, 41, 1),(43, 44, 256),(44, 20, 256),(44, 43, 256),(45, 54, 256),(46, 54, 256),(47, 55, 256),(48, 56, 1),(49, 58, 1),(50, 60, 1),(51, 62, 1),(52, 64, 1),(54, 45, 256),(54, 46, 256),(55, 47, 256),(56, 48, 1),(56, 57, 1),(57, 56, 1),(58, 49, 1),(58, 59, 1),(59, 58, 1),(60, 50, 1),(60, 61, 1),(61, 60, 1),(62, 51, 1),(62, 63, 1),(63, 62, 1),(64, 52, 1),(64, 65, 1),(65, 64, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
