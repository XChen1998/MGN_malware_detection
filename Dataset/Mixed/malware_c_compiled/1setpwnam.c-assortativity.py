#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(1, 2, 1),(1, 2, 1),(2, 1, 1),(2, 1, 1),(4, 5, 1),(4, 5, 1),(5, 4, 1),(5, 4, 1),(7, 8, 1),(7, 8, 1),(8, 7, 1),(8, 7, 1),(12, 13, 1),(13, 12, 1),(15, 38, 256),(16, 27, 256),(17, 28, 256),(18, 29, 256),(22, 33, 256),(26, 31, 1),(27, 16, 256),(27, 30, 256),(28, 17, 256),(28, 36, 256),(29, 18, 256),(29, 35, 256),(30, 27, 256),(30, 31, 1),(31, 26, 1),(31, 30, 1),(33, 22, 256),(33, 34, 1),(34, 33, 1),(35, 29, 256),(35, 37, 1),(36, 28, 256),(36, 37, 1),(36, 37, 1),(37, 35, 1),(37, 36, 1),(37, 36, 1),(38, 15, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
