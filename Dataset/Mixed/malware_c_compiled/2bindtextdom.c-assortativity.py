#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 7, 256),(0, 29, 256),(0, 58, 256),(0, 63, 256),(1, 2, 1),(2, 1, 1),(2, 3, 256),(3, 2, 256),(5, 6, 1),(6, 5, 1),(7, 0, 256),(7, 8, 1),(8, 7, 1),(9, 10, 256),(10, 9, 256),(10, 11, 256),(11, 10, 256),(11, 12, 1),(11, 12, 1),(12, 11, 1),(12, 11, 1),(13, 14, 1),(14, 13, 1),(14, 15, 256),(15, 14, 256),(16, 17, 1),(17, 16, 1),(17, 18, 256),(18, 17, 256),(18, 19, 1),(19, 18, 1),(20, 21, 1),(21, 20, 1),(21, 22, 256),(22, 21, 256),(23, 24, 1),(24, 23, 1),(24, 25, 256),(25, 24, 256),(25, 26, 1),(26, 25, 1),(28, 32, 1),(29, 0, 256),(29, 30, 1),(30, 29, 1),(30, 31, 256),(31, 30, 256),(31, 32, 1),(31, 32, 1),(32, 28, 1),(32, 31, 1),(32, 31, 1),(33, 34, 1),(34, 33, 1),(35, 36, 1),(35, 36, 1),(36, 35, 1),(36, 35, 1),(39, 47, 256),(40, 48, 256),(41, 64, 256),(46, 59, 256),(46, 62, 256),(47, 39, 256),(47, 49, 256),(47, 51, 256),(48, 40, 256),(48, 56, 256),(49, 47, 256),(49, 50, 1),(50, 49, 1),(51, 47, 256),(51, 52, 1),(52, 51, 1),(52, 53, 256),(53, 52, 256),(53, 54, 1),(54, 53, 1),(54, 55, 1),(55, 54, 1),(56, 48, 256),(56, 57, 1),(57, 56, 1),(58, 0, 256),(58, 61, 256),(59, 46, 256),(59, 60, 1),(60, 59, 1),(60, 61, 256),(61, 58, 256),(61, 60, 256),(62, 46, 256),(62, 63, 256),(63, 0, 256),(63, 62, 256),(64, 41, 256),(64, 65, 1),(65, 64, 1),(65, 66, 256),(66, 65, 256),(66, 67, 1),(67, 66, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
