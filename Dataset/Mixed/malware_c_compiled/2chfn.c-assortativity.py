#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 21, 256),(1, 19, 256),(1, 30, 256),(2, 18, 256),(2, 29, 256),(4, 26, 256),(11, 12, 1),(12, 11, 1),(14, 15, 1),(15, 14, 1),(18, 2, 256),(19, 1, 256),(19, 20, 1),(19, 20, 1),(20, 19, 1),(20, 19, 1),(21, 0, 256),(21, 22, 1),(22, 21, 1),(23, 24, 1),(24, 23, 1),(24, 25, 256),(25, 24, 256),(26, 4, 256),(26, 27, 1),(27, 26, 1),(28, 82, 256),(29, 2, 256),(30, 1, 256),(30, 31, 1),(30, 31, 1),(31, 30, 1),(31, 30, 1),(31, 32, 1),(32, 31, 1),(33, 50, 256),(35, 52, 256),(37, 85, 256),(39, 84, 1),(42, 53, 256),(43, 54, 256),(44, 55, 256),(45, 56, 256),(46, 57, 256),(48, 59, 1),(48, 62, 1),(48, 65, 1),(48, 68, 1),(48, 71, 1),(48, 74, 1),(48, 77, 1),(48, 79, 1),(49, 58, 256),(50, 33, 256),(51, 52, 256),(52, 35, 256),(52, 51, 256),(53, 42, 256),(54, 43, 256),(55, 44, 256),(56, 45, 256),(57, 46, 256),(58, 49, 256),(59, 48, 1),(59, 60, 1),(60, 59, 1),(61, 63, 256),(62, 48, 1),(62, 63, 256),(63, 61, 256),(63, 62, 256),(64, 66, 256),(65, 48, 1),(65, 66, 256),(66, 64, 256),(66, 65, 256),(67, 69, 256),(68, 48, 1),(68, 69, 256),(69, 67, 256),(69, 68, 256),(70, 72, 256),(71, 48, 1),(71, 72, 256),(72, 70, 256),(72, 71, 256),(73, 75, 256),(74, 48, 1),(74, 75, 256),(75, 73, 256),(75, 74, 256),(76, 78, 256),(77, 48, 1),(77, 78, 256),(78, 76, 256),(78, 77, 256),(79, 48, 1),(79, 80, 256),(80, 79, 256),(82, 28, 256),(84, 39, 1),(85, 37, 256),(85, 86, 1),(86, 85, 1),(86, 87, 256),(87, 86, 256),(87, 88, 1),(88, 87, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
