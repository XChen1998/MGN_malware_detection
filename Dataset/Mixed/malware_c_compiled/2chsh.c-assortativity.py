#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 39, 256),(4, 28, 256),(4, 83, 256),(6, 7, 1),(7, 6, 1),(7, 8, 256),(8, 7, 256),(8, 9, 1),(9, 8, 1),(11, 12, 1),(12, 11, 1),(12, 13, 256),(13, 12, 256),(13, 14, 1),(13, 14, 1),(14, 13, 1),(14, 13, 1),(16, 17, 1),(17, 16, 1),(17, 18, 256),(18, 17, 256),(19, 20, 1),(20, 19, 1),(20, 21, 256),(21, 20, 256),(21, 22, 1),(22, 21, 1),(23, 24, 1),(24, 23, 1),(25, 26, 1),(26, 25, 1),(28, 4, 256),(28, 29, 1),(29, 28, 1),(29, 31, 1),(30, 31, 1),(31, 29, 1),(31, 30, 1),(31, 32, 256),(32, 31, 256),(32, 33, 1),(33, 32, 1),(34, 35, 256),(35, 34, 256),(36, 37, 1),(36, 37, 1),(37, 36, 1),(37, 36, 1),(39, 0, 256),(39, 40, 1),(40, 39, 1),(41, 42, 1),(42, 41, 1),(43, 55, 256),(44, 84, 256),(45, 57, 256),(48, 58, 256),(53, 60, 1),(53, 63, 1),(53, 66, 1),(53, 69, 1),(53, 72, 1),(53, 75, 1),(53, 78, 1),(53, 80, 1),(54, 59, 256),(55, 43, 256),(56, 57, 256),(57, 45, 256),(57, 56, 256),(58, 48, 256),(59, 54, 256),(60, 53, 1),(60, 61, 1),(61, 60, 1),(62, 64, 256),(63, 53, 1),(63, 64, 256),(64, 62, 256),(64, 63, 256),(65, 67, 256),(66, 53, 1),(66, 67, 256),(67, 65, 256),(67, 66, 256),(68, 70, 256),(69, 53, 1),(69, 70, 256),(70, 68, 256),(70, 69, 256),(71, 73, 256),(72, 53, 1),(72, 73, 256),(73, 71, 256),(73, 72, 256),(74, 76, 256),(75, 53, 1),(75, 76, 256),(76, 74, 256),(76, 75, 256),(77, 79, 256),(78, 53, 1),(78, 79, 256),(79, 77, 256),(79, 78, 256),(80, 53, 1),(80, 81, 256),(81, 80, 256),(83, 4, 256),(83, 85, 1),(84, 44, 256),(84, 85, 1),(85, 83, 1),(85, 84, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
