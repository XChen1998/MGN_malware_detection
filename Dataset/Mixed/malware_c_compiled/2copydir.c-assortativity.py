#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 7, 256),(0, 8, 256),(1, 67, 256),(3, 4, 1),(4, 3, 1),(4, 5, 256),(5, 4, 256),(7, 0, 256),(8, 0, 256),(8, 9, 1),(8, 9, 1),(9, 8, 1),(9, 8, 1),(10, 11, 256),(11, 10, 256),(14, 15, 1),(15, 14, 1),(16, 17, 256),(16, 18, 1),(17, 16, 256),(18, 16, 1),(18, 19, 1),(19, 18, 1),(21, 22, 1),(22, 21, 1),(22, 23, 1),(23, 22, 1),(23, 24, 1),(24, 23, 1),(26, 27, 1),(27, 26, 1),(29, 53, 256),(30, 54, 256),(31, 55, 256),(32, 56, 256),(34, 53, 256),(35, 54, 256),(36, 55, 256),(37, 56, 256),(43, 57, 256),(45, 58, 256),(46, 62, 256),(51, 66, 1),(53, 29, 256),(53, 34, 256),(53, 59, 256),(54, 30, 256),(54, 35, 256),(55, 31, 256),(55, 36, 256),(56, 32, 256),(56, 37, 256),(57, 43, 256),(58, 45, 256),(59, 53, 256),(59, 60, 1),(59, 60, 1),(60, 59, 1),(60, 59, 1),(62, 46, 256),(62, 63, 1),(63, 62, 1),(63, 64, 1),(64, 63, 1),(64, 65, 1),(65, 64, 1),(66, 51, 1),(67, 1, 256),(67, 68, 1),(67, 68, 1),(68, 67, 1),(68, 67, 1),(69, 70, 1),(69, 70, 1),(70, 69, 1),(70, 69, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
