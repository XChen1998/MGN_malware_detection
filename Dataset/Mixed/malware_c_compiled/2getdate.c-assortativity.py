#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 84, 256),(1, 85, 256),(4, 144, 256),(4, 146, 256),(23, 24, 256),(24, 23, 256),(24, 25, 256),(24, 41, 256),(25, 24, 256),(25, 26, 1),(26, 25, 1),(26, 27, 1),(27, 26, 1),(27, 28, 256),(28, 27, 256),(28, 29, 1),(29, 28, 1),(29, 30, 256),(30, 29, 256),(30, 31, 256),(30, 33, 256),(30, 46, 256),(31, 30, 256),(31, 32, 1),(32, 31, 1),(33, 30, 256),(33, 34, 1),(34, 33, 1),(34, 35, 1),(35, 34, 1),(35, 36, 256),(36, 35, 256),(36, 37, 1),(37, 36, 1),(37, 38, 256),(38, 37, 256),(38, 39, 256),(38, 51, 256),(39, 38, 256),(39, 40, 1),(40, 39, 1),(41, 24, 256),(41, 42, 1),(42, 41, 1),(42, 43, 1),(43, 42, 1),(43, 44, 256),(44, 43, 256),(44, 45, 1),(45, 44, 1),(45, 46, 256),(46, 30, 256),(46, 45, 256),(46, 47, 256),(46, 49, 256),(47, 46, 256),(47, 48, 1),(48, 47, 1),(49, 46, 256),(49, 50, 1),(50, 49, 1),(51, 38, 256),(51, 52, 1),(52, 51, 1),(52, 53, 1),(53, 52, 1),(53, 55, 1),(54, 55, 1),(55, 53, 1),(55, 54, 1),(55, 57, 1),(57, 55, 1),(57, 58, 1),(58, 57, 1),(60, 82, 256),(61, 104, 256),(62, 88, 256),(63, 90, 256),(64, 83, 256),(65, 76, 256),(66, 77, 1),(67, 79, 1),(68, 78, 256),(69, 80, 256),(70, 81, 256),(76, 65, 256),(77, 66, 1),(77, 78, 256),(78, 68, 256),(78, 77, 256),(78, 86, 256),(78, 98, 256),(79, 67, 1),(79, 80, 256),(80, 69, 256),(80, 79, 256),(80, 89, 256),(81, 70, 256),(81, 99, 256),(82, 60, 256),(82, 91, 256),(83, 64, 256),(84, 0, 256),(85, 1, 256),(86, 78, 256),(86, 87, 1),(87, 86, 1),(87, 88, 256),(88, 62, 256),(88, 87, 256),(88, 93, 256),(88, 95, 256),(89, 80, 256),(89, 90, 256),(90, 63, 256),(90, 89, 256),(91, 82, 256),(91, 92, 1),(92, 91, 1),(92, 96, 256),(93, 88, 256),(93, 94, 1),(94, 93, 1),(94, 95, 256),(94, 96, 256),(95, 88, 256),(95, 94, 256),(95, 97, 256),(96, 92, 256),(96, 94, 256),(97, 95, 256),(97, 103, 1),(98, 78, 256),(98, 101, 1),(99, 81, 256),(99, 100, 1),(100, 99, 1),(100, 101, 1),(101, 98, 1),(101, 100, 1),(101, 102, 1),(102, 101, 1),(102, 103, 1),(103, 97, 1),(103, 102, 1),(104, 61, 256),(144, 4, 256),(144, 145, 1),(145, 144, 1),(145, 146, 256),(146, 4, 256),(146, 145, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
