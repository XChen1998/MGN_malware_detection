#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 77, 256),(1, 21, 256),(2, 34, 256),(6, 26, 256),(7, 41, 256),(7, 88, 256),(9, 28, 256),(18, 19, 1),(19, 18, 1),(21, 1, 256),(21, 22, 1),(22, 21, 1),(22, 23, 1),(23, 22, 1),(23, 24, 1),(24, 23, 1),(24, 25, 1),(25, 24, 1),(26, 6, 256),(26, 27, 1),(27, 26, 1),(28, 9, 256),(28, 29, 1),(29, 28, 1),(29, 30, 1),(30, 29, 1),(32, 33, 1),(33, 32, 1),(34, 2, 256),(36, 37, 1),(37, 36, 1),(38, 39, 256),(38, 40, 1),(39, 38, 256),(40, 38, 1),(41, 7, 256),(41, 42, 1),(42, 41, 1),(43, 44, 256),(44, 43, 256),(45, 46, 1),(45, 46, 1),(46, 45, 1),(46, 45, 1),(47, 71, 256),(49, 73, 256),(52, 74, 1),(53, 76, 256),(57, 87, 256),(64, 78, 256),(65, 79, 256),(66, 80, 256),(67, 81, 1),(71, 47, 256),(72, 73, 256),(73, 49, 256),(73, 72, 256),(73, 83, 256),(74, 52, 1),(74, 75, 1),(75, 74, 1),(76, 53, 256),(77, 0, 256),(77, 78, 256),(78, 64, 256),(78, 77, 256),(79, 65, 256),(80, 66, 256),(81, 67, 1),(81, 82, 1),(82, 81, 1),(83, 73, 256),(83, 84, 1),(84, 83, 1),(84, 85, 256),(85, 84, 256),(85, 86, 1),(85, 86, 1),(86, 85, 1),(86, 85, 1),(87, 57, 256),(88, 7, 256),(88, 89, 1),(89, 88, 1),(89, 90, 1),(90, 89, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
