#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(6, 7, 1),(7, 6, 1),(7, 8, 256),(8, 7, 256),(8, 13, 256),(9, 10, 1),(10, 9, 1),(10, 11, 256),(11, 10, 256),(13, 8, 256),(13, 14, 1),(14, 13, 1),(14, 18, 1),(15, 16, 1),(16, 15, 1),(16, 17, 256),(17, 16, 256),(17, 18, 1),(18, 14, 1),(18, 17, 1),(18, 19, 256),(19, 18, 256),(19, 20, 1),(20, 19, 1),(23, 30, 256),(24, 31, 256),(25, 32, 256),(26, 39, 256),(27, 38, 256),(28, 36, 256),(30, 23, 256),(30, 34, 256),(31, 24, 256),(31, 33, 256),(32, 25, 256),(33, 31, 256),(34, 30, 256),(34, 35, 1),(34, 35, 1),(35, 34, 1),(35, 34, 1),(36, 28, 256),(36, 41, 256),(38, 27, 256),(38, 48, 1),(39, 26, 256),(39, 40, 1),(40, 39, 1),(40, 44, 1),(41, 36, 256),(41, 42, 1),(42, 41, 1),(42, 43, 256),(43, 42, 256),(43, 44, 1),(44, 40, 1),(44, 43, 1),(44, 45, 1),(45, 44, 1),(45, 46, 256),(46, 45, 256),(46, 47, 1),(47, 46, 1),(47, 48, 1),(48, 38, 1),(48, 47, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
