#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 14, 256),(0, 61, 256),(0, 70, 256),(1, 16, 256),(1, 63, 256),(1, 65, 256),(3, 17, 256),(7, 8, 1),(8, 7, 1),(8, 9, 256),(9, 8, 256),(9, 10, 256),(9, 23, 256),(10, 9, 256),(10, 11, 1),(11, 10, 1),(12, 13, 256),(13, 12, 256),(13, 18, 256),(14, 0, 256),(14, 15, 1),(15, 14, 1),(16, 1, 256),(17, 3, 256),(18, 13, 256),(18, 19, 1),(19, 18, 1),(19, 20, 1),(20, 19, 1),(20, 21, 256),(21, 20, 256),(21, 22, 1),(21, 22, 1),(22, 21, 1),(22, 21, 1),(23, 9, 256),(23, 24, 1),(24, 23, 1),(25, 31, 1),(26, 29, 1),(27, 28, 1),(28, 27, 1),(28, 29, 1),(29, 26, 1),(29, 28, 1),(29, 30, 1),(30, 29, 1),(30, 31, 1),(31, 25, 1),(31, 30, 1),(35, 68, 256),(39, 55, 256),(40, 56, 1),(41, 58, 1),(42, 57, 256),(43, 59, 256),(44, 60, 256),(55, 39, 256),(56, 40, 1),(56, 57, 256),(57, 42, 256),(57, 56, 256),(58, 41, 1),(58, 59, 256),(59, 43, 256),(59, 58, 256),(60, 44, 256),(60, 66, 256),(61, 0, 256),(61, 62, 1),(62, 61, 1),(63, 1, 256),(63, 64, 1),(64, 63, 1),(65, 1, 256),(66, 60, 256),(66, 67, 1),(66, 67, 1),(67, 66, 1),(67, 66, 1),(68, 35, 256),(68, 69, 1),(69, 68, 1),(70, 0, 256),(70, 71, 1),(71, 70, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
