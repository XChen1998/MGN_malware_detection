@l64a.buf = internal global [8 x i8] zeroinitializer, align 1
  %17 = load i8*, i8** %1, align 8
  %18 = load i8, i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = call i32 @c64i(i32 %19)
  %23 = load i64, i64* %shift, align 8
  %24 = trunc i64 %23 to i32
  %25 = shl i32 %21, %24
  %26 = sext i32 %25 to i64
  %27 = load i64, i64* %value, align 8
  %28 = add nsw i64 %27, %26
  store i64 %28, i64* %value, align 8
  %29 = load i64, i64* %shift, align 8
  %30 = add nsw i64 %29, 6
  store i64 %30, i64* %shift, align 8
  %11 = load i64, i64* %2, align 8
  %12 = srem i64 %11, 64
  %13 = trunc i64 %12 to i32
  %14 = call i32 @i64c(i32 %13)
  %17 = trunc i32 %15 to i8
  %18 = load i32, i32* %i, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %i, align 4
  %20 = sext i32 %18 to i64
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* @l64a.buf, i64 0, i64 %20
  store i8 %17, i8* %21, align 1
  %22 = load i32, i32* %i, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [8 x i8], [8 x i8]* @l64a.buf, i64 0, i64 %23
  store i8 0, i8* %24, align 1
  %8 = load i8*, i8** %1, align 8
  %9 = load i8, i8* %8, align 1
  %10 = sext i8 %9 to i32
  %11 = icmp ne i32 %10, 0
  %14 = phi i1 [ false, %3 ], [ %12, %7 ]
  %33 = load i8*, i8** %1, align 8
  %34 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %34, i8** %1, align 8
  store i32 -1, i32* %2, align 4
  %68 = load i32, i32* %2, align 4
  %37 = load i64, i64* %value, align 8
store i32 %15, i32* %, align 8
  %2 = alloca i32, align 4
  %3 = alloca i8, align 1
  %c = trunc i32 %0 to i8
  store i8 %c, i8* %3, align 1
  %4 = load i8, i8* %3, align 1
  %5 = sext i8 %4 to i32
  %6 = icmp eq i32 %5, 46
  store i32 0, i32* %2, align 4
  %60 = load i8, i8* %3, align 1
  %61 = sext i8 %60 to i32
  %62 = sub nsw i32 %61, 97
  %63 = add nsw i32 %62, 38
  store i32 %63, i32* %2, align 4
