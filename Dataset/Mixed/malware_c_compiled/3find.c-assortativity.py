#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 83, 256),(1, 31, 256),(1, 35, 256),(1, 37, 256),(1, 41, 256),(2, 40, 256),(3, 86, 256),(4, 87, 256),(5, 88, 256),(6, 91, 256),(7, 92, 256),(8, 93, 256),(9, 94, 256),(10, 95, 256),(11, 96, 256),(12, 97, 256),(18, 46, 256),(28, 29, 1),(29, 28, 1),(30, 50, 256),(30, 53, 256),(30, 63, 256),(31, 1, 256),(31, 32, 1),(32, 31, 1),(32, 33, 256),(33, 32, 256),(33, 34, 1),(34, 33, 1),(35, 1, 256),(35, 36, 256),(36, 35, 256),(36, 42, 256),(37, 1, 256),(37, 38, 1),(38, 37, 1),(38, 39, 256),(39, 38, 256),(39, 40, 256),(39, 41, 256),(40, 2, 256),(40, 39, 256),(40, 85, 256),(41, 1, 256),(41, 39, 256),(41, 84, 256),(42, 36, 256),(42, 43, 1),(43, 42, 1),(43, 44, 1),(44, 43, 1),(45, 46, 256),(46, 18, 256),(46, 45, 256),(46, 47, 256),(47, 46, 256),(47, 48, 1),(48, 47, 1),(50, 30, 256),(50, 52, 1),(51, 52, 1),(52, 50, 1),(52, 51, 1),(53, 30, 256),(53, 54, 1),(54, 53, 1),(54, 56, 1),(55, 56, 1),(56, 54, 1),(56, 55, 1),(56, 57, 256),(57, 56, 256),(57, 58, 1),(58, 57, 1),(58, 59, 256),(59, 58, 256),(59, 60, 1),(60, 59, 1),(60, 61, 1),(60, 61, 1),(61, 60, 1),(61, 60, 1),(63, 30, 256),(63, 64, 1),(64, 63, 1),(64, 66, 1),(65, 66, 1),(66, 64, 1),(66, 65, 1),(66, 67, 256),(67, 66, 256),(67, 68, 1),(68, 67, 1),(68, 69, 256),(69, 68, 256),(69, 70, 1),(70, 69, 1),(70, 71, 1),(70, 71, 1),(71, 70, 1),(71, 70, 1),(72, 100, 256),(73, 79, 256),(74, 99, 256),(74, 103, 256),(78, 79, 256),(79, 73, 256),(79, 78, 256),(79, 80, 256),(79, 105, 256),(80, 79, 256),(80, 81, 1),(81, 80, 1),(81, 82, 256),(82, 81, 256),(82, 83, 256),(83, 0, 256),(83, 82, 256),(84, 41, 256),(85, 40, 256),(86, 3, 256),(87, 4, 256),(88, 5, 256),(88, 89, 1),(89, 88, 1),(90, 91, 256),(91, 6, 256),(91, 90, 256),(92, 7, 256),(93, 8, 256),(94, 9, 256),(95, 10, 256),(96, 11, 256),(97, 12, 256),(97, 98, 1),(98, 97, 1),(99, 74, 256),(99, 101, 1),(100, 72, 256),(100, 101, 1),(101, 99, 1),(101, 100, 1),(103, 74, 256),(103, 104, 1),(104, 103, 1),(104, 106, 1),(105, 79, 256),(105, 106, 1),(106, 104, 1),(106, 105, 1),(106, 107, 256),(107, 106, 256),(107, 108, 1),(108, 107, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
