#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(12, 57, 256),(14, 15, 1),(14, 71, 256),(15, 14, 1),(16, 17, 1),(17, 16, 1),(17, 18, 256),(18, 17, 256),(18, 19, 1),(18, 19, 1),(19, 18, 1),(19, 18, 1),(20, 24, 1),(21, 22, 1),(22, 21, 1),(22, 23, 256),(23, 22, 256),(23, 24, 1),(23, 24, 1),(24, 20, 1),(24, 23, 1),(24, 23, 1),(26, 27, 1),(27, 26, 1),(27, 28, 256),(28, 27, 256),(28, 29, 256),(28, 31, 256),(29, 28, 256),(29, 30, 1),(30, 29, 1),(30, 31, 256),(31, 28, 256),(31, 30, 256),(32, 33, 1),(33, 32, 1),(34, 35, 1),(35, 34, 1),(35, 36, 256),(36, 35, 256),(36, 45, 256),(36, 49, 256),(37, 38, 1),(37, 38, 1),(38, 37, 1),(38, 37, 1),(39, 40, 1),(40, 39, 1),(40, 41, 256),(41, 40, 256),(41, 42, 256),(42, 41, 256),(42, 44, 1),(43, 44, 1),(43, 44, 1),(44, 42, 1),(44, 43, 1),(44, 43, 1),(45, 36, 256),(45, 46, 1),(46, 45, 1),(46, 47, 256),(47, 46, 256),(47, 48, 1),(48, 47, 1),(49, 36, 256),(49, 50, 1),(50, 49, 1),(50, 51, 256),(51, 50, 256),(51, 52, 1),(52, 51, 1),(53, 54, 256),(54, 53, 256),(54, 55, 256),(55, 54, 256),(55, 56, 256),(56, 55, 256),(57, 12, 256),(58, 63, 256),(59, 64, 256),(60, 65, 256),(61, 69, 256),(62, 68, 256),(63, 58, 256),(64, 59, 256),(65, 60, 256),(65, 66, 256),(66, 65, 256),(66, 67, 1),(66, 67, 1),(67, 66, 1),(67, 66, 1),(68, 62, 256),(69, 61, 256),(69, 70, 1),(69, 70, 1),(70, 69, 1),(70, 69, 1),(71, 14, 256),(72, 73, 1),(72, 73, 1),(73, 72, 1),(73, 72, 1),(74, 75, 256),(75, 74, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
