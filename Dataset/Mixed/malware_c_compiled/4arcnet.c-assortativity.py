#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(3, 6, 256),(6, 3, 256),(6, 13, 256),(7, 8, 1),(8, 7, 1),(9, 10, 256),(10, 9, 256),(10, 11, 1),(11, 10, 1),(11, 12, 1),(12, 11, 1),(13, 6, 256),(14, 15, 1),(15, 14, 1),(15, 16, 256),(16, 15, 256),(16, 17, 1),(17, 16, 1),(17, 18, 1),(18, 17, 1),(18, 19, 1),(19, 18, 1),(20, 21, 1),(21, 20, 1),(21, 22, 1),(22, 21, 1),(22, 23, 256),(23, 22, 256),(23, 24, 256),(23, 26, 256),(24, 23, 256),(24, 25, 1),(25, 24, 1),(25, 26, 256),(26, 23, 256),(26, 25, 256),(26, 40, 256),(26, 42, 256),(27, 28, 1),(27, 30, 256),(28, 27, 1),(28, 29, 256),(29, 28, 256),(30, 27, 256),(30, 31, 256),(31, 30, 256),(31, 32, 256),(31, 36, 256),(31, 64, 256),(32, 31, 256),(32, 33, 1),(33, 32, 1),(33, 34, 1),(34, 33, 1),(36, 31, 256),(36, 37, 1),(37, 36, 1),(37, 38, 1),(38, 37, 1),(38, 39, 1),(39, 38, 1),(39, 41, 1),(40, 26, 256),(40, 41, 1),(41, 39, 1),(41, 40, 1),(41, 42, 256),(42, 26, 256),(42, 41, 256),(42, 59, 256),(43, 44, 256),(44, 43, 256),(44, 45, 256),(45, 44, 256),(45, 46, 1),(46, 45, 1),(46, 47, 256),(47, 46, 256),(47, 48, 1),(48, 47, 1),(48, 49, 1),(49, 48, 1),(49, 50, 1),(49, 50, 1),(50, 49, 1),(50, 49, 1),(52, 53, 256),(53, 52, 256),(53, 54, 256),(53, 60, 256),(53, 62, 256),(54, 53, 256),(54, 55, 1),(55, 54, 1),(55, 56, 256),(56, 55, 256),(56, 57, 1),(57, 56, 1),(57, 58, 1),(58, 57, 1),(59, 42, 256),(60, 53, 256),(60, 61, 1),(60, 63, 256),(61, 60, 1),(61, 62, 256),(62, 53, 256),(62, 61, 256),(63, 60, 256),(63, 64, 256),(64, 31, 256),(64, 63, 256),(64, 65, 256),(65, 64, 256),(65, 66, 1),(66, 65, 1),(66, 67, 1),(67, 66, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
