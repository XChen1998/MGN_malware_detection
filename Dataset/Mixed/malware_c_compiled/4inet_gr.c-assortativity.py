#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(2, 3, 1),(3, 2, 1),(4, 5, 1),(5, 4, 1),(5, 6, 1),(6, 5, 1),(7, 8, 1),(8, 7, 1),(8, 9, 1),(9, 8, 1),(10, 11, 1),(11, 10, 1),(19, 20, 1),(20, 19, 1),(23, 24, 1),(24, 23, 1),(29, 30, 1),(30, 29, 1),(31, 32, 256),(32, 31, 256),(32, 33, 1),(33, 32, 1),(34, 35, 1),(35, 34, 1),(43, 44, 1),(44, 43, 1),(45, 68, 256),(46, 69, 256),(48, 68, 256),(49, 69, 256),(60, 76, 256),(67, 71, 256),(68, 45, 256),(68, 48, 256),(69, 46, 256),(69, 49, 256),(69, 70, 1),(70, 69, 1),(71, 67, 256),(71, 72, 256),(72, 71, 256),(72, 73, 1),(73, 72, 1),(76, 60, 256),(76, 77, 1),(77, 76, 1),(77, 78, 1),(78, 77, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
