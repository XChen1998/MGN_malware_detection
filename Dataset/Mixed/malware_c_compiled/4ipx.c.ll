@ipx_aftype = global %struct.aftype { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* null, i32 4, i32 0, i8* (i8*)* @IPX_print, i8* (%struct.sockaddr*, i32)* @IPX_sprint, i32 (i32, i8*, %struct.sockaddr*)* @IPX_input, void (i8*)* null, i32 (i32)* null, i32 (i32, i32, i8**)* null }, align 8
@IPX_print.buff = internal global [64 x i8] zeroinitializer, align 16
@IPX_sprint.buf = internal global [64 x i8] zeroinitializer, align 16
  %84 = load i32, i32* %2, align 4
  %85 = icmp eq i32 %84, 1
  %88 = load i8*, i8** %ep, align 8
  %89 = load i8, i8* %88, align 1
  %90 = sext i8 %89 to i32
  %91 = icmp ne i32 %90, 0
  store i32 0, i32* %nbo, align 4
  %43 = load i32, i32* %2, align 4
  %44 = and i32 %43, 3
  store i32 %44, i32* %2, align 4
  %45 = load i32, i32* %2, align 4
  %46 = icmp sle i32 %45, 1
  %78 = load %struct.sockaddr_ipx*, %struct.sockaddr_ipx** %sai, align 8
  %79 = getelementptr inbounds %struct.sockaddr_ipx, %struct.sockaddr_ipx* %78, i32 0, i32 2
  store i32 %76, i32* %79, align 4
  store i32 -2, i32* %1, align 4
  %91 = icmp ne i32 %89, 0
  %94 = load %struct.sockaddr_ipx*, %struct.sockaddr_ipx** %sipx, align 8
  %95 = getelementptr inbounds %struct.sockaddr_ipx, %struct.sockaddr_ipx* %94, i32 0, i32 2
  %96 = load i32, i32* %95, align 4
  %97 = call i32 @ntohl(i32 %96) #5
  store i32 1, i32* %nbo, align 4
  store i32 0, i32* %1, align 4
  %1 = alloca i8*, align 8
  %sipx = alloca %struct.sockaddr_ipx*, align 8
  %t = alloca i32, align 4
  store i8* %ptr, i8** %1, align 8
  %2 = load i8*, i8** %1, align 8
  %3 = getelementptr inbounds i8, i8* %2, i64 -2
  %4 = bitcast i8* %3 to %struct.sockaddr_ipx*
  store %struct.sockaddr_ipx* %4, %struct.sockaddr_ipx** %sipx, align 8
  store i32 6, i32* %t, align 4
  %7 = load i32, i32* %t, align 4
  %8 = icmp ne i32 %7, 0
  %85 = load %struct.sockaddr_ipx*, %struct.sockaddr_ipx** %sipx, align 8
  %86 = getelementptr inbounds %struct.sockaddr_ipx, %struct.sockaddr_ipx* %85, i32 0, i32 2
  %87 = load i32, i32* %86, align 4
  %88 = call i32 @ntohl(i32 %87) #5
  %98 = load i32, i32* %2, align 4
  %99 = icmp eq i32 %98, 0
  store i32 -3, i32* %1, align 4
