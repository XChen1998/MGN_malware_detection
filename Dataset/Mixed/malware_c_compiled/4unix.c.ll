@unix_aftype = global %struct.aftype { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i32 1, i32 0, i8* (i8*)* @UNIX_print, i8* (%struct.sockaddr*, i32)* @UNIX_sprint, i32 (i8*, %struct.sockaddr*)* null, void (i8*)* null }, align 8
@unspec_aftype = global %struct.aftype { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i32 0, i32 0, i8* (i8*)* @UNSPEC_print, i8* (%struct.sockaddr*, i32)* @UNSPEC_sprint, i32 (i8*, %struct.sockaddr*)* null, void (i8*)* null }, align 8
@UNSPEC_print.buff = internal global [64 x i8] zeroinitializer, align 16
  %1 = alloca i8*, align 8
  store i8* %ptr, i8** %1, align 8
  %2 = load i8*, i8** %1, align 8
  %1 = alloca i8*, align 8
  %2 = alloca %struct.sockaddr*, align 8
  %3 = alloca i32, align 4
  store %struct.sockaddr* %sap, %struct.sockaddr** %2, align 8
  store i32 %numeric, i32* %3, align 4
  %4 = load %struct.sockaddr*, %struct.sockaddr** %2, align 8
  %5 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %4, i32 0, i32 0
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = icmp eq i32 %7, 65535
  %11 = load %struct.sockaddr*, %struct.sockaddr** %2, align 8
  %12 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %11, i32 0, i32 0
  %13 = load i16, i16* %12, align 2
  %14 = zext i16 %13 to i32
  %15 = icmp eq i32 %14, 0
