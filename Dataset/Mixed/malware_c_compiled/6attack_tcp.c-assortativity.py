#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(1, 32, 256),(2, 33, 256),(3, 34, 256),(4, 35, 256),(5, 36, 256),(6, 37, 256),(7, 38, 256),(8, 43, 256),(9, 48, 256),(13, 52, 256),(32, 1, 256),(33, 2, 256),(33, 39, 256),(34, 3, 256),(35, 4, 256),(35, 44, 256),(35, 49, 256),(36, 5, 256),(36, 45, 256),(36, 50, 256),(37, 6, 256),(38, 7, 256),(39, 33, 256),(39, 40, 1),(40, 39, 1),(40, 41, 1),(40, 41, 1),(41, 40, 1),(41, 40, 1),(42, 43, 256),(43, 8, 256),(43, 42, 256),(44, 35, 256),(45, 36, 256),(45, 46, 1),(46, 45, 1),(47, 48, 256),(48, 9, 256),(48, 47, 256),(49, 35, 256),(50, 36, 256),(50, 51, 1),(51, 50, 1),(52, 13, 256),(52, 53, 1),(53, 52, 1),(53, 54, 1),(54, 53, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
