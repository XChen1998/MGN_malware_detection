#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 47, 256),(1, 6, 256),(2, 12, 256),(3, 8, 256),(4, 9, 256),(5, 10, 1),(5, 17, 1),(5, 21, 1),(6, 1, 256),(7, 8, 256),(8, 3, 256),(8, 7, 256),(8, 14, 256),(9, 4, 256),(9, 18, 256),(10, 5, 1),(10, 11, 1),(11, 10, 1),(12, 2, 256),(12, 13, 1),(12, 45, 256),(12, 46, 1),(13, 12, 1),(14, 8, 256),(14, 15, 1),(15, 14, 1),(15, 16, 256),(16, 15, 256),(17, 5, 1),(18, 9, 256),(18, 19, 1),(19, 18, 1),(20, 38, 256),(21, 5, 1),(21, 39, 256),(22, 40, 256),(23, 41, 256),(24, 38, 256),(25, 39, 256),(26, 40, 256),(27, 41, 256),(33, 45, 256),(35, 42, 256),(38, 20, 256),(38, 24, 256),(38, 43, 256),(39, 21, 256),(39, 25, 256),(40, 22, 256),(40, 26, 256),(41, 23, 256),(41, 27, 256),(42, 35, 256),(43, 38, 256),(43, 44, 1),(44, 43, 1),(45, 12, 256),(45, 33, 256),(46, 12, 1),(47, 0, 256),(49, 50, 1),(49, 50, 1),(50, 49, 1),(50, 49, 1),(50, 51, 1),(51, 50, 1),(51, 52, 1),(52, 51, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
