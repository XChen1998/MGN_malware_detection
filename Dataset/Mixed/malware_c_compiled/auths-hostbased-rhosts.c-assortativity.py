#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 1, 1),(1, 0, 1),(2, 3, 1),(3, 2, 1),(5, 6, 256),(6, 5, 256),(7, 8, 256),(8, 7, 256),(8, 11, 256),(8, 14, 256),(9, 10, 256),(10, 9, 256),(10, 16, 256),(11, 8, 256),(11, 12, 1),(11, 12, 1),(12, 11, 1),(12, 11, 1),(13, 14, 256),(14, 8, 256),(14, 13, 256),(14, 17, 256),(15, 16, 256),(16, 10, 256),(16, 15, 256),(17, 14, 256),(17, 18, 1),(17, 18, 1),(18, 17, 1),(18, 17, 1),(20, 21, 1),(20, 21, 1),(21, 20, 1),(21, 20, 1),(21, 22, 1),(22, 21, 1),(24, 25, 1),(24, 25, 1),(25, 24, 1),(25, 24, 1),(26, 27, 1),(26, 27, 1),(27, 26, 1),(27, 26, 1),(28, 55, 256),(29, 56, 256),(30, 57, 256),(31, 58, 256),(32, 59, 256),(33, 60, 256),(34, 61, 256),(36, 55, 256),(37, 56, 256),(38, 57, 256),(39, 58, 256),(40, 59, 256),(41, 60, 256),(42, 61, 256),(43, 68, 256),(44, 73, 1),(45, 64, 256),(55, 28, 256),(55, 36, 256),(55, 65, 256),(56, 29, 256),(56, 37, 256),(56, 66, 256),(57, 30, 256),(57, 38, 256),(58, 31, 256),(58, 39, 256),(59, 32, 256),(59, 40, 256),(60, 33, 256),(60, 41, 256),(61, 34, 256),(61, 42, 256),(61, 62, 256),(62, 61, 256),(62, 63, 1),(63, 62, 1),(63, 64, 256),(64, 45, 256),(64, 63, 256),(65, 55, 256),(66, 56, 256),(66, 67, 1),(67, 66, 1),(68, 43, 256),(68, 69, 256),(68, 74, 256),(69, 68, 256),(69, 70, 1),(70, 69, 1),(71, 72, 1),(72, 71, 1),(73, 44, 1),(74, 68, 256),(74, 75, 1),(74, 75, 1),(75, 74, 1),(75, 74, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
