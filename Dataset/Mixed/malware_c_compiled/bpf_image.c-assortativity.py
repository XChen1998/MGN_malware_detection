#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(1, 7, 256),(2, 4, 256),(2, 8, 256),(4, 2, 256),(5, 6, 1),(5, 6, 1),(6, 5, 1),(6, 5, 1),(7, 1, 256),(7, 13, 256),(8, 2, 256),(8, 10, 256),(8, 14, 256),(10, 8, 256),(11, 12, 1),(11, 12, 1),(12, 11, 1),(12, 11, 1),(13, 7, 256),(13, 19, 256),(14, 8, 256),(14, 16, 256),(14, 20, 256),(16, 14, 256),(17, 18, 1),(17, 18, 1),(18, 17, 1),(18, 17, 1),(19, 13, 256),(19, 25, 256),(20, 14, 256),(20, 22, 256),(20, 26, 256),(22, 20, 256),(23, 24, 1),(23, 24, 1),(24, 23, 1),(24, 23, 1),(25, 19, 256),(25, 31, 256),(26, 20, 256),(26, 28, 256),(26, 32, 256),(28, 26, 256),(29, 30, 1),(29, 30, 1),(30, 29, 1),(30, 29, 1),(31, 25, 256),(31, 43, 256),(32, 26, 256),(32, 34, 256),(32, 44, 256),(34, 32, 256),(35, 36, 1),(35, 36, 1),(36, 35, 1),(36, 35, 1),(37, 38, 1),(38, 37, 1),(38, 39, 256),(39, 38, 256),(39, 40, 1),(40, 39, 1),(40, 41, 1),(41, 40, 1),(41, 42, 1),(42, 41, 1),(43, 31, 256),(43, 49, 256),(44, 32, 256),(44, 46, 256),(44, 50, 256),(46, 44, 256),(47, 48, 1),(47, 48, 1),(48, 47, 1),(48, 47, 1),(49, 43, 256),(49, 55, 256),(50, 44, 256),(50, 52, 256),(50, 56, 256),(52, 50, 256),(53, 54, 1),(53, 54, 1),(54, 53, 1),(54, 53, 1),(55, 49, 256),(56, 50, 256),(56, 58, 256),(58, 56, 256),(59, 60, 1),(59, 60, 1),(60, 59, 1),(60, 59, 1),(61, 62, 1),(62, 61, 1),(62, 63, 256),(63, 62, 256),(63, 64, 1),(64, 63, 1),(64, 65, 1),(65, 64, 1),(65, 66, 1),(66, 65, 1),(67, 73, 256),(68, 74, 256),(69, 78, 256),(70, 130, 256),(71, 129, 256),(72, 136, 1),(72, 142, 1),(72, 150, 1),(73, 67, 256),(73, 75, 256),(73, 79, 256),(73, 131, 256),(73, 153, 256),(73, 160, 256),(74, 68, 256),(74, 148, 256),(74, 151, 256),(74, 158, 256),(75, 73, 256),(75, 76, 1),(76, 75, 1),(76, 77, 256),(77, 76, 256),(77, 78, 256),(78, 69, 256),(78, 77, 256),(78, 135, 256),(79, 73, 256),(79, 80, 1),(80, 79, 1),(80, 81, 256),(81, 80, 256),(81, 82, 1),(82, 81, 1),(129, 71, 256),(129, 140, 256),(130, 70, 256),(130, 137, 256),(130, 141, 256),(131, 73, 256),(131, 132, 1),(132, 131, 1),(132, 133, 256),(133, 132, 256),(133, 134, 1),(134, 133, 1),(134, 135, 256),(135, 78, 256),(135, 134, 256),(135, 138, 256),(135, 144, 256),(136, 72, 1),(137, 130, 256),(138, 135, 256),(138, 139, 1),(138, 139, 1),(139, 138, 1),(139, 138, 1),(140, 129, 256),(140, 149, 256),(141, 130, 256),(141, 143, 256),(142, 72, 1),(143, 141, 256),(144, 135, 256),(144, 145, 1),(144, 145, 1),(145, 144, 1),(145, 144, 1),(148, 74, 256),(149, 140, 256),(150, 72, 1),(151, 74, 256),(151, 152, 1),(152, 151, 1),(152, 157, 1),(153, 73, 256),(153, 154, 1),(154, 153, 1),(154, 155, 256),(155, 154, 256),(155, 156, 1),(156, 155, 1),(156, 157, 1),(157, 152, 1),(157, 156, 1),(158, 74, 256),(158, 159, 1),(159, 158, 1),(159, 164, 1),(160, 73, 256),(160, 161, 1),(161, 160, 1),(161, 162, 256),(162, 161, 256),(162, 163, 1),(163, 162, 1),(163, 164, 1),(164, 159, 1),(164, 163, 1),(164, 165, 1),(164, 165, 1),(165, 164, 1),(165, 164, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
