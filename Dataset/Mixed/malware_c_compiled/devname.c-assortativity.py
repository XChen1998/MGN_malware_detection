#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 5, 256),(1, 11, 256),(1, 22, 256),(2, 40, 256),(4, 6, 1),(5, 0, 256),(5, 7, 1),(6, 4, 1),(6, 8, 1),(7, 5, 1),(7, 8, 1),(8, 6, 1),(8, 7, 1),(8, 9, 1),(9, 8, 1),(9, 15, 1),(10, 12, 1),(11, 1, 256),(11, 13, 1),(12, 10, 1),(12, 14, 1),(13, 11, 1),(13, 14, 1),(14, 12, 1),(14, 13, 1),(14, 15, 1),(15, 9, 1),(15, 14, 1),(15, 16, 1),(16, 15, 1),(16, 17, 256),(17, 16, 256),(17, 18, 256),(18, 17, 256),(18, 30, 256),(19, 20, 1),(20, 19, 1),(22, 1, 256),(23, 24, 1),(24, 23, 1),(24, 25, 256),(25, 24, 256),(25, 26, 1),(26, 25, 1),(26, 27, 1),(26, 27, 1),(27, 26, 1),(27, 26, 1),(30, 18, 256),(32, 37, 256),(37, 32, 256),(37, 38, 256),(38, 37, 256),(38, 39, 1),(39, 38, 1),(40, 2, 256),(40, 41, 1),(41, 40, 1),(43, 45, 256),(44, 60, 1),(45, 43, 256),(45, 46, 1),(46, 45, 1),(47, 49, 256),(48, 50, 256),(49, 47, 256),(49, 53, 256),(49, 55, 256),(49, 58, 256),(50, 48, 256),(50, 51, 256),(51, 50, 256),(51, 52, 1),(52, 51, 1),(53, 49, 256),(53, 54, 1),(54, 53, 1),(55, 49, 256),(55, 56, 1),(56, 55, 1),(56, 57, 256),(57, 56, 256),(58, 49, 256),(58, 59, 1),(58, 59, 1),(59, 58, 1),(59, 58, 1),(60, 44, 1),(60, 61, 256),(61, 60, 256),(61, 62, 1),(62, 61, 1),(62, 63, 1),(63, 62, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
