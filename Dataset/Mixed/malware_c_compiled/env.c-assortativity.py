#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 22, 256),(0, 44, 256),(1, 5, 256),(1, 26, 256),(3, 4, 1),(4, 3, 1),(5, 1, 256),(5, 6, 1),(6, 5, 1),(6, 7, 1),(7, 6, 1),(8, 38, 256),(8, 42, 256),(8, 45, 256),(9, 17, 256),(10, 18, 256),(11, 21, 256),(12, 23, 256),(14, 57, 1),(14, 59, 1),(15, 29, 256),(17, 9, 256),(17, 48, 1),(18, 10, 256),(18, 19, 256),(18, 24, 256),(19, 18, 256),(19, 20, 1),(19, 20, 1),(20, 19, 1),(20, 19, 1),(21, 11, 256),(22, 0, 256),(22, 23, 256),(23, 12, 256),(23, 22, 256),(23, 31, 256),(23, 43, 256),(24, 18, 256),(24, 25, 1),(25, 24, 1),(26, 1, 256),(26, 27, 1),(27, 26, 1),(27, 28, 1),(28, 27, 1),(29, 15, 256),(29, 30, 1),(30, 29, 1),(31, 23, 256),(31, 32, 1),(32, 31, 1),(33, 35, 1),(34, 35, 1),(35, 33, 1),(35, 34, 1),(36, 37, 1),(37, 36, 1),(37, 39, 1),(38, 8, 256),(38, 39, 1),(39, 37, 1),(39, 38, 1),(39, 40, 256),(40, 39, 256),(40, 41, 1),(40, 41, 1),(41, 40, 1),(41, 40, 1),(42, 8, 256),(43, 23, 256),(43, 44, 256),(44, 0, 256),(44, 43, 256),(45, 8, 256),(46, 47, 1),(46, 49, 256),(47, 46, 1),(48, 17, 1),(48, 49, 256),(49, 46, 256),(49, 48, 256),(49, 50, 256),(49, 53, 256),(49, 55, 256),(50, 49, 256),(50, 51, 1),(51, 50, 1),(51, 52, 256),(52, 51, 256),(53, 49, 256),(54, 55, 256),(55, 49, 256),(55, 54, 256),(57, 14, 1),(57, 58, 1),(57, 58, 1),(58, 57, 1),(58, 57, 1),(59, 14, 1),(59, 60, 256),(60, 59, 256),(60, 61, 1),(61, 60, 1),(61, 62, 1),(62, 61, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
