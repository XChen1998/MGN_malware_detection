#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(6, 7, 1),(6, 7, 1),(7, 6, 1),(7, 6, 1),(8, 15, 256),(9, 10, 1),(10, 9, 1),(10, 11, 1),(11, 10, 1),(11, 12, 256),(12, 11, 256),(12, 13, 1),(13, 12, 1),(13, 14, 1),(14, 13, 1),(15, 8, 256),(15, 16, 256),(16, 15, 256),(17, 33, 256),(18, 21, 256),(19, 26, 256),(20, 30, 256),(21, 18, 256),(21, 22, 256),(21, 27, 256),(22, 21, 256),(22, 23, 1),(23, 22, 1),(23, 24, 1),(24, 23, 1),(24, 25, 1),(24, 25, 1),(25, 24, 1),(25, 24, 1),(26, 19, 256),(26, 31, 256),(26, 38, 256),(27, 21, 256),(27, 28, 1),(28, 27, 1),(28, 29, 1),(29, 28, 1),(29, 30, 256),(30, 20, 256),(30, 29, 256),(30, 53, 256),(31, 26, 256),(31, 32, 1),(32, 31, 1),(33, 17, 256),(33, 34, 256),(34, 33, 256),(34, 35, 1),(35, 34, 1),(35, 36, 1),(36, 35, 1),(37, 38, 256),(38, 26, 256),(38, 37, 256),(38, 39, 256),(39, 38, 256),(39, 40, 1),(40, 39, 1),(40, 41, 1),(41, 40, 1),(41, 42, 256),(42, 41, 256),(42, 43, 1),(43, 42, 1),(43, 44, 1),(44, 43, 1),(45, 54, 256),(46, 48, 256),(48, 46, 256),(48, 49, 256),(49, 48, 256),(49, 50, 1),(50, 49, 1),(50, 51, 1),(51, 50, 1),(51, 52, 1),(51, 52, 1),(52, 51, 1),(52, 51, 1),(53, 30, 256),(53, 54, 256),(54, 45, 256),(54, 53, 256),(55, 56, 256),(56, 55, 256),(56, 57, 256),(56, 63, 256),(56, 67, 256),(57, 56, 256),(57, 58, 1),(58, 57, 1),(58, 59, 1),(59, 58, 1),(59, 60, 256),(60, 59, 256),(60, 61, 1),(61, 60, 1),(61, 62, 1),(62, 61, 1),(63, 56, 256),(63, 64, 1),(64, 63, 1),(64, 65, 1),(65, 64, 1),(65, 66, 1),(66, 65, 1),(67, 56, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
