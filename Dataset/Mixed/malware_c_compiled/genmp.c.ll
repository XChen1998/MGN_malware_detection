  %157 = load %struct.SshIntRec*, %struct.SshIntRec** %1, align 8
  %158 = load i32, i32* %3, align 4
  %159 = sub i32 %158, 1
  call void @ssh_mp_div_2exp(%struct.SshIntRec* %aux, %struct.SshIntRec* %157, i32 %159)
  %162 = call i64 @ssh_mp_get_ui(%struct.SshIntRec* %aux)
  %119 = load i32, i32* %i, align 4
  %120 = add i32 %119, 1
  store i32 %120, i32* %i, align 4
  %123 = load i32, i32* %i, align 4
  %124 = load i32, i32* %num_primes, align 4
  %125 = icmp ult i32 %123, %124
  %149 = load i64, i64* %difference, align 8
  %150 = add nsw i64 %149, 2
  store i64 %150, i64* %difference, align 8
  %153 = load i64*, i64** %moduli, align 8
  %154 = bitcast i64* %153 to i8*
  call void @ssh_xfree(i8* %154)
  %165 = icmp ne i64 %163, 1
  %13 = phi i8* [ %138, %133 ], [ %54, %47 ], [ %11, %5 ]
  %14 = bitcast i8* %13 to i64*
  store i64* %14, i64** %moduli, align 8
  %15 = load i32, i32* %3, align 4
  %16 = icmp ult i32 %15, 16
  store i32 0, i32* %num_primes, align 4
  %168 = load %struct.SshRandomStateRec*, %struct.SshRandomStateRec** %2, align 8
  %169 = load i32, i32* %3, align 4
  call void @ssh_mp_random_integer(%struct.SshIntRec* %start, %struct.SshRandomStateRec* %168, i32 %169)
  call void @ssh_mp_set_ui(%struct.SshIntRec* %aux, i64 1)
  %170 = load i32, i32* %3, align 4
  %171 = sub i32 %170, 1
  call void @ssh_mp_mul_2exp(%struct.SshIntRec* %aux, %struct.SshIntRec* %aux, i32 %171)
  call void @ssh_mp_or(%struct.SshIntRec* %start, %struct.SshIntRec* %start, %struct.SshIntRec* %aux)
  call void @ssh_mp_set_ui(%struct.SshIntRec* %aux, i64 1)
  call void @ssh_mp_or(%struct.SshIntRec* %start, %struct.SshIntRec* %start, %struct.SshIntRec* %aux)
  %172 = call i8* @ssh_xmalloc(i64 8408)
store %struct.SshIntRec* %start, %struct.SshIntRec** %ret, align 8
store  %struct.SshRandomStateRec* %5, %struct.SshRandomStateRec** %state, align 8
store  i32 %6, i32* %bits, align 8
  %1 = alloca %struct.SshIntRec*, align 8
  %2 = alloca %struct.SshRandomStateRec*, align 8
  %3 = alloca i32, align 4
  %i = alloca i32, align 4
  %limb = alloca i64, align 8
  store %struct.SshRandomStateRec* %state, %struct.SshRandomStateRec** %2, align 8
  store i32 %bits, i32* %3, align 4
  %4 = load %struct.SshIntRec*, %struct.SshIntRec** %1, align 8
  call void @ssh_mp_set_ui(%struct.SshIntRec* %4, i64 0)
  store i32 0, i32* %i, align 4
  call void @ssh_mp_init(%struct.SshIntRec* %aux)
  %6 = load %struct.SshRandomStateRec*, %struct.SshRandomStateRec** %2, align 8
  %7 = load i32, i32* %3, align 4
  call void @ssh_mp_random_integer(%struct.SshIntRec* %start, %struct.SshRandomStateRec* %6, i32 %7)
  call void @ssh_mp_set_ui(%struct.SshIntRec* %aux, i64 1)
  %8 = load i32, i32* %3, align 4
  %9 = sub i32 %8, 1
  call void @ssh_mp_mul_2exp(%struct.SshIntRec* %aux, %struct.SshIntRec* %aux, i32 %9)
  call void @ssh_mp_or(%struct.SshIntRec* %start, %struct.SshIntRec* %start, %struct.SshIntRec* %aux)
  call void @ssh_mp_set_ui(%struct.SshIntRec* %aux, i64 1)
  call void @ssh_mp_or(%struct.SshIntRec* %start, %struct.SshIntRec* %start, %struct.SshIntRec* %aux)
  %10 = call i8* @ssh_xmalloc(i64 8408)
  call void @ssh_mp_clear(%struct.SshIntRec* %start)
store %struct.SshIntRec* %t, %struct.SshIntRec** %ret, align 8
store  i32 %27, i32* %min_bits, align 8
store  i32 %28, i32* %max_bits, align 8
store  %struct.SshRandomStateRec* %29, %struct.SshRandomStateRec** %state, align 8
  %1 = alloca %struct.SshIntRec*, align 8
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca %struct.SshRandomStateRec*, align 8
  %pprime = alloca %struct.SshIntRec, align 8
  %temp = alloca %struct.SshIntRec, align 8
  %moduli = alloca i64*, align 8
  %difference = alloca i64, align 8
  %num_primes = alloca i64, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %divisible = alloca i32, align 4
  %progress_counter = alloca i32, align 4
  store i32 %min_bits, i32* %2, align 4
  store i32 %max_bits, i32* %3, align 4
  store %struct.SshRandomStateRec* %state, %struct.SshRandomStateRec** %4, align 8
  store i32 0, i32* %progress_counter, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = icmp sge i32 %5, %6
