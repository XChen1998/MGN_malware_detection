#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(1, 8, 256),(2, 9, 256),(3, 10, 256),(4, 20, 256),(5, 8, 256),(6, 9, 256),(7, 10, 256),(8, 1, 256),(8, 5, 256),(9, 2, 256),(9, 6, 256),(10, 3, 256),(10, 7, 256),(10, 11, 256),(11, 10, 256),(20, 4, 256),(21, 24, 256),(22, 25, 256),(23, 30, 256),(24, 21, 256),(24, 26, 256),(24, 31, 256),(24, 35, 256),(24, 38, 256),(25, 22, 256),(25, 33, 256),(25, 40, 256),(25, 58, 256),(26, 24, 256),(26, 27, 256),(26, 45, 256),(26, 49, 256),(26, 63, 256),(27, 26, 256),(27, 28, 1),(28, 27, 1),(28, 29, 256),(29, 28, 256),(29, 30, 256),(30, 23, 256),(30, 29, 256),(30, 37, 256),(31, 24, 256),(31, 32, 256),(32, 31, 256),(32, 34, 1),(33, 25, 256),(33, 34, 1),(34, 32, 1),(34, 33, 1),(34, 36, 256),(35, 24, 256),(35, 36, 256),(36, 34, 256),(36, 35, 256),(37, 30, 256),(38, 24, 256),(38, 39, 256),(39, 38, 256),(39, 57, 256),(40, 25, 256),(40, 41, 1),(41, 40, 1),(41, 42, 256),(42, 41, 256),(42, 43, 1),(43, 42, 1),(43, 44, 256),(44, 43, 256),(44, 46, 256),(45, 26, 256),(45, 46, 256),(46, 44, 256),(46, 45, 256),(47, 48, 1),(48, 47, 1),(48, 50, 1),(49, 26, 256),(49, 50, 1),(50, 48, 1),(50, 49, 1),(50, 51, 1),(51, 50, 1),(51, 52, 256),(52, 51, 256),(52, 53, 1),(53, 52, 1),(53, 54, 1),(54, 53, 1),(55, 56, 1),(56, 55, 1),(57, 39, 256),(58, 25, 256),(58, 59, 1),(59, 58, 1),(59, 60, 256),(60, 59, 256),(60, 61, 1),(61, 60, 1),(61, 62, 256),(62, 61, 256),(62, 64, 256),(63, 26, 256),(63, 64, 256),(64, 62, 256),(64, 63, 256),(66, 71, 256),(67, 72, 256),(68, 73, 256),(69, 77, 256),(70, 76, 256),(71, 66, 256),(71, 80, 256),(71, 92, 256),(71, 99, 256),(72, 67, 256),(72, 87, 256),(72, 97, 256),(72, 104, 256),(73, 68, 256),(73, 74, 256),(74, 73, 256),(74, 75, 1),(75, 74, 1),(75, 76, 256),(76, 70, 256),(76, 75, 256),(77, 69, 256),(77, 78, 256),(77, 85, 256),(78, 77, 256),(78, 79, 1),(79, 78, 1),(79, 81, 1),(80, 71, 256),(80, 81, 1),(81, 79, 1),(81, 80, 1),(81, 82, 1),(82, 81, 1),(82, 83, 256),(83, 82, 256),(83, 84, 1),(84, 83, 1),(85, 77, 256),(85, 86, 1),(86, 85, 1),(86, 88, 1),(87, 72, 256),(87, 88, 1),(88, 86, 1),(88, 87, 1),(88, 89, 1),(89, 88, 1),(89, 90, 256),(90, 89, 256),(90, 91, 1),(91, 90, 1),(92, 71, 256),(92, 93, 1),(93, 92, 1),(93, 94, 256),(94, 93, 256),(94, 95, 1),(95, 94, 1),(95, 96, 256),(96, 95, 256),(96, 98, 256),(97, 72, 256),(97, 98, 256),(98, 96, 256),(98, 97, 256),(99, 71, 256),(99, 100, 1),(100, 99, 1),(100, 101, 256),(101, 100, 256),(101, 102, 1),(102, 101, 1),(102, 103, 256),(103, 102, 256),(103, 105, 256),(104, 72, 256),(104, 105, 256),(105, 103, 256),(105, 104, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
