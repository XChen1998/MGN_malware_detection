#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(2, 3, 1),(3, 2, 1),(3, 4, 1),(4, 3, 1),(6, 7, 1),(7, 6, 1),(7, 8, 256),(8, 7, 256),(8, 12, 1),(9, 10, 1),(10, 9, 1),(10, 11, 256),(11, 10, 256),(11, 12, 1),(12, 8, 1),(12, 11, 1),(12, 13, 1),(13, 12, 1),(15, 16, 1),(16, 15, 1),(16, 17, 256),(17, 16, 256),(17, 21, 1),(18, 19, 1),(19, 18, 1),(19, 20, 256),(20, 19, 256),(20, 21, 1),(21, 17, 1),(21, 20, 1),(21, 22, 1),(22, 21, 1),(25, 26, 1),(26, 25, 1),(30, 31, 1),(31, 30, 1),(31, 32, 1),(31, 58, 1),(32, 31, 1),(32, 33, 256),(32, 59, 1),(33, 32, 256),(33, 34, 1),(34, 33, 1),(34, 41, 1),(35, 36, 1),(36, 35, 1),(36, 37, 1),(37, 36, 1),(37, 38, 256),(38, 37, 256),(38, 39, 1),(39, 38, 1),(39, 40, 1),(40, 39, 1),(40, 41, 1),(41, 34, 1),(41, 40, 1),(41, 42, 1),(42, 41, 1),(42, 43, 1),(43, 42, 1),(44, 45, 1),(45, 44, 1),(47, 48, 1),(48, 47, 1),(48, 49, 256),(49, 48, 256),(49, 53, 1),(50, 51, 1),(51, 50, 1),(51, 52, 256),(52, 51, 256),(52, 53, 1),(53, 49, 1),(53, 52, 1),(53, 54, 1),(54, 53, 1),(55, 56, 1),(56, 55, 1),(57, 63, 256),(58, 31, 1),(58, 64, 256),(59, 32, 1),(59, 65, 256),(60, 63, 256),(61, 64, 256),(62, 65, 256),(63, 57, 256),(63, 60, 256),(63, 70, 256),(64, 58, 256),(64, 61, 256),(64, 66, 256),(65, 59, 256),(65, 62, 256),(65, 72, 256),(66, 64, 256),(66, 67, 1),(67, 66, 1),(67, 68, 1),(68, 67, 1),(68, 69, 1),(69, 68, 1),(70, 63, 256),(70, 71, 1),(71, 70, 1),(72, 65, 256),(72, 73, 1),(73, 72, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
