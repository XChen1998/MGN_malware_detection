#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 86, 256),(1, 87, 256),(4, 155, 256),(4, 157, 256),(25, 26, 256),(26, 25, 256),(26, 27, 256),(26, 43, 256),(27, 26, 256),(27, 28, 1),(28, 27, 1),(28, 29, 1),(29, 28, 1),(29, 30, 256),(30, 29, 256),(30, 31, 1),(31, 30, 1),(31, 32, 256),(32, 31, 256),(32, 33, 256),(32, 35, 256),(32, 48, 256),(33, 32, 256),(33, 34, 1),(34, 33, 1),(35, 32, 256),(35, 36, 1),(36, 35, 1),(36, 37, 1),(37, 36, 1),(37, 38, 256),(38, 37, 256),(38, 39, 1),(39, 38, 1),(39, 40, 256),(40, 39, 256),(40, 41, 256),(40, 53, 256),(41, 40, 256),(41, 42, 1),(42, 41, 1),(43, 26, 256),(43, 44, 1),(44, 43, 1),(44, 45, 1),(45, 44, 1),(45, 46, 256),(46, 45, 256),(46, 47, 1),(47, 46, 1),(47, 48, 256),(48, 32, 256),(48, 47, 256),(48, 49, 256),(48, 51, 256),(49, 48, 256),(49, 50, 1),(50, 49, 1),(51, 48, 256),(51, 52, 1),(52, 51, 1),(53, 40, 256),(53, 54, 1),(54, 53, 1),(54, 55, 1),(55, 54, 1),(55, 57, 1),(56, 57, 1),(57, 55, 1),(57, 56, 1),(57, 59, 1),(59, 57, 1),(59, 60, 1),(60, 59, 1),(62, 84, 256),(63, 106, 256),(64, 90, 256),(65, 92, 256),(66, 85, 256),(67, 78, 256),(68, 79, 1),(69, 81, 1),(70, 80, 256),(71, 82, 256),(72, 83, 256),(78, 67, 256),(79, 68, 1),(79, 80, 256),(80, 70, 256),(80, 79, 256),(80, 88, 256),(80, 100, 256),(81, 69, 1),(81, 82, 256),(82, 71, 256),(82, 81, 256),(82, 91, 256),(83, 72, 256),(83, 101, 256),(84, 62, 256),(84, 93, 256),(85, 66, 256),(86, 0, 256),(87, 1, 256),(88, 80, 256),(88, 89, 1),(89, 88, 1),(89, 90, 256),(90, 64, 256),(90, 89, 256),(90, 95, 256),(90, 97, 256),(91, 82, 256),(91, 92, 256),(92, 65, 256),(92, 91, 256),(93, 84, 256),(93, 94, 1),(94, 93, 1),(94, 98, 256),(95, 90, 256),(95, 96, 1),(96, 95, 1),(96, 97, 256),(96, 98, 256),(97, 90, 256),(97, 96, 256),(97, 99, 256),(98, 94, 256),(98, 96, 256),(99, 97, 256),(99, 105, 1),(100, 80, 256),(100, 103, 1),(101, 83, 256),(101, 102, 1),(102, 101, 1),(102, 103, 1),(103, 100, 1),(103, 102, 1),(103, 104, 1),(104, 103, 1),(104, 105, 1),(105, 99, 1),(105, 104, 1),(106, 63, 256),(155, 4, 256),(155, 156, 1),(156, 155, 1),(156, 157, 256),(157, 4, 256),(157, 156, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
