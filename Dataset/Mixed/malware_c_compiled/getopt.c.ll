@opterr = global i32 1, align 4
@optind = global i32 1, align 4
@getopt.sp = internal global i32 1, align 4
@optopt = common global i32 0, align 4
@optarg = common global i8* null, align 8
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8**, align 8
  %4 = alloca i8*, align 8
  %c = alloca i32, align 4
  %cp = alloca i8*, align 8
  %errbuf = alloca [2 x i8], align 1
  %errbuf1 = alloca [2 x i8], align 1
  store i32 %argc, i32* %2, align 4
  store i8** %argv, i8*** %3, align 8
  store i8* %opts, i8** %4, align 8
  %5 = load i32, i32* @getopt.sp, align 4
  %6 = icmp eq i32 %5, 1
  store i32 -1, i32* %1, align 4
  %38 = load i32, i32* @optind, align 4
  %39 = sext i32 %38 to i64
  %40 = load i8**, i8*** %3, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 %39
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 @strcmp(i8* %42, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)) #4
  %46 = icmp eq i32 %44, 0
  %49 = load i32, i32* @optind, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* @optind, align 4
  store i32 -1, i32* %1, align 4
  %99 = call i32 (i32, i8*, i64, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i64, ...)*)(i32 2, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i64 19)
