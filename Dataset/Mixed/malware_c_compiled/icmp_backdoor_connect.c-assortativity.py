#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(11, 16, 256),(12, 17, 256),(13, 18, 256),(14, 34, 256),(16, 11, 256),(16, 21, 256),(16, 23, 256),(17, 12, 256),(17, 19, 256),(17, 29, 256),(17, 31, 256),(18, 13, 256),(18, 26, 256),(18, 28, 256),(19, 17, 256),(19, 20, 1),(20, 19, 1),(21, 16, 256),(21, 22, 1),(21, 24, 256),(22, 21, 1),(22, 23, 256),(23, 16, 256),(23, 22, 256),(23, 35, 256),(24, 21, 256),(24, 25, 1),(25, 24, 1),(25, 27, 1),(26, 18, 256),(26, 27, 1),(27, 25, 1),(27, 26, 1),(27, 28, 256),(28, 18, 256),(28, 27, 256),(28, 42, 256),(28, 44, 256),(29, 17, 256),(29, 30, 1),(30, 29, 1),(30, 31, 256),(31, 17, 256),(31, 30, 256),(31, 32, 256),(32, 31, 256),(32, 33, 1),(33, 32, 1),(34, 14, 256),(34, 38, 1),(34, 40, 256),(35, 23, 256),(35, 36, 1),(36, 35, 1),(36, 37, 256),(37, 36, 256),(37, 39, 256),(38, 34, 1),(38, 39, 256),(39, 37, 256),(39, 38, 256),(40, 34, 256),(40, 41, 1),(41, 40, 1),(41, 43, 1),(42, 28, 256),(42, 43, 1),(43, 41, 1),(43, 42, 1),(43, 44, 256),(44, 28, 256),(44, 43, 256),(44, 45, 1),(45, 44, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
