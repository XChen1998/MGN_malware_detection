#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(1, 2, 1),(2, 1, 1),(2, 3, 1),(3, 2, 1),(3, 4, 1),(4, 3, 1),(4, 5, 1),(5, 4, 1),(7, 18, 256),(8, 9, 1),(9, 8, 1),(9, 10, 256),(10, 9, 256),(10, 11, 256),(11, 10, 256),(11, 12, 256),(12, 11, 256),(12, 13, 1),(13, 12, 1),(13, 14, 1),(14, 13, 1),(16, 17, 1),(17, 16, 1),(18, 7, 256),(18, 19, 256),(18, 22, 256),(19, 18, 256),(20, 21, 1),(20, 21, 1),(21, 20, 1),(21, 20, 1),(22, 18, 256),(23, 26, 1),(25, 26, 1),(26, 23, 1),(26, 25, 1),(26, 27, 256),(27, 26, 256),(27, 28, 1),(28, 27, 1),(28, 29, 1),(29, 28, 1),(29, 30, 1),(30, 29, 1),(30, 31, 1),(31, 30, 1),(33, 40, 256),(34, 41, 256),(35, 42, 256),(36, 43, 256),(40, 33, 256),(41, 34, 256),(42, 35, 256),(42, 60, 256),(43, 36, 256),(43, 44, 1),(44, 43, 1),(46, 58, 256),(47, 60, 256),(58, 46, 256),(58, 59, 1),(59, 58, 1),(60, 42, 256),(60, 47, 256),(60, 61, 256),(60, 64, 256),(61, 60, 256),(61, 62, 1),(62, 61, 1),(62, 63, 1),(62, 64, 256),(63, 62, 1),(64, 60, 256),(64, 62, 256),(64, 65, 256),(65, 64, 256),(65, 66, 1),(66, 65, 1),(67, 68, 1),(67, 68, 1),(68, 67, 1),(68, 67, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
