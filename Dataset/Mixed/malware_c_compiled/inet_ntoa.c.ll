@inet_ntoa.outstring = internal global [16 x i8] zeroinitializer, align 16
  %in = alloca %struct.in_addr, align 4
  %b = alloca i8*, align 8
  %1 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %in, i32 0, i32 0
  store i32 %in.coerce, i32* %1, align 4
  %2 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %in, i32 0, i32 0
  %3 = bitcast i32* %2 to i8*
  store i8* %3, i8** %b, align 8
  %4 = load i8*, i8** %b, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 0
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = load i8*, i8** %b, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = load i8*, i8** %b, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 2
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = load i8*, i8** %b, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @inet_ntoa.outstring, i32 0, i32 0), i64 16, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 %7, i32 %11, i32 %15, i32 %19) #2
