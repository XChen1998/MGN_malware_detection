#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 48, 256),(4, 5, 1),(5, 4, 1),(5, 6, 1),(6, 5, 1),(8, 10, 256),(10, 8, 256),(10, 11, 1),(11, 10, 1),(12, 13, 256),(13, 12, 256),(14, 15, 1),(15, 14, 1),(16, 29, 256),(18, 31, 256),(19, 32, 1),(19, 35, 1),(19, 38, 1),(19, 69, 1),(20, 59, 256),(21, 52, 1),(21, 54, 1),(21, 61, 1),(21, 65, 1),(22, 45, 1),(22, 50, 1),(22, 56, 1),(22, 60, 1),(23, 63, 256),(25, 67, 1),(29, 16, 256),(30, 31, 256),(31, 18, 256),(31, 30, 256),(31, 41, 256),(32, 19, 1),(32, 33, 256),(33, 32, 256),(33, 34, 1),(34, 33, 1),(35, 19, 1),(35, 36, 256),(36, 35, 256),(36, 37, 1),(37, 36, 1),(38, 19, 1),(38, 39, 1),(39, 38, 1),(39, 40, 256),(40, 39, 256),(41, 31, 256),(41, 42, 1),(42, 41, 1),(42, 43, 256),(43, 42, 256),(43, 44, 1),(44, 43, 1),(45, 22, 1),(45, 46, 1),(46, 45, 1),(46, 47, 1),(47, 46, 1),(48, 0, 256),(48, 49, 1),(48, 49, 1),(49, 48, 1),(49, 48, 1),(50, 22, 1),(52, 21, 1),(52, 53, 1),(53, 52, 1),(54, 21, 1),(54, 55, 1),(55, 54, 1),(56, 22, 1),(56, 57, 1),(56, 57, 1),(57, 56, 1),(57, 56, 1),(58, 59, 256),(59, 20, 256),(59, 58, 256),(60, 22, 1),(61, 21, 1),(61, 62, 1),(61, 62, 1),(62, 61, 1),(62, 61, 1),(63, 23, 256),(63, 64, 256),(64, 63, 256),(65, 21, 1),(65, 66, 1),(65, 66, 1),(66, 65, 1),(66, 65, 1),(67, 25, 1),(67, 68, 256),(68, 67, 256),(69, 19, 1),(69, 70, 1),(70, 69, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
