#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 1, 1),(1, 0, 1),(1, 2, 1),(2, 1, 1),(3, 4, 1),(4, 3, 1),(4, 5, 1),(5, 4, 1),(5, 6, 1),(6, 5, 1),(6, 7, 1),(7, 6, 1),(7, 11, 256),(8, 9, 1),(8, 11, 256),(9, 8, 1),(9, 10, 256),(10, 9, 256),(10, 12, 256),(10, 22, 256),(11, 7, 256),(11, 8, 256),(12, 10, 256),(13, 14, 1),(13, 14, 1),(14, 13, 1),(14, 13, 1),(16, 17, 1),(17, 16, 1),(18, 21, 1),(19, 20, 1),(20, 19, 1),(20, 21, 1),(21, 18, 1),(21, 20, 1),(21, 22, 256),(22, 10, 256),(22, 21, 256),(22, 23, 256),(22, 25, 256),(23, 22, 256),(23, 24, 1),(23, 26, 256),(24, 23, 1),(24, 25, 256),(25, 22, 256),(25, 24, 256),(25, 27, 256),(25, 30, 256),(25, 32, 256),(26, 23, 256),(27, 25, 256),(28, 29, 1),(28, 29, 1),(29, 28, 1),(29, 28, 1),(30, 25, 256),(30, 31, 1),(30, 33, 256),(31, 30, 1),(31, 32, 256),(32, 25, 256),(32, 31, 256),(32, 34, 256),(32, 37, 256),(33, 30, 256),(34, 32, 256),(35, 36, 1),(35, 36, 1),(36, 35, 1),(36, 35, 1),(37, 32, 256),(37, 38, 256),(38, 37, 256),(39, 40, 1),(40, 39, 1),(41, 42, 1),(42, 41, 1),(42, 43, 1),(43, 42, 1),(44, 45, 1),(45, 44, 1),(45, 46, 1),(46, 45, 1),(50, 51, 1),(51, 50, 1),(52, 53, 1),(53, 52, 1),(53, 54, 1),(54, 53, 1),(56, 77, 256),(57, 78, 256),(58, 79, 256),(59, 80, 256),(60, 81, 256),(61, 82, 256),(62, 83, 256),(63, 84, 256),(64, 85, 256),(65, 86, 256),(66, 87, 256),(67, 88, 256),(68, 89, 256),(69, 90, 256),(71, 91, 256),(72, 99, 256),(72, 101, 256),(77, 56, 256),(78, 57, 256),(79, 58, 256),(79, 92, 256),(80, 59, 256),(80, 96, 256),(80, 106, 256),(81, 60, 256),(81, 93, 256),(82, 61, 256),(83, 62, 256),(84, 63, 256),(85, 64, 256),(86, 65, 256),(86, 104, 256),(87, 66, 256),(88, 67, 256),(89, 68, 256),(90, 69, 256),(91, 71, 256),(92, 79, 256),(92, 95, 1),(93, 81, 256),(93, 94, 1),(93, 94, 1),(94, 93, 1),(94, 93, 1),(95, 92, 1),(96, 80, 256),(96, 97, 1),(97, 96, 1),(97, 98, 1),(98, 97, 1),(99, 72, 256),(99, 100, 1),(99, 102, 256),(100, 99, 1),(100, 101, 256),(101, 72, 256),(101, 100, 256),(101, 103, 256),(102, 99, 256),(103, 101, 256),(104, 86, 256),(104, 105, 1),(104, 105, 1),(105, 104, 1),(105, 104, 1),(106, 80, 256),(106, 107, 1),(107, 106, 1),(107, 108, 1),(108, 107, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
