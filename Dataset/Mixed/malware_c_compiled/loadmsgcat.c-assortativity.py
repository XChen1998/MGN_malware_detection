#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 84, 256),(0, 86, 256),(1, 2, 1),(2, 1, 1),(2, 3, 256),(3, 2, 256),(3, 4, 1),(4, 3, 1),(4, 5, 1),(5, 4, 1),(5, 6, 1),(6, 5, 1),(6, 9, 256),(7, 8, 1),(8, 7, 1),(8, 9, 256),(9, 6, 256),(9, 8, 256),(12, 15, 256),(13, 14, 1),(14, 13, 1),(14, 15, 256),(15, 12, 256),(15, 14, 256),(16, 17, 1),(17, 16, 1),(18, 19, 1),(19, 18, 1),(19, 20, 256),(20, 19, 256),(20, 21, 1),(21, 20, 1),(22, 23, 1),(23, 22, 1),(23, 24, 256),(24, 23, 256),(24, 25, 1),(24, 25, 1),(25, 24, 1),(25, 24, 1),(26, 29, 256),(27, 28, 1),(28, 27, 1),(28, 29, 256),(29, 26, 256),(29, 28, 256),(30, 31, 1),(31, 30, 1),(31, 41, 1),(32, 33, 1),(33, 32, 1),(33, 34, 256),(34, 33, 256),(34, 35, 1),(35, 34, 1),(36, 37, 1),(37, 36, 1),(37, 38, 256),(38, 37, 256),(38, 39, 1),(38, 39, 1),(39, 38, 1),(39, 38, 1),(39, 40, 1),(40, 39, 1),(40, 41, 1),(41, 31, 1),(41, 40, 1),(41, 42, 1),(42, 41, 1),(42, 45, 256),(43, 44, 1),(44, 43, 1),(44, 45, 256),(45, 42, 256),(45, 44, 256),(48, 49, 256),(49, 48, 256),(49, 50, 256),(50, 49, 256),(50, 56, 256),(51, 52, 1),(52, 51, 1),(52, 53, 256),(53, 52, 256),(53, 55, 256),(55, 53, 256),(56, 50, 256),(58, 59, 1),(59, 58, 1),(59, 60, 256),(60, 59, 256),(61, 62, 1),(62, 61, 1),(62, 63, 256),(63, 62, 256),(64, 72, 256),(67, 73, 256),(72, 64, 256),(72, 74, 256),(72, 77, 256),(72, 80, 256),(73, 67, 256),(74, 72, 256),(74, 75, 1),(75, 74, 1),(75, 76, 256),(76, 75, 256),(77, 72, 256),(77, 78, 1),(78, 77, 1),(78, 79, 256),(79, 78, 256),(80, 72, 256),(80, 81, 1),(81, 80, 1),(81, 82, 256),(82, 81, 256),(82, 83, 1),(83, 82, 1),(84, 0, 256),(84, 85, 1),(85, 84, 1),(85, 86, 256),(86, 0, 256),(86, 85, 256),(87, 88, 256),(88, 87, 256),(88, 89, 256),(88, 91, 256),(88, 95, 256),(88, 99, 256),(89, 88, 256),(89, 90, 1),(90, 89, 1),(90, 94, 1),(91, 88, 256),(91, 92, 1),(92, 91, 1),(92, 93, 1),(93, 92, 1),(93, 94, 1),(94, 90, 1),(94, 93, 1),(94, 98, 1),(95, 88, 256),(95, 96, 1),(96, 95, 1),(96, 97, 1),(97, 96, 1),(97, 98, 1),(98, 94, 1),(98, 97, 1),(98, 101, 1),(99, 88, 256),(99, 100, 1),(100, 99, 1),(100, 101, 1),(101, 98, 1),(101, 100, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
