#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(24, 32, 1),(24, 53, 1),(24, 72, 1),(32, 24, 1),(32, 34, 256),(32, 53, 1),(33, 34, 256),(34, 32, 256),(34, 33, 256),(34, 35, 256),(34, 38, 256),(34, 41, 256),(34, 44, 256),(34, 47, 256),(34, 50, 256),(35, 34, 256),(35, 36, 1),(36, 35, 1),(36, 37, 256),(37, 36, 256),(37, 40, 256),(38, 34, 256),(38, 39, 1),(39, 38, 1),(39, 40, 256),(40, 37, 256),(40, 39, 256),(41, 34, 256),(41, 42, 1),(42, 41, 1),(42, 43, 256),(43, 42, 256),(43, 46, 256),(44, 34, 256),(44, 45, 1),(45, 44, 1),(45, 46, 256),(46, 43, 256),(46, 45, 256),(47, 34, 256),(47, 48, 1),(48, 47, 1),(48, 49, 256),(49, 48, 256),(49, 52, 256),(50, 34, 256),(50, 51, 1),(51, 50, 1),(51, 52, 256),(52, 49, 256),(52, 51, 256),(53, 24, 1),(53, 32, 1),(53, 55, 256),(53, 72, 1),(54, 55, 256),(55, 53, 256),(55, 54, 256),(55, 56, 256),(55, 59, 256),(55, 62, 256),(55, 65, 256),(55, 68, 256),(56, 55, 256),(56, 57, 1),(57, 56, 1),(57, 58, 256),(58, 57, 256),(58, 73, 1),(59, 55, 256),(59, 60, 1),(60, 59, 1),(60, 61, 256),(61, 60, 256),(62, 55, 256),(62, 63, 1),(63, 62, 1),(63, 64, 1),(64, 63, 1),(64, 67, 256),(65, 55, 256),(65, 66, 1),(66, 65, 1),(66, 67, 256),(67, 64, 256),(67, 66, 256),(68, 55, 256),(68, 69, 1),(69, 68, 1),(69, 70, 1),(70, 69, 1),(70, 71, 256),(71, 70, 256),(72, 24, 1),(72, 53, 1),(72, 76, 256),(73, 58, 1),(73, 77, 256),(74, 76, 256),(75, 77, 256),(76, 72, 256),(76, 74, 256),(76, 78, 256),(76, 82, 256),(76, 86, 256),(76, 92, 256),(76, 96, 256),(76, 100, 256),(76, 104, 256),(76, 107, 256),(76, 113, 256),(76, 125, 256),(77, 73, 256),(77, 75, 256),(77, 117, 256),(77, 121, 256),(77, 123, 256),(78, 76, 256),(78, 79, 1),(79, 78, 1),(79, 80, 256),(80, 79, 256),(80, 81, 1),(81, 80, 1),(81, 84, 1),(82, 76, 256),(82, 83, 1),(83, 82, 1),(83, 84, 1),(84, 81, 1),(84, 83, 1),(84, 85, 256),(85, 84, 256),(85, 95, 256),(86, 76, 256),(86, 87, 1),(87, 86, 1),(87, 88, 256),(87, 90, 256),(88, 87, 256),(88, 89, 1),(88, 91, 1),(89, 88, 1),(89, 90, 256),(90, 87, 256),(90, 89, 256),(91, 88, 1),(91, 94, 1),(92, 76, 256),(92, 93, 1),(93, 92, 1),(93, 94, 1),(94, 91, 1),(94, 93, 1),(94, 95, 256),(95, 85, 256),(95, 94, 256),(96, 76, 256),(96, 97, 1),(97, 96, 1),(97, 98, 256),(98, 97, 256),(98, 99, 1),(99, 98, 1),(99, 102, 1),(100, 76, 256),(100, 101, 1),(101, 100, 1),(101, 102, 1),(102, 99, 1),(102, 101, 1),(102, 103, 256),(103, 102, 256),(104, 76, 256),(104, 105, 1),(105, 104, 1),(105, 106, 256),(106, 105, 256),(106, 116, 256),(107, 76, 256),(107, 108, 1),(108, 107, 1),(108, 109, 256),(108, 111, 256),(109, 108, 256),(109, 110, 1),(109, 112, 1),(110, 109, 1),(110, 111, 256),(111, 108, 256),(111, 110, 256),(112, 109, 1),(112, 115, 1),(113, 76, 256),(113, 114, 1),(114, 113, 1),(114, 115, 1),(115, 112, 1),(115, 114, 1),(115, 116, 256),(116, 106, 256),(116, 115, 256),(117, 77, 256),(117, 118, 256),(118, 117, 256),(118, 119, 1),(119, 118, 1),(119, 120, 1),(120, 119, 1),(121, 77, 256),(121, 122, 1),(121, 124, 256),(122, 121, 1),(122, 123, 256),(123, 77, 256),(123, 122, 256),(124, 121, 256),(124, 130, 256),(125, 76, 256),(125, 126, 1),(126, 125, 1),(126, 127, 256),(126, 129, 256),(127, 126, 256),(127, 128, 1),(127, 130, 256),(128, 127, 1),(128, 129, 256),(129, 126, 256),(129, 128, 256),(130, 124, 256),(130, 127, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
