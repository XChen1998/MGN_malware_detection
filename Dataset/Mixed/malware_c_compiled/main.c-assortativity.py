#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(1, 14, 256),(1, 43, 256),(8, 9, 1),(8, 9, 1),(9, 8, 1),(9, 8, 1),(11, 12, 1),(12, 11, 1),(12, 13, 1),(13, 12, 1),(14, 1, 256),(15, 16, 1),(16, 15, 1),(17, 18, 1),(18, 17, 1),(20, 22, 1),(21, 24, 1),(22, 20, 1),(22, 23, 256),(23, 22, 256),(23, 52, 256),(24, 21, 1),(24, 25, 1),(25, 24, 1),(25, 26, 256),(26, 25, 256),(26, 55, 256),(27, 28, 1),(28, 27, 1),(30, 32, 1),(31, 34, 1),(32, 30, 1),(32, 33, 256),(33, 32, 256),(33, 62, 256),(34, 31, 1),(34, 35, 1),(35, 34, 1),(35, 36, 256),(36, 35, 256),(36, 65, 256),(37, 38, 1),(37, 38, 1),(38, 37, 1),(38, 37, 1),(39, 40, 256),(40, 39, 256),(40, 41, 1),(41, 40, 1),(41, 42, 1),(42, 41, 1),(43, 1, 256),(43, 44, 1),(43, 44, 1),(44, 43, 1),(44, 43, 1),(46, 47, 1),(47, 46, 1),(49, 51, 1),(50, 53, 1),(51, 49, 1),(51, 52, 256),(52, 23, 256),(52, 51, 256),(52, 72, 256),(53, 50, 1),(53, 54, 1),(54, 53, 1),(54, 55, 256),(55, 26, 256),(55, 54, 256),(55, 75, 256),(56, 57, 1),(57, 56, 1),(59, 61, 1),(60, 63, 1),(61, 59, 1),(61, 62, 256),(62, 33, 256),(62, 61, 256),(62, 82, 256),(63, 60, 1),(63, 64, 1),(64, 63, 1),(64, 65, 256),(65, 36, 256),(65, 64, 256),(65, 85, 256),(66, 67, 1),(67, 66, 1),(69, 71, 1),(70, 73, 1),(71, 69, 1),(71, 72, 256),(72, 52, 256),(72, 71, 256),(73, 70, 1),(73, 74, 1),(74, 73, 1),(74, 75, 256),(75, 55, 256),(75, 74, 256),(76, 77, 1),(77, 76, 1),(79, 81, 1),(80, 83, 1),(81, 79, 1),(81, 82, 256),(82, 62, 256),(82, 81, 256),(83, 80, 1),(83, 84, 1),(84, 83, 1),(84, 85, 256),(85, 65, 256),(85, 84, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
