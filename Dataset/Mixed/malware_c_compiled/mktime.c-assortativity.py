#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 94, 1),(2, 13, 256),(3, 14, 256),(4, 15, 256),(5, 16, 256),(6, 17, 256),(7, 18, 256),(8, 22, 256),(9, 28, 256),(10, 46, 256),(11, 50, 256),(12, 62, 256),(13, 2, 256),(13, 19, 256),(14, 3, 256),(14, 55, 256),(15, 4, 256),(15, 65, 256),(16, 5, 256),(16, 73, 256),(17, 6, 256),(17, 81, 256),(18, 7, 256),(18, 23, 256),(18, 56, 256),(18, 66, 256),(18, 74, 256),(18, 82, 256),(19, 13, 256),(19, 20, 1),(20, 19, 1),(20, 21, 1),(21, 20, 1),(21, 22, 256),(22, 8, 256),(22, 21, 256),(22, 29, 256),(22, 34, 256),(22, 40, 256),(22, 47, 256),(23, 18, 256),(23, 24, 1),(24, 23, 1),(24, 25, 256),(25, 24, 256),(25, 26, 1),(26, 25, 1),(26, 27, 1),(27, 26, 1),(27, 28, 256),(28, 9, 256),(28, 27, 256),(28, 31, 256),(28, 36, 256),(28, 42, 256),(28, 48, 256),(29, 22, 256),(29, 30, 1),(30, 29, 1),(30, 33, 1),(31, 28, 256),(31, 32, 1),(32, 31, 1),(32, 33, 1),(33, 30, 1),(33, 32, 1),(33, 39, 1),(34, 22, 256),(34, 35, 1),(35, 34, 1),(35, 38, 1),(36, 28, 256),(36, 37, 1),(37, 36, 1),(37, 38, 1),(38, 35, 1),(38, 37, 1),(38, 39, 1),(39, 33, 1),(39, 38, 1),(39, 45, 1),(40, 22, 256),(40, 41, 1),(41, 40, 1),(41, 44, 1),(42, 28, 256),(42, 43, 1),(43, 42, 1),(43, 44, 1),(44, 41, 1),(44, 43, 1),(44, 45, 1),(45, 39, 1),(45, 44, 1),(45, 46, 256),(46, 10, 256),(46, 45, 256),(46, 53, 256),(47, 22, 256),(47, 49, 1),(48, 28, 256),(48, 49, 1),(49, 47, 1),(49, 48, 1),(49, 50, 256),(50, 11, 256),(50, 49, 256),(50, 51, 256),(51, 50, 256),(51, 52, 1),(52, 51, 1),(52, 54, 1),(53, 46, 256),(53, 54, 1),(54, 52, 1),(54, 53, 1),(54, 61, 1),(55, 14, 256),(55, 59, 1),(56, 18, 256),(56, 57, 1),(57, 56, 1),(57, 58, 256),(58, 57, 256),(58, 59, 1),(59, 55, 1),(59, 58, 1),(59, 60, 1),(60, 59, 1),(60, 61, 1),(61, 54, 1),(61, 60, 1),(61, 62, 256),(62, 12, 256),(62, 61, 256),(62, 63, 256),(63, 62, 256),(63, 64, 1),(64, 63, 1),(64, 71, 1),(65, 15, 256),(65, 69, 1),(66, 18, 256),(66, 67, 1),(67, 66, 1),(67, 68, 256),(68, 67, 256),(68, 69, 1),(69, 65, 1),(69, 68, 1),(69, 70, 1),(70, 69, 1),(70, 71, 1),(71, 64, 1),(71, 70, 1),(71, 72, 1),(72, 71, 1),(72, 79, 1),(73, 16, 256),(73, 77, 1),(74, 18, 256),(74, 75, 1),(75, 74, 1),(75, 76, 256),(76, 75, 256),(76, 77, 1),(77, 73, 1),(77, 76, 1),(77, 78, 1),(78, 77, 1),(78, 79, 1),(79, 72, 1),(79, 78, 1),(79, 80, 1),(80, 79, 1),(80, 87, 1),(81, 17, 256),(81, 85, 1),(82, 18, 256),(82, 83, 1),(83, 82, 1),(83, 84, 256),(84, 83, 256),(84, 85, 1),(85, 81, 1),(85, 84, 1),(85, 86, 1),(86, 85, 1),(86, 87, 1),(87, 80, 1),(87, 86, 1),(88, 89, 1),(89, 88, 1),(90, 103, 256),(91, 92, 256),(92, 91, 256),(92, 93, 256),(93, 92, 256),(93, 94, 1),(94, 0, 1),(94, 93, 1),(96, 99, 256),(97, 100, 256),(99, 96, 256),(99, 101, 256),(100, 97, 256),(101, 99, 256),(101, 102, 1),(101, 102, 1),(102, 101, 1),(102, 101, 1),(103, 90, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
