#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 28, 256),(0, 31, 256),(3, 46, 256),(3, 67, 256),(6, 98, 256),(11, 35, 256),(11, 37, 256),(12, 102, 256),(13, 72, 256),(21, 23, 256),(22, 24, 256),(23, 21, 256),(23, 30, 256),(24, 22, 256),(24, 38, 256),(25, 26, 1),(26, 25, 1),(26, 27, 256),(27, 26, 256),(27, 29, 1),(28, 0, 256),(28, 29, 1),(29, 27, 1),(29, 28, 1),(30, 23, 256),(30, 32, 256),(30, 40, 256),(30, 43, 256),(30, 49, 256),(30, 54, 256),(30, 59, 256),(31, 0, 256),(31, 34, 256),(32, 30, 256),(32, 33, 1),(33, 32, 1),(33, 34, 256),(34, 31, 256),(34, 33, 256),(35, 11, 256),(35, 36, 1),(35, 38, 256),(36, 35, 1),(36, 37, 256),(37, 11, 256),(37, 36, 256),(38, 24, 256),(38, 35, 256),(38, 39, 256),(38, 44, 256),(38, 62, 256),(38, 104, 256),(38, 106, 256),(39, 38, 256),(39, 42, 256),(40, 30, 256),(40, 41, 1),(41, 40, 1),(41, 42, 256),(42, 39, 256),(42, 41, 256),(43, 30, 256),(43, 48, 256),(44, 38, 256),(44, 45, 1),(45, 44, 1),(45, 47, 1),(46, 3, 256),(46, 47, 1),(47, 45, 1),(47, 46, 1),(47, 48, 256),(48, 43, 256),(48, 47, 256),(49, 30, 256),(49, 50, 1),(50, 49, 1),(50, 51, 1),(51, 50, 1),(51, 52, 256),(52, 51, 256),(52, 53, 1),(53, 52, 1),(54, 30, 256),(54, 55, 1),(55, 54, 1),(55, 56, 1),(56, 55, 1),(56, 57, 256),(57, 56, 256),(57, 58, 1),(58, 57, 1),(59, 30, 256),(59, 60, 1),(60, 59, 1),(61, 63, 1),(62, 38, 256),(62, 63, 1),(63, 61, 1),(63, 62, 1),(64, 71, 256),(65, 66, 1),(66, 65, 1),(66, 68, 1),(67, 3, 256),(67, 68, 1),(68, 66, 1),(68, 67, 1),(68, 69, 256),(69, 68, 256),(69, 70, 1),(70, 69, 1),(70, 71, 256),(71, 64, 256),(71, 70, 256),(72, 13, 256),(72, 74, 1),(73, 75, 1),(74, 72, 1),(74, 75, 1),(75, 73, 1),(75, 74, 1),(75, 76, 256),(76, 75, 256),(76, 79, 256),(76, 100, 256),(77, 82, 256),(78, 79, 256),(79, 76, 256),(79, 78, 256),(79, 80, 256),(80, 79, 256),(80, 81, 1),(81, 80, 1),(82, 77, 256),(82, 83, 1),(83, 82, 1),(83, 84, 1),(84, 83, 1),(84, 85, 256),(85, 84, 256),(85, 86, 1),(86, 85, 1),(87, 89, 256),(88, 92, 256),(89, 87, 256),(89, 90, 256),(89, 107, 256),(89, 110, 256),(90, 89, 256),(90, 91, 256),(91, 90, 256),(91, 92, 256),(92, 88, 256),(92, 91, 256),(92, 93, 256),(92, 95, 256),(93, 92, 256),(93, 94, 1),(94, 93, 1),(95, 92, 256),(95, 96, 1),(96, 95, 1),(97, 98, 256),(98, 6, 256),(98, 97, 256),(98, 99, 256),(99, 98, 256),(99, 100, 256),(100, 76, 256),(100, 99, 256),(100, 101, 256),(101, 100, 256),(101, 102, 256),(102, 12, 256),(102, 101, 256),(104, 38, 256),(104, 105, 1),(105, 104, 1),(105, 106, 256),(106, 38, 256),(106, 105, 256),(107, 89, 256),(107, 108, 1),(108, 107, 1),(108, 109, 256),(109, 108, 256),(109, 110, 256),(110, 89, 256),(110, 109, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
