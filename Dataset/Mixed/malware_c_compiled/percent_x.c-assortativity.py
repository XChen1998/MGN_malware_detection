#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(1, 2, 1),(1, 4, 256),(2, 1, 1),(2, 3, 256),(3, 2, 256),(4, 1, 256),(4, 19, 256),(5, 7, 256),(5, 24, 256),(6, 9, 1),(7, 5, 256),(7, 8, 1),(8, 7, 1),(8, 9, 1),(9, 6, 1),(9, 8, 1),(9, 11, 1),(10, 11, 1),(11, 9, 1),(11, 10, 1),(14, 15, 256),(15, 14, 256),(16, 17, 1),(17, 16, 1),(18, 20, 1),(19, 4, 256),(19, 21, 1),(20, 18, 1),(20, 22, 1),(21, 19, 1),(21, 22, 1),(22, 20, 1),(22, 21, 1),(22, 23, 1),(23, 22, 1),(23, 24, 256),(24, 5, 256),(24, 23, 256),(25, 26, 1),(25, 26, 1),(26, 25, 1),(26, 25, 1),(27, 28, 1),(28, 27, 1),(28, 29, 1),(29, 28, 1),(31, 32, 1),(32, 31, 1),(35, 46, 256),(36, 47, 256),(37, 48, 256),(38, 49, 256),(39, 51, 256),(40, 57, 256),(42, 67, 256),(43, 59, 256),(45, 63, 256),(46, 35, 256),(46, 50, 256),(46, 52, 256),(47, 36, 256),(47, 53, 256),(48, 37, 256),(48, 58, 256),(49, 38, 256),(50, 46, 256),(50, 51, 256),(51, 39, 256),(51, 50, 256),(51, 68, 256),(51, 71, 256),(52, 46, 256),(52, 55, 1),(53, 47, 256),(53, 54, 1),(54, 53, 1),(54, 55, 1),(55, 52, 1),(55, 54, 1),(55, 56, 1),(56, 55, 1),(56, 57, 256),(57, 40, 256),(57, 56, 256),(58, 48, 256),(58, 59, 256),(59, 43, 256),(59, 58, 256),(59, 60, 256),(60, 59, 256),(60, 61, 256),(61, 60, 256),(61, 62, 1),(62, 61, 1),(63, 45, 256),(63, 64, 1),(64, 63, 1),(64, 65, 1),(65, 64, 1),(67, 42, 256),(67, 69, 1),(68, 51, 256),(68, 70, 1),(69, 67, 1),(69, 70, 1),(70, 68, 1),(70, 69, 1),(70, 71, 256),(71, 51, 256),(71, 70, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
