#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 4, 256),(1, 5, 256),(2, 6, 256),(3, 7, 256),(4, 0, 256),(4, 8, 256),(4, 12, 256),(4, 18, 256),(5, 1, 256),(5, 13, 256),(5, 32, 256),(6, 2, 256),(6, 14, 256),(6, 33, 256),(7, 3, 256),(7, 15, 256),(7, 34, 256),(8, 4, 256),(8, 9, 1),(9, 8, 1),(9, 10, 256),(10, 9, 256),(10, 11, 1),(11, 10, 1),(12, 4, 256),(13, 5, 256),(13, 66, 256),(13, 72, 1),(14, 6, 256),(14, 73, 1),(15, 7, 256),(15, 16, 1),(16, 15, 1),(17, 18, 256),(18, 4, 256),(18, 17, 256),(18, 19, 1),(18, 29, 256),(19, 18, 1),(20, 21, 1),(21, 20, 1),(21, 22, 256),(22, 21, 256),(23, 24, 1),(24, 23, 1),(24, 25, 256),(25, 24, 256),(26, 28, 256),(27, 28, 256),(28, 26, 256),(28, 27, 256),(29, 18, 256),(29, 30, 256),(29, 31, 256),(30, 29, 256),(31, 29, 256),(32, 5, 256),(33, 6, 256),(34, 7, 256),(34, 35, 1),(35, 34, 1),(36, 37, 1),(37, 36, 1),(39, 40, 1),(40, 39, 1),(42, 56, 256),(43, 57, 256),(44, 58, 256),(45, 59, 256),(46, 60, 256),(47, 61, 256),(48, 62, 256),(49, 63, 256),(53, 66, 256),(56, 42, 256),(56, 64, 256),(57, 43, 256),(58, 44, 256),(59, 45, 256),(60, 46, 256),(61, 47, 256),(62, 48, 256),(63, 49, 256),(64, 56, 256),(64, 65, 1),(64, 65, 1),(64, 70, 1),(65, 64, 1),(65, 64, 1),(65, 71, 1),(66, 13, 256),(66, 53, 256),(66, 67, 256),(67, 66, 256),(67, 68, 1),(68, 67, 1),(70, 64, 1),(70, 80, 256),(71, 65, 1),(71, 81, 256),(72, 13, 1),(72, 82, 256),(73, 14, 1),(73, 83, 256),(74, 80, 256),(75, 81, 256),(76, 82, 256),(77, 83, 256),(80, 70, 256),(80, 74, 256),(80, 85, 256),(81, 71, 256),(81, 75, 256),(82, 72, 256),(82, 76, 256),(83, 73, 256),(83, 77, 256),(83, 84, 256),(83, 89, 256),(84, 83, 256),(84, 88, 1),(85, 80, 256),(85, 86, 1),(86, 85, 1),(86, 87, 256),(87, 86, 256),(87, 88, 1),(88, 84, 1),(88, 87, 1),(89, 83, 256),(89, 90, 1),(90, 89, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
