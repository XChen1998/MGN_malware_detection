  %1 = alloca %struct.SshPgpCipherRec*, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  store %struct.SshPgpCipherRec* %cipher, %struct.SshPgpCipherRec** %1, align 8
  store i8* %dest, i8** %2, align 8
  store i8* %src, i8** %3, align 8
  store i64 %len, i64* %4, align 8
  %5 = load %struct.SshPgpCipherRec*, %struct.SshPgpCipherRec** %1, align 8
  %6 = getelementptr inbounds %struct.SshPgpCipherRec, %struct.SshPgpCipherRec* %5, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = icmp ne i32 %7, 0
  %11 = load %struct.SshPgpCipherRec*, %struct.SshPgpCipherRec** %1, align 8
  %12 = load i8*, i8** %2, align 8
  %13 = load i8*, i8** %3, align 8
  %14 = load i64, i64* %4, align 8
  call void @ssh_pgp_cipher_transform_cfb_encrypt(%struct.SshPgpCipherRec* %11, i8* %12, i8* %13, i64 %14)
  %130 = load i32, i32* %cr, align 4
  store i32 %130, i32* %1, align 4
  %133 = call i8* @ssh_xcalloc(i64 1, i64 56)
  %180 = load %struct.SshPgpCipherRec*, %struct.SshPgpCipherRec** %c, align 8
  %181 = getelementptr inbounds %struct.SshPgpCipherRec, %struct.SshPgpCipherRec* %180, i32 0, i32 6
  store i8* %178, i8** %181, align 8
  %182 = load %struct.SshPgpCipherRec*, %struct.SshPgpCipherRec** %c, align 8
  %183 = getelementptr inbounds %struct.SshPgpCipherRec, %struct.SshPgpCipherRec* %182, i32 0, i32 4
  store i64 0, i64* %183, align 8
  %184 = load %struct.SshPgpCipherRec*, %struct.SshPgpCipherRec** %c, align 8
  %185 = load %struct.SshPgpCipherRec**, %struct.SshPgpCipherRec*** %9, align 8
  store %struct.SshPgpCipherRec* %184, %struct.SshPgpCipherRec** %185, align 8
  store i32 0, i32* %1, align 4
  %188 = load i32, i32* %1, align 4
  %17 = load %struct.SshPgpCipherRec*, %struct.SshPgpCipherRec** %1, align 8
  %18 = load i8*, i8** %2, align 8
  %19 = load i8*, i8** %3, align 8
  %20 = load i64, i64* %4, align 8
  call void @ssh_pgp_cipher_transform_cfb_decrypt(%struct.SshPgpCipherRec* %17, i8* %18, i8* %19, i64 %20)
  %56 = load i8*, i8** %cipher_name, align 8
  %57 = call i32 @strcmp(i8* %56, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0)) #5
  %60 = icmp eq i32 %58, 0
  %126 = load i32, i32* %cr, align 4
  %127 = icmp ne i32 %126, 0
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.SshPgpCipherRec**, align 8
  %c = alloca %struct.SshPgpCipherRec*, align 8
  %cr = alloca i32, align 4
  %ecb_cipher = alloca %struct.SshCipherRec*, align 8
  %cipher_name = alloca i8*, align 8
  %key = alloca i8*, align 8
  %key_len = alloca i64, align 8
  store i32 %type, i32* %2, align 4
  store i8* %key_str, i8** %3, align 8
  store i32 %s2k_type, i32* %4, align 4
  store i32 %s2k_hash, i32* %5, align 4
  store i32 %s2k_count, i32* %6, align 4
  store i8* %s2k_salt, i8** %7, align 8
  store i32 %for_encryption, i32* %8, align 4
  store %struct.SshPgpCipherRec** %cipher, %struct.SshPgpCipherRec*** %9, align 8
  %10 = load i32, i32* %2, align 4
  %11 = call i8* @ssh_pgp_canonical_cipher_name(i32 %10)
  store i8* %12, i8** %cipher_name, align 8
  %14 = load i8*, i8** %cipher_name, align 8
  %15 = icmp eq i8* %14, null
  %53 = icmp eq i32 %51, 0
store %struct.SshPgpCipherRec* %10, %struct.SshPgpCipherRec** %cipher, align 8
store  i8* %11, i8** %dest, align 8
store  i8* %12, i8** %src, align 8
store  i64 %13, i64* %len, align 8
  %1 = alloca %struct.SshPgpCipherRec*, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %iv_cur = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.SshPgpCipherRec* %cipher, %struct.SshPgpCipherRec** %1, align 8
  store i8* %dest, i8** %2, align 8
  store i8* %src, i8** %3, align 8
  store i64 %len, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  %6 = load %struct.SshPgpCipherRec*, %struct.SshPgpCipherRec** %1, align 8
  %7 = getelementptr inbounds %struct.SshPgpCipherRec, %struct.SshPgpCipherRec* %6, i32 0, i32 4
  %8 = load i64, i64* %7, align 8
  %9 = icmp ule i64 %5, %8
  %25 = load i64, i64* %4, align 8
  %26 = icmp ne i64 %25, 0
