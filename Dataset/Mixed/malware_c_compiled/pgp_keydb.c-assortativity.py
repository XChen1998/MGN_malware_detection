#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 1, 1),(0, 1, 1),(1, 0, 1),(1, 0, 1),(2, 3, 256),(2, 16, 256),(3, 2, 256),(3, 4, 1),(4, 3, 1),(5, 6, 1),(6, 5, 1),(7, 8, 1),(8, 7, 1),(8, 9, 256),(9, 8, 256),(9, 11, 1),(10, 11, 1),(10, 56, 256),(11, 9, 1),(11, 10, 1),(12, 13, 256),(13, 12, 256),(13, 20, 256),(14, 15, 1),(15, 14, 1),(16, 2, 256),(16, 18, 256),(17, 18, 256),(18, 16, 256),(18, 17, 256),(18, 19, 1),(19, 18, 1),(20, 13, 256),(22, 29, 256),(23, 30, 256),(24, 31, 256),(25, 32, 256),(26, 35, 256),(28, 34, 1),(28, 57, 1),(29, 22, 256),(29, 33, 256),(30, 23, 256),(31, 24, 256),(32, 25, 256),(33, 29, 256),(34, 28, 1),(35, 26, 256),(35, 36, 1),(36, 35, 1),(36, 37, 256),(37, 36, 256),(37, 38, 1),(37, 38, 1),(38, 37, 1),(38, 37, 1),(40, 47, 256),(41, 48, 256),(42, 49, 256),(43, 50, 256),(44, 51, 256),(45, 52, 256),(47, 40, 256),(47, 53, 256),(48, 41, 256),(49, 42, 256),(50, 43, 256),(51, 44, 256),(52, 45, 256),(52, 56, 256),(53, 47, 256),(54, 55, 1),(55, 54, 1),(56, 10, 256),(56, 52, 256),(57, 28, 1),(57, 58, 1),(57, 58, 1),(58, 57, 1),(58, 57, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
