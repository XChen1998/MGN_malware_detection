#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 31, 256),(0, 35, 256),(12, 32, 256),(12, 36, 256),(15, 33, 256),(17, 37, 256),(19, 28, 256),(21, 30, 256),(24, 39, 256),(26, 50, 1),(27, 40, 1),(28, 19, 256),(28, 52, 256),(29, 30, 256),(30, 21, 256),(30, 29, 256),(30, 43, 256),(30, 47, 256),(31, 0, 256),(32, 12, 256),(33, 15, 256),(33, 34, 1),(33, 34, 1),(34, 33, 1),(34, 33, 1),(35, 0, 256),(36, 12, 256),(37, 17, 256),(37, 38, 1),(37, 38, 1),(38, 37, 1),(38, 37, 1),(39, 24, 256),(39, 41, 256),(40, 27, 1),(41, 39, 256),(41, 42, 1),(41, 42, 1),(42, 41, 1),(42, 41, 1),(43, 30, 256),(43, 44, 1),(44, 43, 1),(44, 45, 256),(45, 44, 256),(45, 46, 1),(46, 45, 1),(47, 30, 256),(47, 48, 1),(48, 47, 1),(48, 49, 256),(49, 48, 256),(50, 26, 1),(50, 51, 1),(50, 51, 1),(51, 50, 1),(51, 50, 1),(52, 28, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
