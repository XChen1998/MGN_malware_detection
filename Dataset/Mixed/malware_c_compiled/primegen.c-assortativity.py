#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 13, 1),(0, 59, 1),(1, 23, 256),(2, 25, 256),(8, 54, 256),(8, 62, 256),(8, 64, 256),(9, 10, 1),(10, 9, 1),(11, 12, 1),(12, 11, 1),(12, 13, 1),(13, 0, 1),(13, 12, 1),(13, 14, 256),(14, 13, 256),(14, 15, 1),(15, 14, 1),(15, 16, 256),(15, 17, 1),(16, 15, 256),(17, 15, 1),(18, 20, 256),(19, 21, 256),(20, 18, 256),(20, 22, 256),(21, 19, 256),(21, 24, 256),(22, 20, 256),(23, 1, 256),(24, 21, 256),(24, 25, 256),(24, 31, 256),(25, 2, 256),(25, 24, 256),(26, 28, 256),(27, 31, 256),(28, 26, 256),(28, 29, 256),(29, 28, 256),(29, 30, 1),(30, 29, 1),(31, 24, 256),(31, 27, 256),(31, 32, 1),(31, 33, 256),(32, 31, 1),(33, 31, 256),(34, 52, 256),(36, 53, 256),(37, 78, 256),(38, 80, 256),(44, 56, 256),(45, 81, 256),(49, 73, 256),(52, 34, 256),(52, 74, 256),(52, 85, 256),(53, 36, 256),(54, 8, 256),(54, 55, 1),(55, 54, 1),(56, 44, 256),(56, 57, 256),(56, 65, 256),(56, 67, 256),(57, 56, 256),(57, 58, 1),(58, 57, 1),(58, 59, 1),(59, 0, 1),(59, 58, 1),(59, 60, 256),(60, 59, 256),(60, 61, 1),(61, 60, 1),(61, 84, 256),(62, 8, 256),(62, 63, 1),(63, 62, 1),(63, 64, 256),(64, 8, 256),(64, 63, 256),(64, 68, 256),(65, 56, 256),(65, 66, 1),(66, 65, 1),(66, 67, 256),(67, 56, 256),(67, 66, 256),(68, 64, 256),(68, 69, 1),(69, 68, 1),(69, 70, 1),(70, 69, 1),(70, 71, 1),(70, 71, 1),(71, 70, 1),(71, 70, 1),(72, 73, 256),(73, 49, 256),(73, 72, 256),(74, 52, 256),(74, 75, 1),(75, 74, 1),(75, 76, 1),(76, 75, 1),(76, 77, 1),(77, 76, 1),(77, 78, 256),(78, 37, 256),(78, 77, 256),(78, 79, 1),(79, 78, 1),(80, 38, 256),(81, 45, 256),(81, 82, 1),(82, 81, 1),(82, 83, 1),(82, 83, 1),(83, 82, 1),(83, 82, 1),(84, 61, 256),(85, 52, 256),(85, 86, 1),(86, 85, 1),(86, 87, 256),(87, 86, 256),(87, 88, 1),(87, 88, 1),(88, 87, 1),(88, 87, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
