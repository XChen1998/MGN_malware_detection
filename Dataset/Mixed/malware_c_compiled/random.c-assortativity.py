#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 26, 256),(2, 38, 256),(3, 43, 256),(3, 48, 256),(4, 49, 256),(5, 61, 256),(22, 24, 256),(22, 59, 256),(22, 64, 256),(24, 22, 256),(26, 0, 256),(36, 37, 1),(36, 37, 1),(37, 36, 1),(37, 36, 1),(38, 2, 256),(39, 41, 256),(40, 44, 256),(41, 39, 256),(41, 42, 1),(41, 45, 256),(41, 47, 256),(42, 41, 1),(43, 3, 256),(43, 44, 256),(44, 40, 256),(44, 43, 256),(44, 51, 256),(45, 41, 256),(45, 46, 1),(46, 45, 1),(47, 41, 256),(47, 48, 256),(48, 3, 256),(48, 47, 256),(49, 4, 256),(49, 50, 1),(50, 49, 1),(51, 44, 256),(51, 52, 1),(52, 51, 1),(53, 56, 256),(54, 57, 256),(55, 58, 256),(56, 53, 256),(56, 65, 256),(57, 54, 256),(57, 66, 256),(58, 55, 256),(58, 67, 256),(59, 22, 256),(61, 5, 256),(61, 62, 1),(62, 61, 1),(64, 22, 256),(65, 56, 256),(66, 57, 256),(66, 68, 1),(67, 58, 256),(68, 66, 1),(69, 71, 1),(70, 71, 1),(71, 69, 1),(71, 70, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
