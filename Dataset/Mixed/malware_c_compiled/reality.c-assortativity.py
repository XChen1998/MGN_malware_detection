#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 25, 256),(0, 27, 256),(2, 28, 256),(2, 32, 256),(3, 43, 256),(3, 46, 256),(19, 22, 256),(20, 23, 256),(21, 24, 256),(22, 19, 256),(22, 33, 256),(23, 20, 256),(23, 34, 256),(24, 21, 256),(25, 0, 256),(25, 26, 1),(26, 25, 1),(27, 0, 256),(27, 30, 256),(27, 40, 256),(27, 42, 256),(28, 2, 256),(30, 27, 256),(30, 31, 1),(31, 30, 1),(32, 2, 256),(33, 22, 256),(34, 23, 256),(36, 38, 256),(37, 39, 256),(38, 36, 256),(38, 48, 256),(39, 37, 256),(39, 49, 256),(40, 27, 256),(40, 41, 1),(41, 40, 1),(42, 27, 256),(42, 55, 256),(43, 3, 256),(46, 3, 256),(46, 47, 256),(47, 46, 256),(48, 38, 256),(49, 39, 256),(51, 53, 256),(52, 54, 256),(53, 51, 256),(54, 52, 256),(55, 42, 256),(55, 56, 1),(56, 55, 1),(56, 57, 1),(57, 56, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
