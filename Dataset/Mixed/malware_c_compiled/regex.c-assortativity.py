#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 44, 256),(0, 46, 256),(2, 14, 1),(6, 7, 1),(7, 6, 1),(7, 8, 256),(8, 7, 256),(8, 9, 256),(9, 8, 256),(9, 10, 256),(9, 12, 256),(9, 18, 256),(9, 41, 256),(10, 9, 256),(10, 11, 1),(11, 10, 1),(12, 9, 256),(12, 13, 1),(13, 12, 1),(13, 14, 1),(14, 2, 1),(14, 13, 1),(14, 15, 256),(15, 14, 256),(15, 16, 1),(16, 15, 1),(16, 17, 1),(17, 16, 1),(18, 9, 256),(18, 19, 1),(19, 18, 1),(19, 21, 1),(20, 21, 1),(21, 19, 1),(21, 20, 1),(21, 22, 256),(22, 21, 256),(23, 24, 1),(24, 23, 1),(24, 25, 256),(24, 28, 256),(25, 24, 256),(25, 26, 1),(26, 25, 1),(26, 27, 1),(27, 26, 1),(27, 28, 256),(28, 24, 256),(28, 27, 256),(29, 30, 1),(30, 29, 1),(30, 31, 256),(31, 30, 256),(31, 32, 1),(32, 31, 1),(32, 34, 1),(33, 34, 1),(34, 32, 1),(34, 33, 1),(34, 35, 256),(35, 34, 256),(36, 37, 1),(37, 36, 1),(37, 38, 256),(38, 37, 256),(38, 39, 1),(39, 38, 1),(39, 40, 256),(40, 39, 256),(41, 9, 256),(42, 43, 256),(43, 42, 256),(43, 45, 256),(44, 0, 256),(45, 43, 256),(45, 46, 256),(46, 0, 256),(46, 45, 256),(47, 63, 256),(49, 63, 256),(50, 121, 256),(50, 123, 256),(50, 125, 256),(54, 64, 256),(55, 68, 256),(56, 72, 256),(57, 76, 256),(58, 78, 256),(59, 82, 256),(60, 83, 256),(61, 84, 256),(63, 47, 256),(63, 49, 256),(63, 65, 256),(63, 69, 256),(63, 73, 256),(64, 54, 256),(65, 63, 256),(65, 66, 1),(66, 65, 1),(66, 67, 256),(67, 66, 256),(67, 68, 256),(68, 55, 256),(68, 67, 256),(69, 63, 256),(69, 70, 1),(70, 69, 1),(70, 71, 256),(71, 70, 256),(71, 72, 256),(72, 56, 256),(72, 71, 256),(72, 77, 256),(72, 79, 256),(73, 63, 256),(73, 74, 1),(74, 73, 1),(74, 75, 256),(75, 74, 256),(75, 76, 256),(76, 57, 256),(76, 75, 256),(76, 80, 256),(77, 72, 256),(77, 78, 256),(78, 58, 256),(78, 77, 256),(78, 85, 256),(78, 87, 256),(79, 72, 256),(79, 81, 1),(80, 76, 256),(80, 81, 1),(81, 79, 1),(81, 80, 1),(81, 82, 256),(82, 59, 256),(82, 81, 256),(83, 60, 256),(84, 61, 256),(85, 78, 256),(85, 86, 1),(85, 88, 256),(86, 85, 1),(86, 87, 256),(87, 78, 256),(87, 86, 256),(88, 85, 256),(88, 89, 1),(89, 88, 1),(121, 50, 256),(121, 122, 1),(122, 121, 1),(123, 50, 256),(123, 124, 1),(124, 123, 1),(124, 125, 256),(125, 50, 256),(125, 124, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
