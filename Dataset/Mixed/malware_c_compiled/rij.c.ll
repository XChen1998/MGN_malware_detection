@aes_rcounter = global i32 0, align 4
@aes_rseed = common global [65535 x i8] zeroinitializer, align 16
@rij_enc.outp = internal global [4096 x i8] zeroinitializer, align 16
@rij_dec.outp = internal global [4096 x i8] zeroinitializer, align 16
  %41 = call i32 @rand() #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %56, i8* %57, i64 4, i32 1, i1 false)
  %rfd = alloca i32, align 4
  %x = alloca i32, align 4
  %1 = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i32 0)
  store i32 %2, i32* %rfd, align 4
  %4 = load i32, i32* %rfd, align 4
  %5 = icmp slt i32 %4, 0
  %8 = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0), i32 0)
  store i32 %9, i32* %rfd, align 4
  %13 = load i32, i32* %rfd, align 4
  %14 = icmp slt i32 %13, 0
  %17 = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i32 0, i32 0), i32 0)
  store i32 %18, i32* %rfd, align 4
  %22 = load i32, i32* %rfd, align 4
  %23 = icmp sge i32 %22, 0
  %26 = load i32, i32* %rfd, align 4
  %27 = call i64 @read(i32 %26, i8* getelementptr inbounds ([65535 x i8], [65535 x i8]* @aes_rseed, i32 0, i32 0), i64 65535)
  %30 = trunc i64 %28 to i32
  store i32 %30, i32* @aes_rcounter, align 4
  %31 = load i32, i32* %rfd, align 4
  %32 = call i32 @close(i32 %31)
  %37 = load i32, i32* @aes_rcounter, align 4
  %38 = icmp slt i32 %37, 65534
  %70 = load i32, i32* @aes_rcounter, align 4
  %71 = sext i32 %70 to i64
  %72 = add i64 4, %71
  %73 = icmp ugt i64 %72, 65534
  store i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @rij_enc.outp, i32 0, i32 0), i8** %1, align 8
