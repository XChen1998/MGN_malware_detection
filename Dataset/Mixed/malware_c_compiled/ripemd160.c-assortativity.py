#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(1, 2, 1),(1, 45, 1),(2, 1, 1),(3, 6, 256),(4, 7, 256),(5, 9, 1),(6, 3, 256),(6, 8, 256),(7, 4, 256),(7, 15, 256),(7, 23, 256),(7, 31, 256),(7, 39, 256),(8, 6, 256),(9, 5, 1),(9, 10, 1),(10, 9, 1),(11, 12, 1),(12, 11, 1),(12, 13, 256),(13, 12, 256),(13, 14, 1),(14, 13, 1),(14, 17, 256),(15, 7, 256),(15, 16, 1),(16, 15, 1),(16, 17, 256),(17, 14, 256),(17, 16, 256),(18, 19, 1),(19, 18, 1),(19, 20, 256),(20, 19, 256),(20, 21, 1),(21, 20, 1),(21, 22, 1),(22, 21, 1),(22, 25, 256),(23, 7, 256),(23, 24, 1),(24, 23, 1),(24, 25, 256),(25, 22, 256),(25, 24, 256),(26, 27, 1),(27, 26, 1),(27, 28, 256),(28, 27, 256),(28, 29, 1),(29, 28, 1),(29, 30, 1),(30, 29, 1),(30, 33, 256),(31, 7, 256),(31, 32, 1),(32, 31, 1),(32, 33, 256),(33, 30, 256),(33, 32, 256),(34, 35, 1),(35, 34, 1),(35, 36, 256),(36, 35, 256),(36, 37, 1),(37, 36, 1),(37, 38, 1),(38, 37, 1),(38, 41, 256),(39, 7, 256),(39, 40, 1),(40, 39, 1),(40, 41, 256),(41, 38, 256),(41, 40, 256),(42, 43, 1),(43, 42, 1),(43, 44, 1),(44, 43, 1),(45, 1, 1),(45, 50, 256),(45, 97, 1),(46, 51, 256),(46, 92, 256),(46, 138, 256),(47, 50, 256),(48, 51, 256),(49, 53, 1),(49, 56, 1),(50, 45, 256),(50, 47, 256),(50, 52, 256),(51, 46, 256),(51, 48, 256),(51, 55, 256),(51, 63, 256),(51, 68, 256),(51, 71, 256),(52, 50, 256),(52, 74, 256),(52, 76, 256),(53, 49, 1),(53, 54, 1),(54, 53, 1),(55, 51, 256),(56, 49, 1),(56, 57, 1),(57, 56, 1),(58, 59, 1),(59, 58, 1),(59, 62, 1),(60, 61, 1),(61, 60, 1),(61, 62, 1),(62, 59, 1),(62, 61, 1),(63, 51, 256),(64, 65, 1),(65, 64, 1),(65, 66, 1),(66, 65, 1),(67, 69, 1),(68, 51, 256),(68, 70, 1),(69, 67, 1),(69, 70, 1),(70, 68, 1),(70, 69, 1),(70, 71, 256),(71, 51, 256),(71, 70, 256),(72, 73, 1),(73, 72, 1),(73, 75, 1),(74, 52, 256),(74, 75, 1),(75, 73, 1),(75, 74, 1),(75, 76, 256),(76, 52, 256),(76, 75, 256),(77, 79, 1),(78, 79, 1),(79, 77, 1),(79, 78, 1),(79, 80, 256),(80, 79, 256),(80, 81, 256),(81, 80, 256),(81, 82, 1),(82, 81, 1),(84, 85, 1),(85, 84, 1),(85, 86, 1),(86, 85, 1),(86, 87, 1),(87, 86, 1),(88, 92, 256),(89, 93, 256),(90, 94, 256),(91, 95, 1),(92, 46, 256),(92, 88, 256),(93, 89, 256),(94, 90, 256),(95, 91, 1),(95, 96, 1),(95, 97, 1),(96, 95, 1),(97, 45, 1),(97, 95, 1),(97, 100, 256),(98, 100, 256),(99, 103, 256),(100, 97, 256),(100, 98, 256),(100, 101, 256),(101, 100, 256),(101, 102, 1),(101, 131, 256),(102, 101, 1),(102, 103, 256),(102, 127, 256),(102, 132, 256),(103, 99, 256),(103, 102, 256),(103, 104, 256),(103, 107, 256),(103, 110, 256),(103, 113, 256),(103, 116, 256),(103, 119, 256),(103, 123, 256),(103, 130, 1),(104, 103, 256),(104, 105, 1),(105, 104, 1),(105, 106, 256),(106, 105, 256),(107, 103, 256),(107, 108, 1),(108, 107, 1),(108, 109, 256),(109, 108, 256),(110, 103, 256),(110, 111, 1),(111, 110, 1),(111, 112, 256),(112, 111, 256),(113, 103, 256),(113, 114, 1),(114, 113, 1),(114, 115, 256),(115, 114, 256),(116, 103, 256),(116, 117, 1),(117, 116, 1),(117, 118, 256),(118, 117, 256),(119, 103, 256),(119, 120, 1),(120, 119, 1),(120, 121, 1),(121, 120, 1),(121, 122, 256),(122, 121, 256),(123, 103, 256),(123, 124, 1),(124, 123, 1),(124, 125, 1),(125, 124, 1),(125, 126, 256),(126, 125, 256),(127, 102, 256),(127, 128, 1),(128, 127, 1),(128, 129, 256),(129, 128, 256),(130, 103, 1),(131, 101, 256),(132, 102, 256),(132, 133, 1),(133, 132, 1),(134, 138, 256),(135, 139, 256),(136, 140, 256),(137, 141, 1),(138, 46, 256),(138, 134, 256),(139, 135, 256),(140, 136, 256),(141, 137, 1),(141, 142, 1),(142, 141, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
