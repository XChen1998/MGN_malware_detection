#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(56, 57, 1),(57, 56, 1),(58, 59, 1),(59, 58, 1),(60, 64, 1),(61, 62, 1),(62, 61, 1),(62, 63, 1),(63, 62, 1),(63, 64, 1),(64, 60, 1),(64, 63, 1),(65, 66, 1),(66, 65, 1),(66, 67, 1),(67, 66, 1),(67, 68, 256),(68, 67, 256),(68, 69, 1),(69, 68, 1),(69, 70, 1),(69, 70, 1),(70, 69, 1),(70, 69, 1),(71, 72, 1),(72, 71, 1),(72, 73, 256),(73, 72, 256),(74, 75, 1),(75, 74, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
