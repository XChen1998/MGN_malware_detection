#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(6, 7, 1),(7, 6, 1),(8, 9, 1),(9, 8, 1),(11, 18, 256),(12, 18, 256),(13, 29, 1),(13, 32, 1),(13, 48, 1),(13, 60, 1),(14, 21, 256),(15, 24, 256),(16, 27, 256),(17, 37, 256),(18, 11, 256),(18, 12, 256),(18, 19, 256),(18, 22, 256),(18, 25, 256),(18, 34, 256),(18, 40, 256),(19, 18, 256),(19, 20, 1),(19, 20, 1),(20, 19, 1),(20, 19, 1),(21, 14, 256),(21, 38, 256),(21, 47, 256),(21, 51, 256),(21, 57, 256),(22, 18, 256),(22, 23, 1),(22, 23, 1),(23, 22, 1),(23, 22, 1),(24, 15, 256),(24, 46, 256),(24, 50, 256),(24, 56, 256),(25, 18, 256),(25, 26, 1),(25, 26, 1),(26, 25, 1),(26, 25, 1),(27, 16, 256),(27, 49, 256),(27, 52, 256),(28, 30, 256),(29, 13, 1),(29, 30, 256),(30, 28, 256),(30, 29, 256),(31, 33, 256),(32, 13, 1),(32, 33, 256),(33, 31, 256),(33, 32, 256),(34, 18, 256),(34, 35, 1),(35, 34, 1),(35, 36, 1),(36, 35, 1),(37, 17, 256),(37, 39, 256),(37, 44, 256),(38, 21, 256),(39, 37, 256),(40, 18, 256),(40, 41, 1),(41, 40, 1),(41, 42, 1),(42, 41, 1),(42, 43, 1),(43, 42, 1),(44, 37, 256),(44, 45, 1),(45, 44, 1),(46, 24, 256),(47, 21, 256),(47, 48, 1),(48, 13, 1),(48, 47, 1),(49, 27, 256),(50, 24, 256),(51, 21, 256),(52, 27, 256),(52, 53, 1),(52, 53, 1),(53, 52, 1),(53, 52, 1),(54, 55, 1),(55, 54, 1),(56, 24, 256),(57, 21, 256),(58, 65, 256),(59, 66, 256),(60, 13, 1),(60, 67, 256),(61, 65, 256),(62, 66, 256),(63, 67, 256),(65, 58, 256),(65, 61, 256),(65, 68, 256),(66, 59, 256),(66, 62, 256),(66, 69, 256),(67, 60, 256),(67, 63, 256),(68, 65, 256),(68, 70, 1),(69, 66, 256),(69, 70, 1),(70, 68, 1),(70, 69, 1),(71, 72, 1),(72, 71, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
