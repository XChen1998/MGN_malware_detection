#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(2, 56, 256),(3, 58, 256),(7, 62, 256),(7, 66, 256),(15, 16, 1),(15, 16, 1),(16, 15, 1),(16, 15, 1),(18, 19, 1),(18, 19, 1),(19, 18, 1),(19, 18, 1),(20, 21, 1),(20, 27, 256),(20, 29, 256),(21, 20, 1),(24, 25, 1),(25, 24, 1),(25, 26, 256),(26, 25, 256),(27, 20, 256),(27, 28, 1),(28, 27, 1),(28, 29, 256),(29, 20, 256),(29, 28, 256),(30, 31, 1),(31, 30, 1),(31, 32, 256),(32, 31, 256),(33, 34, 1),(34, 33, 1),(34, 35, 1),(35, 34, 1),(35, 36, 256),(36, 35, 256),(36, 37, 1),(36, 37, 1),(37, 36, 1),(37, 36, 1),(39, 40, 1),(40, 39, 1),(40, 41, 1),(41, 40, 1),(42, 43, 1),(43, 42, 1),(44, 52, 256),(45, 59, 256),(45, 63, 256),(45, 65, 256),(46, 54, 256),(49, 55, 256),(50, 71, 256),(51, 72, 1),(52, 44, 256),(52, 76, 256),(53, 54, 256),(54, 46, 256),(54, 53, 256),(54, 60, 256),(54, 67, 256),(54, 70, 256),(55, 49, 256),(56, 2, 256),(56, 57, 1),(57, 56, 1),(58, 3, 256),(59, 45, 256),(60, 54, 256),(60, 61, 1),(61, 60, 1),(62, 7, 256),(62, 64, 1),(63, 45, 256),(63, 64, 1),(64, 62, 1),(64, 63, 1),(64, 65, 256),(65, 45, 256),(65, 64, 256),(66, 7, 256),(66, 68, 1),(67, 54, 256),(67, 69, 1),(68, 66, 1),(68, 69, 1),(69, 67, 1),(69, 68, 1),(69, 70, 256),(70, 54, 256),(70, 69, 256),(71, 50, 256),(71, 73, 1),(72, 51, 1),(72, 73, 1),(73, 71, 1),(73, 72, 1),(73, 74, 1),(74, 73, 1),(76, 52, 256),(76, 77, 1),(77, 76, 1),(77, 78, 256),(78, 77, 256),(78, 79, 1),(79, 78, 1),(79, 80, 1),(80, 79, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
