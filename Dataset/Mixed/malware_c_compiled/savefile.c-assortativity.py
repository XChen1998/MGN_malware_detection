#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(4, 5, 1),(5, 4, 1),(5, 6, 256),(5, 8, 1),(6, 5, 256),(7, 8, 1),(8, 5, 1),(8, 7, 1),(9, 10, 1),(10, 9, 1),(12, 20, 256),(13, 21, 256),(14, 22, 256),(15, 23, 256),(16, 28, 256),(17, 29, 256),(18, 30, 256),(20, 12, 256),(20, 24, 256),(20, 36, 256),(21, 13, 256),(22, 14, 256),(22, 34, 256),(23, 15, 256),(23, 35, 256),(24, 20, 256),(24, 25, 1),(25, 24, 1),(25, 26, 1),(26, 25, 1),(26, 27, 256),(27, 26, 256),(27, 28, 256),(28, 16, 256),(28, 27, 256),(29, 17, 256),(29, 31, 256),(30, 18, 256),(31, 29, 256),(31, 32, 1),(32, 31, 1),(34, 22, 256),(35, 23, 256),(36, 20, 256),(36, 37, 1),(37, 36, 1),(37, 38, 256),(38, 37, 256),(41, 42, 1),(42, 41, 1),(43, 44, 1),(44, 43, 1),(45, 46, 256),(46, 45, 256),(46, 47, 256),(46, 53, 256),(46, 63, 256),(46, 66, 256),(46, 72, 256),(46, 82, 256),(46, 85, 256),(46, 90, 256),(46, 96, 256),(46, 102, 256),(46, 108, 256),(46, 111, 256),(46, 116, 256),(46, 122, 256),(46, 128, 256),(46, 134, 256),(46, 137, 256),(46, 142, 256),(46, 148, 256),(46, 154, 256),(46, 160, 256),(46, 163, 256),(46, 168, 256),(46, 174, 256),(46, 180, 256),(46, 186, 256),(47, 46, 256),(47, 48, 1),(48, 47, 1),(48, 49, 256),(49, 48, 256),(49, 50, 1),(50, 49, 1),(50, 51, 1),(50, 199, 1),(51, 50, 1),(51, 52, 1),(52, 51, 1),(52, 61, 1),(53, 46, 256),(53, 54, 1),(54, 53, 1),(54, 55, 256),(55, 54, 256),(55, 56, 1),(56, 55, 1),(56, 57, 1),(57, 56, 1),(57, 58, 1),(58, 57, 1),(58, 59, 1),(59, 58, 1),(59, 60, 1),(60, 59, 1),(60, 61, 1),(61, 52, 1),(61, 60, 1),(61, 62, 1),(62, 61, 1),(62, 65, 256),(63, 46, 256),(63, 64, 1),(64, 63, 1),(64, 65, 256),(65, 62, 256),(65, 64, 256),(66, 46, 256),(66, 67, 1),(67, 66, 1),(67, 68, 256),(68, 67, 256),(68, 69, 1),(69, 68, 1),(69, 70, 1),(70, 69, 1),(70, 71, 1),(71, 70, 1),(71, 80, 1),(72, 46, 256),(72, 73, 1),(73, 72, 1),(73, 74, 256),(74, 73, 256),(74, 75, 1),(75, 74, 1),(75, 76, 1),(76, 75, 1),(76, 77, 1),(77, 76, 1),(77, 78, 1),(78, 77, 1),(78, 79, 1),(79, 78, 1),(79, 80, 1),(80, 71, 1),(80, 79, 1),(80, 81, 1),(81, 80, 1),(81, 84, 256),(82, 46, 256),(82, 83, 1),(83, 82, 1),(83, 84, 256),(84, 81, 256),(84, 83, 256),(85, 46, 256),(85, 86, 1),(86, 85, 1),(86, 87, 256),(87, 86, 256),(87, 88, 1),(88, 87, 1),(88, 89, 1),(89, 88, 1),(89, 95, 1),(90, 46, 256),(90, 91, 1),(91, 90, 1),(91, 92, 256),(92, 91, 256),(92, 93, 1),(93, 92, 1),(93, 94, 1),(94, 93, 1),(94, 95, 1),(95, 89, 1),(95, 94, 1),(95, 101, 1),(96, 46, 256),(96, 97, 1),(97, 96, 1),(97, 98, 256),(98, 97, 256),(98, 99, 1),(99, 98, 1),(99, 100, 1),(100, 99, 1),(100, 101, 1),(101, 95, 1),(101, 100, 1),(101, 107, 1),(102, 46, 256),(102, 103, 1),(103, 102, 1),(103, 104, 256),(104, 103, 256),(104, 105, 1),(105, 104, 1),(105, 106, 1),(106, 105, 1),(106, 107, 1),(106, 203, 1),(107, 101, 1),(107, 106, 1),(107, 110, 256),(108, 46, 256),(108, 109, 1),(109, 108, 1),(109, 110, 256),(110, 107, 256),(110, 109, 256),(111, 46, 256),(111, 112, 1),(112, 111, 1),(112, 113, 256),(113, 112, 256),(113, 114, 1),(114, 113, 1),(114, 115, 1),(115, 114, 1),(115, 121, 1),(116, 46, 256),(116, 117, 1),(117, 116, 1),(117, 118, 256),(118, 117, 256),(118, 119, 1),(119, 118, 1),(119, 120, 1),(120, 119, 1),(120, 121, 1),(121, 115, 1),(121, 120, 1),(121, 127, 1),(122, 46, 256),(122, 123, 1),(123, 122, 1),(123, 124, 256),(124, 123, 256),(124, 125, 1),(125, 124, 1),(125, 126, 1),(126, 125, 1),(126, 127, 1),(127, 121, 1),(127, 126, 1),(127, 133, 1),(128, 46, 256),(128, 129, 1),(129, 128, 1),(129, 130, 256),(130, 129, 256),(130, 131, 1),(131, 130, 1),(131, 132, 1),(132, 131, 1),(132, 133, 1),(133, 127, 1),(133, 132, 1),(133, 136, 256),(134, 46, 256),(134, 135, 1),(135, 134, 1),(135, 136, 256),(136, 133, 256),(136, 135, 256),(137, 46, 256),(137, 138, 1),(138, 137, 1),(138, 139, 256),(139, 138, 256),(139, 140, 1),(140, 139, 1),(140, 141, 1),(141, 140, 1),(141, 147, 1),(142, 46, 256),(142, 143, 1),(143, 142, 1),(143, 144, 256),(144, 143, 256),(144, 145, 1),(145, 144, 1),(145, 146, 1),(146, 145, 1),(146, 147, 1),(147, 141, 1),(147, 146, 1),(147, 153, 1),(148, 46, 256),(148, 149, 1),(149, 148, 1),(149, 150, 256),(150, 149, 256),(150, 151, 1),(151, 150, 1),(151, 152, 1),(152, 151, 1),(152, 153, 1),(153, 147, 1),(153, 152, 1),(153, 159, 1),(154, 46, 256),(154, 155, 1),(155, 154, 1),(155, 156, 256),(156, 155, 256),(156, 157, 1),(157, 156, 1),(157, 158, 1),(158, 157, 1),(158, 159, 1),(159, 153, 1),(159, 158, 1),(159, 162, 256),(160, 46, 256),(160, 161, 1),(161, 160, 1),(161, 162, 256),(162, 159, 256),(162, 161, 256),(163, 46, 256),(163, 164, 1),(164, 163, 1),(164, 165, 256),(165, 164, 256),(165, 166, 1),(166, 165, 1),(166, 167, 1),(167, 166, 1),(167, 173, 1),(168, 46, 256),(168, 169, 1),(169, 168, 1),(169, 170, 256),(170, 169, 256),(170, 171, 1),(171, 170, 1),(171, 172, 1),(172, 171, 1),(172, 173, 1),(173, 167, 1),(173, 172, 1),(173, 179, 1),(174, 46, 256),(174, 175, 1),(175, 174, 1),(175, 176, 256),(176, 175, 256),(176, 177, 1),(177, 176, 1),(177, 178, 1),(178, 177, 1),(178, 179, 1),(179, 173, 1),(179, 178, 1),(179, 185, 1),(180, 46, 256),(180, 181, 1),(181, 180, 1),(181, 182, 256),(182, 181, 256),(182, 183, 1),(183, 182, 1),(183, 184, 1),(184, 183, 1),(184, 185, 1),(185, 179, 1),(185, 184, 1),(185, 188, 256),(186, 46, 256),(186, 187, 1),(187, 186, 1),(187, 188, 256),(188, 185, 256),(188, 187, 256),(189, 207, 256),(190, 196, 256),(191, 197, 256),(192, 200, 256),(196, 190, 256),(197, 191, 256),(197, 198, 1),(198, 197, 1),(199, 50, 1),(199, 200, 256),(200, 192, 256),(200, 199, 256),(200, 201, 256),(200, 204, 256),(201, 200, 256),(201, 202, 1),(202, 201, 1),(202, 203, 1),(203, 106, 1),(203, 202, 1),(204, 200, 256),(204, 205, 1),(205, 204, 1),(205, 206, 1),(206, 205, 1),(207, 189, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
