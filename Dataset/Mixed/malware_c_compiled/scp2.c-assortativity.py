#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(4, 5, 1),(4, 5, 1),(5, 4, 1),(5, 4, 1),(6, 7, 256),(7, 6, 256),(8, 9, 256),(9, 8, 256),(9, 10, 1),(10, 9, 1),(10, 11, 256),(11, 10, 256),(12, 13, 256),(13, 12, 256),(13, 15, 256),(14, 15, 256),(15, 13, 256),(15, 14, 256),(16, 17, 1),(17, 16, 1),(17, 18, 256),(18, 17, 256),(19, 20, 1),(20, 19, 1),(21, 22, 256),(22, 21, 256),(22, 23, 1),(23, 22, 1),(24, 25, 1),(24, 25, 1),(25, 24, 1),(25, 24, 1),(25, 26, 1),(26, 25, 1),(27, 28, 1),(28, 27, 1),(30, 31, 1),(31, 30, 1),(33, 34, 256),(34, 33, 256),(34, 35, 1),(35, 34, 1),(35, 36, 256),(36, 35, 256),(37, 38, 256),(38, 37, 256),(38, 39, 1),(39, 38, 1),(39, 40, 256),(40, 39, 256),(40, 42, 256),(41, 42, 256),(42, 40, 256),(42, 41, 256),(43, 44, 256),(44, 43, 256),(44, 45, 1),(45, 44, 1),(45, 46, 256),(46, 45, 256),(47, 50, 256),(48, 51, 256),(49, 54, 256),(50, 47, 256),(50, 59, 256),(51, 48, 256),(51, 52, 256),(52, 51, 256),(52, 53, 1),(53, 52, 1),(53, 54, 256),(54, 49, 256),(54, 53, 256),(54, 55, 256),(55, 54, 256),(55, 56, 1),(56, 55, 1),(56, 57, 256),(57, 56, 256),(57, 58, 1),(58, 57, 1),(59, 50, 256),(59, 60, 1),(59, 60, 1),(60, 59, 1),(60, 59, 1),(61, 72, 256),(63, 74, 256),(72, 61, 256),(73, 74, 256),(74, 63, 256),(74, 73, 256),(76, 77, 1),(76, 77, 1),(77, 76, 1),(77, 76, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
