#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(1, 2, 1),(2, 1, 1),(2, 3, 1),(3, 2, 1),(3, 4, 256),(4, 3, 256),(4, 17, 256),(5, 6, 1),(6, 5, 1),(6, 7, 256),(7, 6, 256),(7, 18, 256),(7, 23, 256),(8, 9, 1),(9, 8, 1),(9, 10, 1),(10, 9, 1),(10, 12, 1),(11, 12, 1),(12, 10, 1),(12, 11, 1),(12, 13, 256),(13, 12, 256),(14, 15, 1),(15, 14, 1),(15, 16, 256),(15, 31, 1),(16, 15, 256),(17, 4, 256),(17, 28, 256),(17, 29, 256),(18, 7, 256),(18, 19, 1),(19, 18, 1),(19, 21, 1),(20, 21, 1),(21, 19, 1),(21, 20, 1),(21, 22, 256),(22, 21, 256),(22, 26, 1),(23, 7, 256),(23, 24, 1),(24, 23, 1),(24, 25, 1),(25, 24, 1),(25, 26, 1),(26, 22, 1),(26, 25, 1),(26, 27, 1),(27, 26, 1),(27, 30, 1),(28, 17, 256),(29, 17, 256),(30, 27, 1),(30, 39, 256),(30, 50, 1),(31, 15, 1),(31, 40, 256),(31, 51, 1),(32, 39, 256),(33, 40, 256),(34, 43, 256),(39, 30, 256),(39, 32, 256),(40, 31, 256),(40, 33, 256),(40, 41, 256),(41, 40, 256),(41, 42, 1),(42, 41, 1),(42, 43, 256),(42, 50, 1),(43, 34, 256),(43, 42, 256),(43, 44, 256),(44, 43, 256),(44, 45, 1),(45, 44, 1),(45, 46, 1),(45, 46, 1),(46, 45, 1),(46, 45, 1),(46, 51, 1),(47, 48, 1),(48, 47, 1),(48, 49, 256),(49, 48, 256),(50, 30, 1),(50, 42, 1),(50, 56, 256),(51, 31, 1),(51, 46, 1),(51, 57, 256),(53, 56, 256),(54, 57, 256),(55, 62, 256),(56, 50, 256),(56, 53, 256),(57, 51, 256),(57, 54, 256),(57, 58, 256),(58, 57, 256),(58, 59, 1),(59, 58, 1),(59, 60, 1),(60, 59, 1),(60, 61, 1),(60, 63, 1),(61, 60, 1),(61, 62, 256),(62, 55, 256),(62, 61, 256),(62, 79, 256),(62, 81, 256),(63, 60, 1),(63, 68, 256),(64, 76, 256),(65, 68, 256),(66, 77, 256),(68, 63, 256),(68, 65, 256),(68, 69, 256),(69, 68, 256),(76, 64, 256),(76, 78, 256),(77, 66, 256),(77, 78, 256),(78, 76, 256),(78, 77, 256),(78, 84, 256),(79, 62, 256),(79, 80, 1),(80, 79, 1),(81, 62, 256),(81, 82, 1),(82, 81, 1),(82, 83, 1),(83, 82, 1),(83, 84, 256),(84, 78, 256),(84, 83, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
