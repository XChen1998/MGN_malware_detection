@signals = internal global [33 x %struct.SIGNAME] [%struct.SIGNAME { i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0) }, %struct.SIGNAME { i32 2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0) }, %struct.SIGNAME { i32 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0) }, %struct.SIGNAME { i32 4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0) }, %struct.SIGNAME { i32 5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0) }, %struct.SIGNAME { i32 6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0) }, %struct.SIGNAME { i32 6, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0) }, %struct.SIGNAME { i32 7, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0) }, %struct.SIGNAME { i32 8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0) }, %struct.SIGNAME { i32 9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0) }, %struct.SIGNAME { i32 10, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0) }, %struct.SIGNAME { i32 11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0) }, %struct.SIGNAME { i32 12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0) }, %struct.SIGNAME { i32 13, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0) }, %struct.SIGNAME { i32 14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0) }, %struct.SIGNAME { i32 15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0) }, %struct.SIGNAME { i32 16, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0) }, %struct.SIGNAME { i32 17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0) }, %struct.SIGNAME { i32 18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0) }, %struct.SIGNAME { i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0) }, %struct.SIGNAME { i32 20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i32 0, i32 0) }, %struct.SIGNAME { i32 21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0) }, %struct.SIGNAME { i32 22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i32 0, i32 0) }, %struct.SIGNAME { i32 23, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i32 0, i32 0) }, %struct.SIGNAME { i32 24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i32 0, i32 0) }, %struct.SIGNAME { i32 25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i32 0, i32 0) }, %struct.SIGNAME { i32 26, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i32 0, i32 0) }, %struct.SIGNAME { i32 27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i32 0, i32 0) }, %struct.SIGNAME { i32 28, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.32, i32 0, i32 0) }, %struct.SIGNAME { i32 29, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i32 0, i32 0) }, %struct.SIGNAME { i32 30, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.34, i32 0, i32 0) }, %struct.SIGNAME { i32 31, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.35, i32 0, i32 0) }, %struct.SIGNAME zeroinitializer], align 16
@stderr = external global %struct._IO_FILE*, align 8
  %19 = load i8*, i8** %2, align 8
  %20 = call i32 @atoi(i8* %19) #7
  store i32 %21, i32* %1, align 4
  %walk = alloca %struct.SIGNAME*, align 8
  %col = alloca i32, align 4
  store i32 0, i32* %col, align 4
  store %struct.SIGNAME* getelementptr inbounds ([33 x %struct.SIGNAME], [33 x %struct.SIGNAME]* @signals, i32 0, i32 0), %struct.SIGNAME** %walk, align 8
  %3 = load %struct.SIGNAME*, %struct.SIGNAME** %walk, align 8
  %4 = getelementptr inbounds %struct.SIGNAME, %struct.SIGNAME* %3, i32 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ne i8* %5, null
  %11 = load i16*, i16** %9, align 8
  %12 = getelementptr inbounds i16, i16* %11, i64 %8
  %13 = load i16, i16* %12, align 2
  %14 = zext i16 %13 to i32
  %15 = and i32 %14, 2048
  %16 = icmp ne i32 %15, 0
