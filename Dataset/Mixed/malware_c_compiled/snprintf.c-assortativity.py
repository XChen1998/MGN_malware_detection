#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 1, 1),(1, 0, 1),(1, 5, 1),(2, 3, 256),(3, 2, 256),(3, 4, 1),(4, 3, 1),(4, 5, 1),(5, 1, 1),(5, 4, 1),(5, 6, 1),(6, 5, 1),(6, 7, 256),(7, 6, 256),(7, 20, 256),(8, 9, 1),(9, 8, 1),(9, 10, 256),(10, 9, 256),(10, 15, 256),(10, 17, 256),(12, 14, 256),(13, 14, 256),(14, 12, 256),(14, 13, 256),(15, 10, 256),(15, 16, 1),(16, 15, 1),(16, 17, 256),(17, 10, 256),(17, 16, 256),(17, 27, 256),(17, 29, 256),(18, 19, 1),(19, 18, 1),(20, 7, 256),(20, 22, 256),(21, 22, 256),(22, 20, 256),(22, 21, 256),(23, 24, 256),(23, 26, 256),(24, 23, 256),(24, 25, 1),(25, 24, 1),(25, 26, 256),(26, 23, 256),(26, 25, 256),(27, 17, 256),(27, 28, 1),(28, 27, 1),(28, 29, 256),(29, 17, 256),(29, 28, 256),(29, 35, 256),(30, 31, 256),(30, 34, 256),(31, 30, 256),(31, 32, 1),(32, 31, 1),(34, 30, 256),(35, 29, 256),(35, 36, 256),(36, 35, 256),(36, 37, 1),(37, 36, 1),(37, 38, 1),(38, 37, 1),(39, 55, 256),(40, 56, 256),(41, 57, 256),(42, 58, 256),(43, 59, 256),(46, 55, 256),(47, 56, 256),(48, 57, 256),(49, 58, 256),(50, 59, 256),(51, 60, 256),(54, 62, 256),(55, 39, 256),(55, 46, 256),(55, 61, 256),(55, 71, 256),(55, 75, 256),(55, 77, 256),(56, 40, 256),(56, 47, 256),(56, 63, 256),(56, 78, 256),(57, 41, 256),(57, 48, 256),(57, 65, 256),(58, 42, 256),(58, 49, 256),(58, 67, 256),(59, 43, 256),(59, 50, 256),(59, 69, 256),(60, 51, 256),(60, 82, 256),(61, 55, 256),(61, 62, 256),(62, 54, 256),(62, 61, 256),(63, 56, 256),(63, 64, 256),(64, 63, 256),(65, 57, 256),(65, 66, 256),(66, 65, 256),(67, 58, 256),(67, 68, 256),(68, 67, 256),(69, 59, 256),(69, 70, 256),(70, 69, 256),(71, 55, 256),(71, 72, 256),(72, 71, 256),(72, 73, 1),(73, 72, 1),(73, 74, 1),(74, 73, 1),(75, 55, 256),(75, 76, 1),(76, 75, 1),(76, 77, 256),(77, 55, 256),(77, 76, 256),(78, 56, 256),(78, 79, 256),(78, 81, 256),(79, 78, 256),(79, 80, 1),(80, 79, 1),(80, 81, 256),(81, 78, 256),(81, 80, 256),(82, 60, 256),(82, 83, 1),(83, 82, 1),(83, 84, 1),(83, 87, 1),(84, 83, 1),(84, 85, 256),(85, 84, 256),(85, 86, 1),(86, 85, 1),(87, 83, 1),(87, 88, 256),(87, 91, 256),(88, 87, 256),(88, 89, 1),(89, 88, 1),(91, 87, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
