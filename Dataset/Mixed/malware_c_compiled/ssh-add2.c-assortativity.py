#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 79, 256),(7, 83, 256),(8, 75, 256),(9, 26, 256),(10, 81, 256),(18, 19, 1),(18, 19, 1),(19, 18, 1),(19, 18, 1),(19, 20, 1),(20, 19, 1),(22, 23, 1),(23, 22, 1),(24, 28, 256),(24, 33, 256),(25, 40, 256),(25, 42, 256),(26, 9, 256),(28, 24, 256),(28, 29, 1),(29, 28, 1),(33, 24, 256),(33, 34, 1),(34, 33, 1),(35, 36, 1),(35, 36, 1),(36, 35, 1),(36, 35, 1),(38, 39, 1),(39, 38, 1),(40, 25, 256),(40, 41, 1),(41, 40, 1),(41, 42, 256),(42, 25, 256),(42, 41, 256),(42, 43, 256),(43, 42, 256),(43, 44, 1),(44, 43, 1),(45, 72, 256),(46, 73, 256),(47, 72, 256),(48, 73, 256),(51, 74, 256),(72, 45, 256),(72, 47, 256),(73, 46, 256),(73, 48, 256),(73, 77, 256),(74, 51, 256),(75, 8, 256),(75, 76, 1),(76, 75, 1),(77, 73, 256),(77, 78, 1),(78, 77, 1),(79, 0, 256),(79, 80, 1),(80, 79, 1),(81, 10, 256),(81, 82, 1),(82, 81, 1),(83, 7, 256),(83, 84, 1),(84, 83, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
