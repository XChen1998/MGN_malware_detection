#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(3, 14, 256),(4, 15, 256),(5, 26, 256),(6, 14, 256),(7, 15, 256),(12, 36, 256),(12, 38, 256),(14, 3, 256),(14, 6, 256),(14, 16, 256),(14, 18, 256),(15, 4, 256),(15, 7, 256),(16, 14, 256),(16, 17, 1),(17, 16, 1),(18, 14, 256),(18, 19, 256),(19, 18, 256),(19, 20, 1),(20, 19, 1),(20, 21, 1),(21, 20, 1),(22, 23, 1),(23, 22, 1),(23, 24, 1),(24, 23, 1),(26, 5, 256),(27, 32, 256),(28, 33, 256),(29, 35, 1),(32, 27, 256),(33, 28, 256),(33, 34, 256),(34, 33, 256),(34, 35, 1),(34, 47, 1),(35, 29, 1),(35, 34, 1),(36, 12, 256),(36, 37, 1),(36, 40, 1),(37, 36, 1),(37, 38, 256),(38, 12, 256),(38, 37, 256),(39, 40, 1),(40, 36, 1),(40, 39, 1),(40, 41, 256),(41, 40, 256),(42, 43, 256),(43, 42, 256),(43, 44, 256),(43, 46, 256),(44, 43, 256),(44, 45, 1),(45, 44, 1),(45, 46, 256),(46, 43, 256),(46, 45, 256),(47, 34, 1),(47, 53, 256),(48, 54, 256),(50, 53, 256),(51, 54, 256),(52, 55, 1),(52, 63, 1),(53, 47, 256),(53, 50, 256),(53, 59, 256),(53, 65, 256),(54, 48, 256),(54, 51, 256),(54, 62, 256),(55, 52, 1),(55, 56, 1),(55, 67, 256),(56, 55, 1),(56, 57, 1),(57, 56, 1),(59, 53, 256),(59, 60, 1),(60, 59, 1),(60, 61, 256),(61, 60, 256),(62, 54, 256),(63, 52, 1),(63, 64, 1),(64, 63, 1),(65, 53, 256),(65, 66, 256),(66, 65, 256),(67, 55, 256),(67, 68, 256),(68, 67, 256),(68, 69, 1),(69, 68, 1),(69, 70, 1),(70, 69, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
