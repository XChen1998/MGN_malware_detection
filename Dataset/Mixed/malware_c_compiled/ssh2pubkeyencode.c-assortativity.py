#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(1, 2, 1),(2, 1, 1),(4, 5, 1),(5, 4, 1),(6, 32, 256),(7, 17, 256),(8, 18, 256),(10, 48, 256),(13, 25, 1),(13, 30, 1),(14, 27, 1),(14, 36, 1),(16, 20, 256),(17, 7, 256),(17, 22, 256),(18, 8, 256),(18, 23, 256),(20, 16, 256),(20, 21, 256),(20, 29, 256),(20, 35, 256),(21, 20, 256),(22, 17, 256),(23, 18, 256),(23, 24, 1),(24, 23, 1),(25, 13, 1),(25, 26, 1),(26, 25, 1),(27, 14, 1),(27, 28, 1),(28, 27, 1),(29, 20, 256),(30, 13, 1),(30, 31, 1),(31, 30, 1),(32, 6, 256),(32, 34, 256),(34, 32, 256),(35, 20, 256),(36, 14, 1),(36, 37, 1),(37, 36, 1),(39, 48, 256),(40, 49, 256),(41, 55, 1),(42, 56, 1),(42, 60, 1),(43, 57, 1),(44, 58, 1),(47, 52, 256),(48, 10, 256),(48, 39, 256),(48, 50, 256),(49, 40, 256),(50, 48, 256),(50, 51, 1),(50, 51, 1),(51, 50, 1),(51, 50, 1),(52, 47, 256),(53, 54, 1),(54, 53, 1),(55, 41, 1),(56, 42, 1),(57, 43, 1),(58, 44, 1),(58, 59, 1),(59, 58, 1),(60, 42, 1),(60, 61, 1),(61, 60, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
