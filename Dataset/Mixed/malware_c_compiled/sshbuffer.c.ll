  %16 = load i64, i64* %2, align 8
  %17 = load %struct.SshBuffer*, %struct.SshBuffer** %1, align 8
  %18 = getelementptr inbounds %struct.SshBuffer, %struct.SshBuffer* %17, i32 0, i32 2
  %19 = load i64, i64* %18, align 8
  %20 = add i64 %19, %16
  store i64 %20, i64* %18, align 8
  %1 = alloca %struct.SshBuffer*, align 8
  %2 = alloca i64, align 8
  store %struct.SshBuffer* %buffer, %struct.SshBuffer** %1, align 8
  store i64 %bytes, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = load %struct.SshBuffer*, %struct.SshBuffer** %1, align 8
  %5 = getelementptr inbounds %struct.SshBuffer, %struct.SshBuffer* %4, i32 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.SshBuffer*, %struct.SshBuffer** %1, align 8
  %8 = getelementptr inbounds %struct.SshBuffer, %struct.SshBuffer* %7, i32 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = icmp ugt i64 %3, %10
  %30 = load %struct.SshBuffer*, %struct.SshBuffer** %1, align 8
  %31 = load i8*, i8** %str, align 8
  %32 = load i8*, i8** %str, align 8
  %33 = call i64 @strlen(i8* %32) #6
  call void @ssh_buffer_append(%struct.SshBuffer* %30, i8* %31, i64 %34)
  %1 = alloca %struct.SshBuffer*, align 8
  %2 = alloca i64, align 8
  store %struct.SshBuffer* %buffer, %struct.SshBuffer** %1, align 8
  store i64 %bytes, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = load %struct.SshBuffer*, %struct.SshBuffer** %1, align 8
  %5 = getelementptr inbounds %struct.SshBuffer, %struct.SshBuffer* %4, i32 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.SshBuffer*, %struct.SshBuffer** %1, align 8
  %8 = getelementptr inbounds %struct.SshBuffer, %struct.SshBuffer* %7, i32 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = icmp ugt i64 %3, %10
  call void (i8*, ...) @ssh_fatal(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.2, i32 0, i32 0))
  call void (i8*, ...) @ssh_fatal(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.2, i32 0, i32 0))
  %8 = load i64, i64* %3, align 8
  %9 = icmp ugt i64 %8, 0
  %12 = load i8*, i8** %cp, align 8
  %13 = load i8*, i8** %2, align 8
  %14 = load i64, i64* %3, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 %14, i32 1, i1 false)
  %25 = phi i8** [ %15, %11 ], [ %22, %18 ]
  %26 = load i8*, i8** %25, align 8
  store i8* %26, i8** %str, align 8
  %27 = icmp ne i8* %26, null
  %16 = load i64, i64* %2, align 8
  %17 = load %struct.SshBuffer*, %struct.SshBuffer** %1, align 8
  %18 = getelementptr inbounds %struct.SshBuffer, %struct.SshBuffer* %17, i32 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %16
  store i64 %20, i64* %18, align 8
  %buffer = alloca %struct.SshBuffer*, align 8
  %1 = call i8* @ssh_xmalloc(i64 40)
  %4 = bitcast i8* %2 to %struct.SshBuffer*
  store %struct.SshBuffer* %4, %struct.SshBuffer** %buffer, align 8
  %5 = load %struct.SshBuffer*, %struct.SshBuffer** %buffer, align 8
  call void @ssh_buffer_init(%struct.SshBuffer* %5)
store %struct.SshBuffer* %25, %struct.SshBuffer** %buffer, align 8
store  i8* %26, i8** %data, align 8
store  i64 %28, i64* %len, align 8
  %1 = alloca %struct.SshBuffer*, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %cp = alloca i8*, align 8
  store %struct.SshBuffer* %buffer, %struct.SshBuffer** %1, align 8
  store i8* %data, i8** %2, align 8
  store i64 %len, i64* %3, align 8
  %4 = load %struct.SshBuffer*, %struct.SshBuffer** %1, align 8
  %5 = load i64, i64* %3, align 8
  call void @ssh_buffer_append_space(%struct.SshBuffer* %4, i8** %cp, i64 %5)
  %1 = alloca %struct.SshBuffer*, align 8
  store %struct.SshBuffer* %buffer, %struct.SshBuffer** %1, align 8
  %2 = load %struct.SshBuffer*, %struct.SshBuffer** %1, align 8
  %3 = getelementptr inbounds %struct.SshBuffer, %struct.SshBuffer* %2, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = load %struct.SshBuffer*, %struct.SshBuffer** %1, align 8
  %6 = getelementptr inbounds %struct.SshBuffer, %struct.SshBuffer* %5, i32 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds i8, i8* %4, i64 %7
