#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(-1, 0, 1),(0, -1, 1),(1, 2, 1),(2, 1, 1),(2, 3, 256),(3, 2, 256),(5, 6, 1),(6, 5, 1),(6, 7, 256),(7, 6, 256),(7, 8, 1),(8, 7, 1),(9, 10, 1),(10, 9, 1),(10, 11, 256),(11, 10, 256),(12, 13, 1),(13, 12, 1),(14, 15, 1),(15, 14, 1),(15, 16, 1),(16, 15, 1),(16, 19, 256),(17, 18, 1),(18, 17, 1),(18, 19, 256),(19, 16, 256),(19, 18, 256),(19, 20, 1),(20, 19, 1),(21, 22, 1),(22, 21, 1),(23, 24, 1),(24, 23, 1),(24, 25, 1),(25, 24, 1),(26, 29, 256),(27, 30, 256),(28, 33, 256),(29, 26, 256),(30, 27, 256),(30, 31, 256),(31, 30, 256),(31, 32, 1),(31, 39, 1),(32, 31, 1),(32, 33, 256),(33, 28, 256),(33, 32, 256),(33, 37, 256),(35, 37, 256),(36, 40, 256),(37, 33, 256),(37, 35, 256),(37, 38, 1),(37, 41, 256),(38, 37, 1),(39, 31, 1),(39, 40, 256),(40, 36, 256),(40, 39, 256),(40, 42, 256),(40, 45, 256),(41, 37, 256),(41, 44, 256),(42, 40, 256),(42, 43, 1),(43, 42, 1),(43, 44, 256),(44, 41, 256),(44, 43, 256),(45, 40, 256),(45, 46, 1),(46, 45, 1),(47, 49, 256),(48, 52, 256),(49, 47, 256),(49, 50, 256),(50, 49, 256),(50, 51, 1),(51, 50, 1),(51, 52, 256),(52, 48, 256),(52, 51, 256),(52, 53, 256),(53, 52, 256),(53, 54, 1),(54, 53, 1),(55, 65, 256),(56, 66, 256),(57, 67, 256),(58, 68, 256),(59, 69, 256),(60, 70, 256),(61, 71, 256),(62, 74, 256),(65, 55, 256),(66, 56, 256),(67, 57, 256),(68, 58, 256),(69, 59, 256),(70, 60, 256),(71, 61, 256),(71, 72, 256),(72, 71, 256),(72, 73, 1),(73, 72, 1),(73, 74, 256),(74, 62, 256),(74, 73, 256),(74, 75, 256),(75, 74, 256),(75, 76, 1),(75, 76, 1),(76, 75, 1),(76, 75, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
