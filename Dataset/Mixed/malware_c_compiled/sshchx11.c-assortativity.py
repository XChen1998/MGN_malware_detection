#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 1, 256),(0, 14, 256),(1, 0, 256),(1, 2, 1),(2, 1, 1),(3, 4, 256),(3, 7, 256),(4, 3, 256),(4, 5, 1),(5, 4, 1),(7, 3, 256),(7, 8, 1),(7, 8, 1),(8, 7, 1),(8, 7, 1),(9, 10, 1),(10, 9, 1),(11, 12, 1),(12, 11, 1),(13, 17, 1),(14, 0, 256),(14, 15, 1),(15, 14, 1),(15, 16, 1),(16, 15, 1),(16, 17, 1),(17, 13, 1),(17, 16, 1),(18, 19, 1),(19, 18, 1),(19, 20, 256),(20, 19, 256),(20, 21, 1),(20, 21, 1),(21, 20, 1),(21, 20, 1),(22, 37, 256),(23, 38, 256),(24, 44, 1),(25, 64, 1),(27, 39, 256),(32, 61, 256),(32, 63, 256),(36, 42, 256),(37, 22, 256),(37, 40, 256),(38, 23, 256),(39, 27, 256),(40, 37, 256),(40, 41, 1),(40, 41, 1),(41, 40, 1),(41, 40, 1),(42, 36, 256),(42, 43, 1),(43, 42, 1),(44, 24, 1),(44, 45, 1),(45, 44, 1),(45, 46, 1),(46, 45, 1),(47, 48, 256),(48, 47, 256),(48, 49, 1),(49, 48, 1),(50, 52, 256),(51, 55, 256),(52, 50, 256),(52, 53, 256),(53, 52, 256),(53, 54, 1),(54, 53, 1),(54, 55, 256),(55, 51, 256),(55, 54, 256),(55, 56, 256),(56, 55, 256),(56, 57, 1),(56, 60, 1),(57, 56, 1),(57, 58, 256),(58, 57, 256),(58, 59, 1),(59, 58, 1),(60, 56, 1),(61, 32, 256),(61, 62, 1),(62, 61, 1),(62, 63, 256),(63, 32, 256),(63, 62, 256),(64, 25, 1),(64, 65, 1),(64, 65, 1),(65, 64, 1),(65, 64, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
