#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 1, 256),(1, 0, 256),(1, 3, 256),(1, 11, 256),(2, 4, 1),(3, 1, 256),(3, 4, 1),(4, 2, 1),(4, 3, 1),(4, 5, 1),(5, 4, 1),(5, 6, 1),(6, 5, 1),(6, 7, 1),(6, 7, 1),(7, 6, 1),(7, 6, 1),(8, 9, 256),(9, 8, 256),(10, 12, 1),(11, 1, 256),(11, 12, 1),(12, 10, 1),(12, 11, 1),(12, 13, 1),(13, 12, 1),(13, 14, 1),(14, 13, 1),(15, 16, 256),(16, 15, 256),(17, 18, 1),(17, 18, 1),(18, 17, 1),(18, 17, 1),(20, 25, 256),(21, 26, 256),(22, 45, 256),(24, 34, 256),(25, 20, 256),(25, 27, 256),(25, 30, 256),(25, 37, 256),(25, 42, 256),(26, 21, 256),(26, 35, 256),(27, 25, 256),(27, 28, 256),(28, 27, 256),(28, 29, 1),(29, 28, 1),(30, 25, 256),(30, 31, 256),(31, 30, 256),(31, 32, 1),(31, 32, 1),(32, 31, 1),(32, 31, 1),(33, 34, 256),(34, 24, 256),(34, 33, 256),(35, 26, 256),(35, 36, 1),(35, 36, 1),(36, 35, 1),(36, 35, 1),(37, 25, 256),(37, 38, 256),(38, 37, 256),(38, 39, 1),(39, 38, 1),(40, 41, 1),(40, 41, 1),(41, 40, 1),(41, 40, 1),(42, 25, 256),(42, 46, 256),(43, 44, 1),(43, 44, 1),(44, 43, 1),(44, 43, 1),(45, 22, 256),(45, 47, 256),(46, 42, 256),(46, 47, 256),(47, 45, 256),(47, 46, 256),(48, 54, 256),(49, 55, 256),(51, 54, 256),(52, 55, 256),(53, 57, 256),(54, 48, 256),(54, 51, 256),(54, 56, 256),(55, 49, 256),(55, 52, 256),(56, 54, 256),(56, 57, 256),(57, 53, 256),(57, 56, 256),(57, 58, 256),(57, 63, 256),(58, 57, 256),(58, 59, 1),(58, 59, 1),(58, 62, 256),(59, 58, 1),(59, 58, 1),(62, 58, 256),(63, 57, 256),(63, 64, 1),(63, 64, 1),(64, 63, 1),(64, 63, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
