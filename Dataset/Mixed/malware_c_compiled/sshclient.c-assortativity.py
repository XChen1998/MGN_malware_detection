#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(2, 9, 256),(2, 33, 256),(5, 6, 1),(6, 5, 1),(6, 7, 256),(7, 6, 256),(7, 8, 1),(7, 8, 1),(8, 7, 1),(8, 7, 1),(9, 2, 256),(9, 10, 1),(9, 10, 1),(10, 9, 1),(10, 9, 1),(11, 12, 1),(12, 11, 1),(12, 14, 1),(13, 14, 1),(14, 12, 1),(14, 13, 1),(14, 15, 256),(15, 14, 256),(15, 16, 1),(16, 15, 1),(16, 17, 1),(17, 16, 1),(18, 19, 1),(19, 18, 1),(19, 21, 1),(20, 21, 1),(21, 19, 1),(21, 20, 1),(21, 22, 256),(22, 21, 256),(22, 28, 256),(23, 24, 1),(23, 26, 1),(24, 23, 1),(24, 25, 256),(25, 24, 256),(26, 23, 1),(26, 27, 1),(27, 26, 1),(27, 28, 256),(28, 22, 256),(28, 27, 256),(30, 31, 256),(31, 30, 256),(31, 32, 1),(32, 31, 1),(33, 2, 256),(33, 34, 1),(34, 33, 1),(35, 36, 1),(36, 35, 1),(38, 39, 1),(39, 38, 1),(39, 41, 1),(40, 41, 1),(41, 39, 1),(41, 40, 1),(41, 42, 256),(42, 41, 256),(42, 43, 1),(43, 42, 1),(43, 44, 1),(44, 43, 1),(45, 46, 1),(46, 45, 1),(46, 47, 256),(47, 46, 256),(51, 52, 1),(52, 51, 1),(53, 71, 256),(54, 72, 256),(55, 73, 256),(56, 74, 256),(57, 75, 256),(58, 76, 256),(60, 80, 256),(61, 79, 1),(61, 83, 1),(71, 53, 256),(72, 54, 256),(73, 55, 256),(74, 56, 256),(75, 57, 256),(76, 58, 256),(76, 77, 256),(77, 76, 256),(77, 78, 1),(78, 77, 1),(79, 61, 1),(80, 60, 256),(80, 81, 1),(80, 81, 1),(81, 80, 1),(81, 80, 1),(83, 61, 1),(83, 84, 1),(83, 84, 1),(84, 83, 1),(84, 83, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
