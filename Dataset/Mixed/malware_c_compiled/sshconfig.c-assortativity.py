#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(1, 2, 1),(2, 1, 1),(2, 3, 256),(3, 2, 256),(3, 4, 1),(4, 3, 1),(4, 5, 1),(5, 4, 1),(5, 6, 1),(6, 5, 1),(7, 8, 1),(7, 86, 256),(8, 7, 1),(8, 9, 1),(9, 8, 1),(9, 10, 256),(10, 9, 256),(10, 15, 256),(11, 12, 1),(12, 11, 1),(12, 14, 1),(13, 14, 1),(14, 12, 1),(14, 13, 1),(14, 15, 256),(15, 10, 256),(15, 14, 256),(16, 17, 1),(17, 16, 1),(17, 18, 256),(18, 17, 256),(18, 19, 1),(18, 87, 256),(19, 18, 1),(20, 21, 1),(21, 20, 1),(21, 22, 256),(22, 21, 256),(22, 23, 256),(23, 22, 256),(23, 24, 256),(24, 23, 256),(24, 25, 1),(25, 24, 1),(25, 26, 1),(26, 25, 1),(27, 28, 1),(28, 27, 1),(28, 29, 256),(29, 28, 256),(29, 30, 1),(30, 29, 1),(30, 31, 1),(31, 30, 1),(31, 32, 1),(32, 31, 1),(33, 34, 1),(34, 33, 1),(34, 35, 1),(35, 34, 1),(35, 36, 256),(36, 35, 256),(36, 37, 1),(37, 36, 1),(37, 38, 1),(38, 37, 1),(40, 41, 1),(41, 40, 1),(41, 43, 1),(42, 43, 1),(43, 41, 1),(43, 42, 1),(43, 44, 256),(44, 43, 256),(44, 45, 1),(44, 45, 1),(45, 44, 1),(45, 44, 1),(46, 47, 1),(47, 46, 1),(47, 49, 1),(48, 49, 1),(48, 57, 1),(49, 47, 1),(49, 48, 1),(49, 50, 256),(50, 49, 256),(52, 53, 1),(53, 52, 1),(53, 54, 256),(54, 53, 256),(54, 55, 256),(55, 54, 256),(55, 56, 1),(56, 55, 1),(56, 57, 1),(57, 48, 1),(57, 56, 1),(58, 71, 256),(59, 67, 256),(60, 68, 256),(61, 69, 256),(62, 70, 256),(63, 79, 256),(64, 78, 256),(65, 73, 256),(66, 67, 256),(67, 59, 256),(67, 66, 256),(68, 60, 256),(68, 93, 256),(69, 61, 256),(69, 94, 256),(70, 62, 256),(70, 80, 256),(70, 82, 256),(71, 58, 256),(71, 72, 1),(72, 71, 1),(72, 73, 256),(73, 65, 256),(73, 72, 256),(73, 74, 256),(74, 73, 256),(74, 75, 1),(75, 74, 1),(75, 76, 1),(76, 75, 1),(77, 78, 256),(78, 64, 256),(78, 77, 256),(78, 84, 256),(79, 63, 256),(80, 70, 256),(80, 81, 1),(81, 80, 1),(81, 82, 256),(81, 83, 1),(82, 70, 256),(82, 81, 256),(83, 81, 1),(83, 85, 1),(84, 78, 256),(84, 85, 1),(85, 83, 1),(85, 84, 1),(85, 86, 256),(86, 7, 256),(86, 85, 256),(87, 18, 256),(87, 88, 1),(88, 87, 1),(88, 90, 1),(89, 90, 1),(90, 88, 1),(90, 89, 1),(90, 91, 256),(91, 90, 256),(91, 92, 1),(92, 91, 1),(93, 68, 256),(94, 69, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
