#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(1, 2, 256),(2, 1, 256),(2, 3, 1),(3, 2, 1),(3, 4, 1),(4, 3, 1),(5, 6, 256),(6, 5, 256),(6, 7, 1),(7, 6, 1),(7, 8, 1),(8, 7, 1),(8, 12, 1),(9, 10, 256),(10, 9, 256),(10, 11, 1),(11, 10, 1),(11, 12, 1),(12, 8, 1),(12, 11, 1),(12, 15, 1),(13, 14, 256),(14, 13, 256),(14, 15, 1),(15, 12, 1),(15, 14, 1),(15, 16, 1),(16, 15, 1),(16, 18, 256),(17, 18, 256),(18, 16, 256),(18, 17, 256),(19, 20, 256),(20, 19, 256),(20, 21, 1),(21, 20, 1),(21, 22, 1),(22, 21, 1),(22, 25, 1),(23, 24, 256),(24, 23, 256),(24, 25, 1),(25, 22, 1),(25, 24, 1),(25, 27, 256),(26, 27, 256),(27, 25, 256),(27, 26, 256),(28, 29, 1),(29, 28, 1),(29, 30, 256),(30, 29, 256),(30, 31, 1),(31, 30, 1),(31, 32, 1),(32, 31, 1),(32, 37, 1),(33, 34, 1),(34, 33, 1),(34, 35, 256),(35, 34, 256),(35, 36, 1),(36, 35, 1),(36, 37, 1),(37, 32, 1),(37, 36, 1),(37, 38, 1),(38, 37, 1),(38, 41, 256),(39, 40, 1),(40, 39, 1),(40, 41, 256),(41, 38, 256),(41, 40, 256),(42, 43, 1),(43, 42, 1),(43, 44, 256),(44, 43, 256),(44, 45, 1),(45, 44, 1),(45, 46, 1),(46, 45, 1),(46, 47, 1),(47, 46, 1),(47, 50, 256),(48, 49, 1),(49, 48, 1),(49, 50, 256),(50, 47, 256),(50, 49, 256),(51, 52, 1),(52, 51, 1),(52, 53, 256),(53, 52, 256),(53, 71, 256),(53, 73, 256),(54, 55, 256),(55, 54, 256),(55, 56, 1),(56, 55, 1),(56, 57, 1),(57, 56, 1),(57, 61, 1),(58, 59, 256),(59, 58, 256),(59, 60, 1),(60, 59, 1),(60, 61, 1),(61, 57, 1),(61, 60, 1),(61, 62, 1),(62, 61, 1),(62, 64, 256),(63, 64, 256),(64, 62, 256),(64, 63, 256),(65, 66, 256),(66, 65, 256),(66, 67, 1),(67, 66, 1),(67, 68, 1),(68, 67, 1),(68, 70, 256),(69, 70, 256),(70, 68, 256),(70, 69, 256),(71, 53, 256),(71, 72, 1),(72, 71, 1),(72, 73, 256),(73, 53, 256),(73, 72, 256),(73, 78, 256),(73, 166, 256),(73, 170, 256),(73, 175, 256),(73, 186, 256),(74, 75, 1),(75, 74, 1),(76, 77, 256),(76, 146, 256),(76, 148, 256),(77, 76, 256),(77, 79, 1),(78, 73, 256),(78, 79, 1),(79, 77, 1),(79, 78, 1),(80, 81, 256),(81, 80, 256),(81, 82, 1),(82, 81, 1),(82, 83, 1),(83, 82, 1),(83, 87, 1),(84, 85, 256),(85, 84, 256),(85, 86, 1),(86, 85, 1),(86, 87, 1),(87, 83, 1),(87, 86, 1),(87, 88, 1),(88, 87, 1),(88, 90, 256),(89, 90, 256),(90, 88, 256),(90, 89, 256),(91, 92, 256),(92, 91, 256),(92, 93, 1),(93, 92, 1),(93, 94, 1),(94, 93, 1),(94, 96, 256),(95, 96, 256),(96, 94, 256),(96, 95, 256),(97, 98, 1),(98, 97, 1),(98, 99, 256),(99, 98, 256),(99, 100, 1),(100, 99, 1),(100, 101, 1),(101, 100, 1),(101, 106, 1),(102, 103, 1),(103, 102, 1),(103, 104, 256),(104, 103, 256),(104, 105, 1),(105, 104, 1),(105, 106, 1),(106, 101, 1),(106, 105, 1),(106, 107, 1),(107, 106, 1),(107, 110, 256),(108, 109, 1),(109, 108, 1),(109, 110, 256),(110, 107, 256),(110, 109, 256),(111, 112, 1),(112, 111, 1),(112, 113, 256),(113, 112, 256),(113, 114, 1),(114, 113, 1),(114, 115, 1),(115, 114, 1),(115, 118, 256),(116, 117, 1),(117, 116, 1),(117, 118, 256),(118, 115, 256),(118, 117, 256),(119, 120, 1),(120, 119, 1),(121, 122, 1),(122, 121, 1),(122, 127, 1),(123, 124, 1),(124, 123, 1),(124, 125, 1),(125, 124, 1),(125, 126, 1),(126, 125, 1),(126, 127, 1),(127, 122, 1),(127, 126, 1),(127, 128, 256),(128, 127, 256),(128, 164, 256),(129, 130, 256),(130, 129, 256),(130, 131, 1),(131, 130, 1),(131, 132, 1),(132, 131, 1),(132, 136, 1),(133, 134, 256),(134, 133, 256),(134, 135, 1),(135, 134, 1),(135, 136, 1),(136, 132, 1),(136, 135, 1),(136, 137, 1),(137, 136, 1),(137, 139, 256),(138, 139, 256),(139, 137, 256),(139, 138, 256),(140, 141, 256),(141, 140, 256),(141, 142, 1),(142, 141, 1),(142, 143, 1),(143, 142, 1),(143, 145, 256),(144, 145, 256),(145, 143, 256),(145, 144, 256),(146, 76, 256),(146, 147, 1),(147, 146, 1),(147, 148, 256),(148, 76, 256),(148, 147, 256),(149, 155, 256),(150, 156, 256),(151, 155, 256),(152, 156, 256),(153, 158, 256),(154, 157, 256),(155, 149, 256),(155, 151, 256),(156, 150, 256),(156, 152, 256),(156, 160, 256),(156, 181, 256),(156, 190, 256),(157, 154, 256),(158, 153, 256),(158, 159, 256),(158, 162, 256),(159, 158, 256),(159, 161, 1),(160, 156, 256),(160, 161, 1),(161, 159, 1),(161, 160, 1),(162, 158, 256),(162, 163, 1),(163, 162, 1),(163, 164, 256),(164, 128, 256),(164, 163, 256),(166, 73, 256),(166, 167, 1),(167, 166, 1),(168, 169, 256),(169, 168, 256),(169, 172, 1),(170, 73, 256),(170, 171, 1),(171, 170, 1),(171, 172, 1),(172, 169, 1),(172, 171, 1),(172, 179, 1),(173, 174, 256),(174, 173, 256),(174, 178, 1),(175, 73, 256),(175, 176, 1),(176, 175, 1),(176, 177, 1),(177, 176, 1),(177, 178, 1),(178, 174, 1),(178, 177, 1),(178, 179, 1),(179, 172, 1),(179, 178, 1),(179, 180, 1),(180, 179, 1),(180, 183, 256),(181, 156, 256),(181, 182, 1),(182, 181, 1),(182, 183, 256),(183, 180, 256),(183, 182, 256),(184, 185, 256),(185, 184, 256),(185, 188, 1),(186, 73, 256),(186, 187, 1),(187, 186, 1),(187, 188, 1),(188, 185, 1),(188, 187, 1),(188, 189, 1),(189, 188, 1),(189, 192, 256),(190, 156, 256),(190, 191, 1),(191, 190, 1),(191, 192, 256),(192, 189, 256),(192, 191, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
