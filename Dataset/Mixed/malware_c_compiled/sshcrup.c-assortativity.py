#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 2, 1),(1, 2, 1),(2, 0, 1),(2, 1, 1),(2, 3, 1),(3, 2, 1),(3, 4, 256),(4, 3, 256),(4, 5, 1),(5, 4, 1),(5, 6, 1),(6, 5, 1),(6, 14, 1),(7, 9, 1),(8, 9, 1),(9, 7, 1),(9, 8, 1),(9, 10, 1),(10, 9, 1),(10, 11, 256),(11, 10, 256),(11, 12, 1),(12, 11, 1),(12, 13, 1),(13, 12, 1),(13, 14, 1),(14, 6, 1),(14, 13, 1),(14, 22, 1),(15, 17, 1),(16, 17, 1),(17, 15, 1),(17, 16, 1),(17, 18, 1),(18, 17, 1),(18, 19, 256),(19, 18, 256),(19, 20, 1),(20, 19, 1),(20, 21, 1),(21, 20, 1),(21, 22, 1),(22, 14, 1),(22, 21, 1),(22, 29, 1),(23, 25, 1),(24, 25, 1),(25, 23, 1),(25, 24, 1),(25, 26, 1),(26, 25, 1),(26, 27, 256),(27, 26, 256),(27, 28, 1),(28, 27, 1),(28, 29, 1),(29, 22, 1),(29, 28, 1),(29, 30, 256),(30, 29, 256),(30, 34, 256),(30, 73, 256),(30, 102, 256),(31, 33, 1),(32, 33, 1),(33, 31, 1),(33, 32, 1),(33, 36, 1),(34, 30, 256),(34, 35, 1),(35, 34, 1),(35, 36, 1),(36, 33, 1),(36, 35, 1),(37, 38, 1),(38, 37, 1),(38, 39, 1),(38, 39, 1),(39, 38, 1),(39, 38, 1),(40, 41, 1),(41, 40, 1),(41, 42, 256),(42, 41, 256),(42, 43, 1),(43, 42, 1),(44, 46, 1),(45, 46, 1),(46, 44, 1),(46, 45, 1),(46, 47, 1),(47, 46, 1),(48, 49, 1),(49, 48, 1),(49, 50, 1),(49, 50, 1),(50, 49, 1),(50, 49, 1),(51, 52, 1),(52, 51, 1),(52, 53, 256),(53, 52, 256),(55, 56, 1),(56, 55, 1),(56, 57, 1),(56, 57, 1),(57, 56, 1),(57, 56, 1),(59, 63, 256),(59, 70, 256),(59, 104, 256),(59, 106, 256),(60, 61, 1),(61, 60, 1),(61, 62, 256),(62, 61, 256),(63, 59, 256),(63, 64, 1),(64, 63, 1),(64, 66, 1),(65, 66, 1),(66, 64, 1),(66, 65, 1),(66, 67, 256),(67, 66, 256),(67, 68, 1),(68, 67, 1),(69, 71, 1),(70, 59, 256),(70, 71, 1),(71, 69, 1),(71, 70, 1),(71, 72, 1),(72, 71, 1),(73, 30, 256),(73, 74, 1),(74, 73, 1),(75, 76, 1),(76, 75, 1),(76, 77, 256),(77, 76, 256),(79, 109, 256),(80, 85, 256),(81, 86, 256),(82, 87, 256),(83, 90, 256),(84, 94, 256),(85, 80, 256),(85, 88, 256),(86, 81, 256),(87, 82, 256),(87, 96, 256),(88, 85, 256),(88, 89, 1),(89, 88, 1),(89, 90, 256),(90, 83, 256),(90, 89, 256),(90, 91, 256),(90, 98, 256),(91, 90, 256),(91, 92, 1),(92, 91, 1),(92, 93, 1),(92, 93, 1),(93, 92, 1),(93, 92, 1),(94, 84, 256),(94, 95, 256),(94, 100, 256),(95, 94, 256),(95, 97, 1),(96, 87, 256),(96, 97, 1),(97, 95, 1),(97, 96, 1),(98, 90, 256),(98, 99, 1),(99, 98, 1),(100, 94, 256),(100, 101, 1),(101, 100, 1),(102, 30, 256),(102, 103, 1),(103, 102, 1),(103, 105, 1),(104, 59, 256),(104, 105, 1),(105, 103, 1),(105, 104, 1),(105, 106, 256),(106, 59, 256),(106, 105, 256),(106, 107, 256),(107, 106, 256),(107, 108, 1),(108, 107, 1),(108, 109, 256),(109, 79, 256),(109, 108, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
