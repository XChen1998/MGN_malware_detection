#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(9, 10, 1),(10, 9, 1),(10, 11, 256),(10, 12, 1),(11, 10, 256),(11, 39, 256),(11, 138, 256),(12, 10, 1),(12, 20, 1),(13, 14, 1),(14, 13, 1),(14, 15, 256),(15, 14, 256),(15, 16, 1),(16, 15, 1),(16, 17, 256),(17, 16, 256),(17, 18, 1),(18, 17, 1),(18, 19, 256),(19, 18, 256),(19, 20, 1),(20, 12, 1),(20, 19, 1),(20, 21, 256),(21, 20, 256),(21, 27, 256),(22, 23, 1),(22, 25, 1),(23, 22, 1),(23, 24, 256),(24, 23, 256),(24, 33, 256),(24, 35, 256),(25, 22, 1),(25, 26, 1),(26, 25, 1),(26, 27, 256),(27, 21, 256),(27, 26, 256),(28, 29, 1),(29, 28, 1),(32, 38, 256),(33, 24, 256),(33, 34, 1),(33, 36, 1),(34, 33, 1),(34, 35, 256),(35, 24, 256),(35, 34, 256),(35, 132, 256),(35, 134, 256),(36, 33, 1),(36, 37, 1),(37, 36, 1),(37, 38, 256),(38, 32, 256),(38, 37, 256),(39, 11, 256),(39, 40, 1),(40, 39, 1),(40, 41, 1),(41, 40, 1),(41, 49, 1),(42, 43, 1),(43, 42, 1),(43, 44, 256),(44, 43, 256),(44, 45, 1),(45, 44, 1),(45, 46, 256),(46, 45, 256),(46, 47, 1),(47, 46, 1),(47, 48, 256),(48, 47, 256),(48, 49, 1),(49, 41, 1),(49, 48, 1),(49, 50, 256),(50, 49, 256),(50, 51, 1),(51, 50, 1),(52, 53, 1),(53, 52, 1),(54, 55, 1),(55, 54, 1),(55, 56, 256),(56, 55, 256),(56, 57, 1),(57, 56, 1),(57, 58, 256),(58, 57, 256),(58, 59, 1),(59, 58, 1),(59, 60, 256),(60, 59, 256),(61, 62, 1),(61, 62, 1),(62, 61, 1),(62, 61, 1),(63, 64, 1),(63, 64, 1),(64, 63, 1),(64, 63, 1),(65, 66, 1),(66, 65, 1),(66, 67, 256),(66, 73, 1),(67, 66, 256),(67, 68, 1),(68, 67, 1),(69, 70, 1),(70, 69, 1),(70, 71, 1),(71, 70, 1),(73, 66, 1),(74, 78, 256),(75, 79, 256),(76, 80, 256),(77, 83, 256),(78, 74, 256),(78, 84, 256),(79, 75, 256),(79, 106, 256),(79, 122, 256),(80, 76, 256),(80, 81, 256),(81, 80, 256),(81, 82, 1),(82, 81, 1),(82, 83, 256),(83, 77, 256),(83, 82, 256),(83, 99, 256),(83, 108, 256),(83, 112, 256),(83, 115, 256),(83, 124, 256),(83, 128, 256),(83, 141, 256),(84, 78, 256),(99, 83, 256),(99, 100, 1),(100, 99, 1),(100, 101, 256),(101, 100, 256),(101, 102, 1),(102, 101, 1),(102, 103, 256),(103, 102, 256),(103, 104, 1),(104, 103, 1),(104, 105, 256),(105, 104, 256),(106, 79, 256),(106, 107, 1),(106, 107, 1),(107, 106, 1),(107, 106, 1),(108, 83, 256),(108, 109, 1),(109, 108, 1),(109, 110, 256),(110, 109, 256),(110, 111, 1),(111, 110, 1),(112, 83, 256),(112, 113, 1),(113, 112, 1),(113, 114, 1),(114, 113, 1),(115, 83, 256),(115, 116, 1),(116, 115, 1),(116, 117, 256),(117, 116, 256),(117, 118, 1),(118, 117, 1),(118, 119, 256),(119, 118, 256),(119, 120, 1),(120, 119, 1),(120, 121, 256),(121, 120, 256),(122, 79, 256),(122, 123, 1),(122, 123, 1),(123, 122, 1),(123, 122, 1),(124, 83, 256),(124, 125, 1),(125, 124, 1),(125, 126, 256),(126, 125, 256),(126, 127, 1),(127, 126, 1),(128, 83, 256),(128, 129, 1),(129, 128, 1),(129, 130, 1),(130, 129, 1),(131, 137, 256),(132, 35, 256),(132, 133, 1),(132, 135, 1),(133, 132, 1),(133, 134, 256),(134, 35, 256),(134, 133, 256),(135, 132, 1),(135, 136, 1),(136, 135, 1),(136, 137, 256),(137, 131, 256),(137, 136, 256),(138, 11, 256),(138, 139, 1),(139, 138, 1),(139, 140, 1),(140, 139, 1),(140, 148, 1),(141, 83, 256),(141, 142, 1),(142, 141, 1),(142, 143, 256),(143, 142, 256),(143, 144, 1),(144, 143, 1),(144, 145, 256),(145, 144, 256),(145, 146, 1),(146, 145, 1),(146, 147, 256),(147, 146, 256),(147, 148, 1),(148, 140, 1),(148, 147, 1),(148, 149, 256),(149, 148, 256),(149, 150, 1),(150, 149, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
