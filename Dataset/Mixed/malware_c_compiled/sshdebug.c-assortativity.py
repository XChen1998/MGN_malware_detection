#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 16, 256),(0, 18, 256),(1, 43, 256),(1, 45, 256),(1, 50, 256),(16, 0, 256),(18, 0, 256),(18, 19, 1),(18, 79, 256),(19, 18, 1),(19, 20, 1),(20, 19, 1),(21, 22, 256),(22, 21, 256),(22, 23, 1),(23, 22, 1),(23, 24, 1),(24, 23, 1),(25, 42, 1),(26, 27, 256),(27, 26, 256),(27, 28, 1),(28, 27, 1),(28, 29, 1),(29, 28, 1),(30, 31, 256),(31, 30, 256),(31, 32, 1),(32, 31, 1),(32, 33, 1),(33, 32, 1),(34, 35, 256),(35, 34, 256),(35, 36, 1),(36, 35, 1),(36, 37, 1),(37, 36, 1),(38, 39, 256),(39, 38, 256),(39, 40, 1),(40, 39, 1),(40, 41, 1),(41, 40, 1),(42, 25, 1),(43, 1, 256),(43, 44, 1),(44, 43, 1),(45, 1, 256),(45, 46, 256),(46, 45, 256),(46, 47, 256),(46, 51, 256),(47, 46, 256),(47, 48, 1),(48, 47, 1),(48, 49, 256),(49, 48, 256),(49, 50, 256),(50, 1, 256),(50, 49, 256),(51, 46, 256),(51, 52, 1),(52, 51, 1),(52, 53, 256),(53, 52, 256),(53, 54, 1),(54, 53, 1),(55, 56, 256),(56, 55, 256),(56, 57, 1),(57, 56, 1),(57, 58, 1),(58, 57, 1),(59, 60, 1),(60, 59, 1),(60, 61, 256),(61, 60, 256),(62, 65, 256),(63, 70, 1),(64, 66, 1),(64, 72, 1),(65, 62, 256),(65, 71, 256),(66, 64, 1),(66, 67, 1),(67, 66, 1),(67, 68, 1),(68, 67, 1),(70, 63, 1),(71, 65, 256),(72, 64, 1),(72, 73, 1),(73, 72, 1),(74, 77, 256),(75, 77, 256),(77, 74, 256),(77, 75, 256),(77, 78, 256),(77, 81, 256),(77, 85, 256),(78, 77, 256),(78, 79, 256),(79, 18, 256),(79, 78, 256),(81, 77, 256),(81, 82, 256),(82, 81, 256),(82, 83, 1),(83, 82, 1),(83, 84, 1),(84, 83, 1),(85, 77, 256),(85, 86, 256),(86, 85, 256),(86, 87, 1),(87, 86, 1),(87, 88, 1),(88, 87, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
