#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 7, 256),(1, 2, 1),(1, 148, 1),(2, 1, 1),(2, 3, 256),(3, 2, 256),(3, 4, 1),(4, 3, 1),(4, 5, 256),(5, 4, 256),(5, 6, 1),(6, 5, 1),(6, 7, 256),(7, 0, 256),(7, 6, 256),(8, 9, 1),(9, 8, 1),(9, 10, 256),(9, 129, 1),(10, 9, 256),(10, 11, 1),(11, 10, 1),(11, 12, 256),(12, 11, 256),(12, 15, 256),(12, 132, 1),(13, 14, 1),(14, 13, 1),(14, 15, 256),(15, 12, 256),(15, 14, 256),(16, 21, 256),(17, 18, 1),(17, 133, 1),(18, 17, 1),(18, 19, 256),(19, 18, 256),(19, 20, 1),(20, 19, 1),(20, 21, 256),(21, 16, 256),(21, 20, 256),(22, 23, 1),(23, 22, 1),(23, 24, 256),(24, 23, 256),(24, 27, 256),(25, 26, 1),(26, 25, 1),(26, 27, 256),(27, 24, 256),(27, 26, 256),(28, 35, 256),(29, 30, 1),(30, 29, 1),(30, 31, 256),(31, 30, 256),(31, 32, 1),(32, 31, 1),(32, 33, 256),(33, 32, 256),(33, 34, 1),(34, 33, 1),(34, 35, 256),(35, 28, 256),(35, 34, 256),(36, 37, 1),(37, 36, 1),(37, 38, 256),(38, 37, 256),(38, 39, 1),(39, 38, 1),(39, 40, 256),(40, 39, 256),(40, 43, 256),(41, 42, 1),(42, 41, 1),(42, 43, 256),(43, 40, 256),(43, 42, 256),(44, 49, 256),(45, 46, 1),(46, 45, 1),(46, 47, 256),(47, 46, 256),(47, 48, 1),(48, 47, 1),(48, 49, 256),(49, 44, 256),(49, 48, 256),(50, 51, 1),(51, 50, 1),(51, 52, 256),(52, 51, 256),(52, 55, 256),(53, 54, 1),(54, 53, 1),(54, 55, 256),(55, 52, 256),(55, 54, 256),(56, 58, 256),(57, 59, 256),(58, 56, 256),(58, 61, 256),(59, 57, 256),(59, 60, 256),(60, 59, 256),(60, 63, 256),(61, 58, 256),(61, 62, 1),(62, 61, 1),(62, 63, 256),(63, 60, 256),(63, 62, 256),(65, 66, 256),(66, 65, 256),(66, 67, 256),(66, 70, 256),(67, 66, 256),(67, 68, 1),(68, 67, 1),(68, 69, 256),(69, 68, 256),(69, 75, 1),(70, 66, 256),(70, 71, 1),(70, 85, 1),(71, 70, 1),(71, 72, 256),(72, 71, 256),(72, 73, 1),(73, 72, 1),(73, 74, 256),(74, 73, 256),(74, 75, 1),(75, 69, 1),(75, 74, 1),(77, 81, 256),(78, 82, 256),(79, 83, 256),(80, 86, 256),(81, 77, 256),(81, 87, 256),(81, 102, 256),(81, 109, 256),(81, 118, 256),(81, 123, 256),(82, 78, 256),(82, 91, 256),(83, 79, 256),(83, 84, 1),(83, 95, 256),(84, 83, 1),(85, 70, 1),(85, 86, 256),(86, 80, 256),(86, 85, 256),(86, 88, 256),(86, 92, 256),(86, 101, 256),(86, 114, 256),(86, 117, 256),(86, 126, 256),(86, 139, 256),(87, 81, 256),(87, 90, 256),(88, 86, 256),(88, 89, 1),(89, 88, 1),(89, 90, 256),(90, 87, 256),(90, 89, 256),(91, 82, 256),(91, 94, 256),(92, 86, 256),(92, 93, 1),(93, 92, 1),(93, 94, 256),(94, 91, 256),(94, 93, 256),(95, 83, 256),(101, 86, 256),(101, 108, 256),(102, 81, 256),(102, 103, 1),(103, 102, 1),(103, 104, 256),(104, 103, 256),(104, 105, 1),(105, 104, 1),(105, 106, 256),(106, 105, 256),(106, 107, 1),(107, 106, 1),(107, 108, 256),(108, 101, 256),(108, 107, 256),(109, 81, 256),(109, 110, 1),(110, 109, 1),(110, 111, 256),(111, 110, 256),(111, 112, 1),(112, 111, 1),(112, 113, 256),(113, 112, 256),(113, 116, 256),(114, 86, 256),(114, 115, 1),(115, 114, 1),(115, 116, 256),(116, 113, 256),(116, 115, 256),(117, 86, 256),(117, 122, 256),(118, 81, 256),(118, 119, 1),(119, 118, 1),(119, 120, 256),(120, 119, 256),(120, 121, 1),(121, 120, 1),(121, 122, 256),(122, 117, 256),(122, 121, 256),(123, 81, 256),(123, 124, 1),(124, 123, 1),(124, 125, 256),(125, 124, 256),(125, 128, 256),(126, 86, 256),(126, 127, 1),(127, 126, 1),(127, 128, 256),(128, 125, 256),(128, 127, 256),(129, 9, 1),(129, 130, 256),(130, 129, 256),(130, 131, 256),(131, 130, 256),(132, 12, 1),(132, 133, 1),(133, 17, 1),(133, 132, 1),(134, 135, 256),(135, 134, 256),(135, 136, 256),(136, 135, 256),(136, 137, 1),(136, 144, 1),(136, 147, 256),(137, 136, 1),(137, 138, 256),(137, 150, 256),(138, 137, 256),(139, 86, 256),(139, 140, 1),(140, 139, 1),(140, 141, 1),(141, 140, 1),(142, 143, 1),(142, 145, 256),(143, 142, 1),(143, 152, 256),(144, 136, 1),(144, 145, 256),(145, 142, 256),(145, 144, 256),(145, 146, 1),(146, 145, 1),(147, 136, 256),(148, 1, 1),(148, 149, 256),(149, 148, 256),(150, 137, 256),(152, 143, 256),(152, 153, 256),(153, 152, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
