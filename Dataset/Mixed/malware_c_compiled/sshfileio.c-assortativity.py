#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(2, 4, 1),(3, 4, 1),(4, 2, 1),(4, 3, 1),(5, 6, 1),(6, 5, 1),(7, 12, 256),(8, 9, 1),(9, 8, 1),(9, 10, 256),(10, 9, 256),(12, 7, 256),(12, 13, 1),(12, 45, 256),(13, 12, 1),(14, 15, 1),(15, 14, 1),(16, 26, 256),(16, 54, 256),(16, 57, 256),(17, 18, 256),(18, 17, 256),(18, 24, 256),(20, 21, 1),(20, 21, 1),(21, 20, 1),(21, 20, 1),(23, 24, 256),(24, 18, 256),(24, 23, 256),(24, 25, 256),(24, 56, 256),(25, 24, 256),(25, 27, 1),(26, 16, 256),(26, 27, 1),(27, 25, 1),(27, 26, 1),(28, 38, 256),(29, 39, 256),(30, 40, 256),(32, 38, 256),(33, 39, 256),(34, 40, 256),(35, 49, 256),(36, 45, 256),(37, 47, 256),(38, 28, 256),(38, 32, 256),(38, 41, 256),(38, 43, 256),(39, 29, 256),(39, 33, 256),(40, 30, 256),(40, 34, 256),(41, 38, 256),(41, 42, 1),(42, 41, 1),(43, 38, 256),(43, 44, 1),(44, 43, 1),(45, 12, 256),(45, 36, 256),(45, 46, 256),(45, 51, 256),(45, 53, 256),(46, 45, 256),(46, 48, 1),(47, 37, 256),(47, 48, 1),(48, 46, 1),(48, 47, 1),(49, 35, 256),(49, 50, 1),(50, 49, 1),(51, 45, 256),(51, 52, 1),(52, 51, 1),(53, 45, 256),(53, 55, 1),(54, 16, 256),(54, 55, 1),(55, 53, 1),(55, 54, 1),(56, 24, 256),(56, 58, 1),(57, 16, 256),(57, 58, 1),(58, 56, 1),(58, 57, 1),(58, 59, 1),(58, 59, 1),(59, 58, 1),(59, 58, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
