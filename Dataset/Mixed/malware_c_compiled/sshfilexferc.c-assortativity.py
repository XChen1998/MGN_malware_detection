#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 3, 256),(1, 2, 1),(1, 28, 1),(2, 1, 1),(2, 3, 256),(3, 0, 256),(3, 2, 256),(4, 7, 256),(5, 6, 1),(6, 5, 1),(6, 7, 256),(7, 4, 256),(7, 6, 256),(8, 11, 256),(9, 10, 1),(10, 9, 1),(10, 11, 256),(11, 8, 256),(11, 10, 256),(12, 13, 1),(13, 12, 1),(13, 14, 256),(14, 13, 256),(15, 16, 1),(16, 15, 1),(16, 17, 256),(17, 16, 256),(18, 19, 1),(19, 18, 1),(19, 20, 256),(20, 19, 256),(21, 22, 1),(22, 21, 1),(22, 23, 256),(23, 22, 256),(24, 25, 1),(25, 24, 1),(25, 26, 256),(26, 25, 256),(28, 1, 1),(28, 31, 256),(29, 31, 256),(30, 61, 256),(31, 28, 256),(31, 29, 256),(31, 32, 256),(32, 31, 256),(32, 33, 1),(33, 32, 1),(33, 34, 256),(33, 43, 256),(34, 33, 256),(34, 35, 1),(35, 34, 1),(36, 37, 1),(37, 36, 1),(37, 38, 256),(38, 37, 256),(40, 41, 1),(41, 40, 1),(41, 42, 256),(42, 41, 256),(43, 33, 256),(44, 45, 1),(45, 44, 1),(45, 46, 256),(46, 45, 256),(48, 52, 256),(49, 53, 256),(50, 54, 256),(51, 57, 256),(52, 48, 256),(53, 49, 256),(54, 50, 256),(54, 55, 1),(55, 54, 1),(56, 57, 256),(57, 51, 256),(57, 56, 256),(57, 58, 256),(58, 57, 256),(58, 59, 1),(59, 58, 1),(59, 60, 1),(60, 59, 1),(61, 30, 256),(61, 74, 256),(61, 90, 256),(61, 98, 256),(62, 66, 256),(63, 67, 256),(64, 79, 1),(65, 70, 256),(66, 62, 256),(66, 68, 256),(66, 75, 256),(67, 63, 256),(68, 66, 256),(68, 69, 1),(69, 68, 1),(69, 70, 256),(70, 65, 256),(70, 69, 256),(70, 71, 256),(71, 70, 256),(71, 72, 256),(72, 71, 256),(72, 73, 1),(73, 72, 1),(74, 61, 256),(74, 78, 1),(75, 66, 256),(75, 76, 1),(76, 75, 1),(76, 77, 256),(77, 76, 256),(77, 78, 1),(78, 74, 1),(78, 77, 1),(79, 64, 1),(79, 81, 256),(80, 81, 256),(81, 79, 256),(81, 80, 256),(81, 82, 256),(81, 86, 256),(81, 92, 256),(81, 100, 256),(82, 81, 256),(82, 83, 1),(83, 82, 1),(83, 84, 256),(84, 83, 256),(84, 85, 1),(85, 84, 1),(86, 81, 256),(86, 87, 1),(87, 86, 1),(87, 88, 256),(88, 87, 256),(88, 89, 1),(89, 88, 1),(90, 61, 256),(90, 91, 1),(91, 90, 1),(91, 95, 1),(92, 81, 256),(92, 93, 1),(93, 92, 1),(93, 94, 256),(94, 93, 256),(94, 95, 1),(95, 91, 1),(95, 94, 1),(95, 96, 256),(96, 95, 256),(96, 97, 1),(97, 96, 1),(98, 61, 256),(98, 99, 1),(99, 98, 1),(99, 103, 1),(100, 81, 256),(100, 101, 1),(101, 100, 1),(101, 102, 256),(102, 101, 256),(102, 103, 1),(103, 99, 1),(103, 102, 1),(103, 104, 256),(104, 103, 256),(104, 105, 1),(105, 104, 1),(105, 106, 1),(106, 105, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
