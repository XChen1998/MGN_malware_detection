#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(2, 3, 1),(3, 2, 1),(3, 5, 1),(4, 5, 1),(5, 3, 1),(5, 4, 1),(5, 6, 256),(6, 5, 256),(7, 8, 1),(8, 7, 1),(8, 9, 1),(9, 8, 1),(9, 11, 1),(10, 11, 1),(11, 9, 1),(11, 10, 1),(11, 12, 256),(12, 11, 256),(13, 14, 1),(14, 13, 1),(14, 16, 1),(14, 52, 1),(15, 16, 1),(15, 53, 1),(16, 14, 1),(16, 15, 1),(16, 17, 256),(17, 16, 256),(18, 19, 1),(19, 18, 1),(19, 20, 1),(20, 19, 1),(20, 22, 1),(21, 22, 1),(22, 20, 1),(22, 21, 1),(22, 23, 256),(23, 22, 256),(24, 25, 1),(25, 24, 1),(25, 26, 1),(26, 25, 1),(26, 28, 1),(27, 28, 1),(28, 26, 1),(28, 27, 1),(28, 29, 256),(29, 28, 256),(30, 31, 1),(31, 30, 1),(31, 32, 256),(32, 31, 256),(33, 34, 1),(34, 33, 1),(34, 36, 1),(35, 36, 1),(36, 34, 1),(36, 35, 1),(36, 37, 256),(37, 36, 256),(38, 39, 1),(39, 38, 1),(39, 40, 1),(40, 39, 1),(40, 41, 1),(41, 40, 1),(41, 42, 256),(42, 41, 256),(42, 43, 1),(43, 42, 1),(43, 44, 1),(44, 43, 1),(44, 45, 256),(45, 44, 256),(45, 51, 256),(46, 47, 1),(47, 46, 1),(47, 48, 256),(48, 47, 256),(48, 49, 1),(49, 48, 1),(49, 50, 1),(50, 49, 1),(50, 51, 256),(51, 45, 256),(51, 50, 256),(52, 14, 1),(52, 59, 256),(53, 15, 1),(53, 60, 256),(54, 59, 256),(55, 60, 256),(56, 62, 256),(59, 52, 256),(59, 54, 256),(59, 61, 256),(60, 53, 256),(60, 55, 256),(60, 63, 256),(61, 59, 256),(61, 62, 256),(62, 56, 256),(62, 61, 256),(63, 60, 256),(70, 83, 256),(71, 72, 256),(72, 71, 256),(72, 73, 256),(72, 76, 256),(72, 84, 256),(73, 72, 256),(73, 74, 1),(74, 73, 1),(74, 75, 1),(75, 74, 1),(76, 72, 256),(76, 77, 1),(77, 76, 1),(77, 78, 1),(78, 77, 1),(78, 79, 1),(79, 78, 1),(79, 80, 256),(80, 79, 256),(80, 81, 1),(81, 80, 1),(81, 82, 1),(82, 81, 1),(82, 83, 256),(83, 70, 256),(83, 82, 256),(84, 72, 256),(84, 85, 1),(85, 84, 1),(85, 86, 1),(86, 85, 1),(88, 92, 256),(89, 93, 256),(90, 94, 256),(92, 88, 256),(93, 89, 256),(93, 95, 256),(94, 90, 256),(94, 97, 256),(95, 93, 256),(95, 96, 1),(96, 95, 1),(97, 94, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
