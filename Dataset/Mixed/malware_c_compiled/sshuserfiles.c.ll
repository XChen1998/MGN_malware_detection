@ssh2_pk_format_name_list = global [4 x %struct.Ssh2PkFormatNameListRec] [%struct.Ssh2PkFormatNameListRec { i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i32 0, i32 0), i64 1936943105 }, %struct.Ssh2PkFormatNameListRec { i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i32 0, i32 0), i64 1936943106 }, %struct.Ssh2PkFormatNameListRec { i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.5, i32 0, i32 0), i64 1936943107 }, %struct.Ssh2PkFormatNameListRec zeroinitializer], align 16
  %47 = load i64, i64* %i, align 8
  %48 = load i8*, i8** %2, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 %47
  %50 = load i8*, i8** %4, align 8
  %51 = load i8*, i8** %4, align 8
  %52 = call i64 @strlen(i8* %51) #7
  %55 = call i32 @memcmp(i8* %49, i8* %50, i64 %53) #7
  store i32 0, i32* %1, align 4
  %161 = load i32, i32* %1, align 4
  %42 = icmp ult i64 %37, %40
  store i64 0, i64* %1, align 8
  %58 = icmp eq i32 %56, 0
  %69 = load i64, i64* %j, align 8
  %70 = getelementptr inbounds [4 x %struct.Ssh2PkFormatNameListRec], [4 x %struct.Ssh2PkFormatNameListRec]* @ssh2_pk_format_name_list, i64 0, i64 %69
  %71 = getelementptr inbounds %struct.Ssh2PkFormatNameListRec, %struct.Ssh2PkFormatNameListRec* %70, i32 0, i32 1
  %72 = load i8*, i8** %71, align 8
  %73 = icmp ne i8* %72, null
  %76 = load i64, i64* %j, align 8
  %77 = getelementptr inbounds [4 x %struct.Ssh2PkFormatNameListRec], [4 x %struct.Ssh2PkFormatNameListRec]* @ssh2_pk_format_name_list, i64 0, i64 %76
  %78 = getelementptr inbounds %struct.Ssh2PkFormatNameListRec, %struct.Ssh2PkFormatNameListRec* %77, i32 0, i32 1
  %79 = load i8*, i8** %78, align 8
  %80 = getelementptr inbounds [1024 x i8], [1024 x i8]* %tmp, i32 0, i32 0
  %81 = call i32 @strcmp(i8* %79, i8* %80) #7
  %155 = load i64, i64* %i, align 8
  %156 = add i64 %155, 1
  store i64 %156, i64* %i, align 8
  %61 = load i64, i64* %i, align 8
  %62 = load i8*, i8** %4, align 8
  %63 = call i64 @strlen(i8* %62) #7
store i8* %15, i8** %buf, align 8
store  i64 %16, i64* %buf_size, align 8
store  i32 0, i32* %type, align 8
store  i64* %start, i64** %ret_start, align 8
store  i64* %end, i64** %ret_end, align 8
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  %keep = alloca i64, align 8
  %tmp_pos = alloca i64, align 8
  %tmp = alloca [1024 x i8], align 16
  store i8* %buf, i8** %2, align 8
  store i64 %buf_size, i64* %3, align 8
  store i32 %type, i32* %4, align 4
  store i64 0, i64* %i, align 8
  store i64 0, i64* %keep, align 8
  store i64 0, i64* %tmp_pos, align 8
  store i64 0, i64* %start, align 8
  store i64 0, i64* %end, align 8
  %9 = load i64, i64* %i, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ult i64 %9, %10
  store i64 0, i64* %j, align 8
  %66 = add i64 %61, %64
  store i64 %66, i64* %1, align 8
