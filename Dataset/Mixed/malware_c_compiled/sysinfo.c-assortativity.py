#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 38, 256),(1, 12, 256),(1, 17, 256),(1, 50, 256),(3, 4, 256),(3, 14, 256),(4, 3, 256),(5, 6, 1),(6, 5, 1),(7, 8, 256),(8, 7, 256),(8, 9, 256),(9, 8, 256),(9, 10, 1),(10, 9, 1),(12, 1, 256),(12, 13, 1),(13, 12, 1),(14, 3, 256),(14, 15, 1),(15, 14, 1),(15, 16, 1),(16, 15, 1),(17, 1, 256),(17, 18, 1),(18, 17, 1),(18, 19, 1),(19, 18, 1),(26, 27, 1),(26, 27, 1),(27, 26, 1),(27, 26, 1),(27, 28, 1),(28, 27, 1),(30, 35, 256),(31, 36, 256),(32, 37, 256),(33, 42, 256),(34, 44, 1),(34, 46, 1),(35, 30, 256),(35, 47, 256),(36, 31, 256),(36, 48, 256),(37, 32, 256),(38, 0, 256),(38, 39, 1),(39, 38, 1),(39, 40, 1),(40, 39, 1),(42, 33, 256),(42, 43, 1),(43, 42, 1),(43, 44, 1),(44, 34, 1),(44, 43, 1),(44, 45, 256),(45, 44, 256),(46, 34, 1),(47, 35, 256),(48, 36, 256),(48, 49, 1),(48, 49, 1),(49, 48, 1),(49, 48, 1),(50, 1, 256),(50, 51, 1),(51, 50, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
