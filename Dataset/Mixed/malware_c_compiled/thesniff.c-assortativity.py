#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(8, 35, 1),(8, 41, 1),(8, 50, 1),(8, 66, 1),(8, 74, 1),(8, 82, 1),(8, 109, 1),(9, 24, 256),(9, 26, 256),(9, 46, 256),(24, 9, 256),(24, 25, 1),(25, 24, 1),(26, 9, 256),(26, 27, 1),(26, 27, 1),(27, 26, 1),(27, 26, 1),(28, 29, 1),(29, 28, 1),(30, 31, 1),(31, 30, 1),(31, 32, 1),(32, 31, 1),(33, 34, 1),(34, 33, 1),(34, 35, 1),(35, 8, 1),(35, 34, 1),(35, 36, 256),(36, 35, 256),(36, 37, 1),(37, 36, 1),(37, 38, 1),(38, 37, 1),(39, 40, 1),(40, 39, 1),(40, 41, 1),(41, 8, 1),(41, 40, 1),(41, 42, 256),(42, 41, 256),(42, 43, 1),(43, 42, 1),(43, 44, 1),(44, 43, 1),(44, 45, 1),(44, 45, 1),(45, 44, 1),(45, 44, 1),(46, 9, 256),(46, 47, 1),(47, 46, 1),(48, 49, 1),(49, 48, 1),(49, 50, 1),(50, 8, 1),(50, 49, 1),(50, 51, 256),(51, 50, 256),(51, 52, 1),(52, 51, 1),(52, 53, 256),(53, 52, 256),(54, 59, 256),(55, 60, 256),(57, 59, 256),(58, 60, 256),(59, 54, 256),(59, 57, 256),(59, 64, 256),(59, 72, 256),(59, 80, 256),(60, 55, 256),(60, 58, 256),(60, 61, 256),(61, 60, 256),(61, 62, 1),(62, 61, 1),(62, 63, 1),(63, 62, 1),(64, 59, 256),(64, 65, 1),(65, 64, 1),(65, 66, 1),(66, 8, 1),(66, 65, 1),(66, 67, 256),(67, 66, 256),(67, 68, 1),(68, 67, 1),(68, 69, 256),(69, 68, 256),(69, 70, 1),(70, 69, 1),(70, 71, 1),(71, 70, 1),(72, 59, 256),(72, 73, 1),(73, 72, 1),(73, 74, 1),(74, 8, 1),(74, 73, 1),(74, 75, 256),(75, 74, 256),(75, 76, 1),(76, 75, 1),(76, 77, 256),(77, 76, 256),(77, 78, 1),(78, 77, 1),(80, 59, 256),(80, 81, 1),(81, 80, 1),(81, 82, 1),(82, 8, 1),(82, 81, 1),(82, 83, 256),(83, 82, 256),(83, 84, 1),(84, 83, 1),(84, 85, 1),(85, 84, 1),(86, 88, 256),(87, 91, 1),(87, 93, 1),(88, 86, 256),(88, 89, 256),(89, 88, 256),(89, 90, 1),(90, 89, 1),(90, 92, 256),(91, 87, 1),(91, 92, 256),(92, 90, 256),(92, 91, 256),(93, 87, 1),(93, 94, 256),(94, 93, 256),(94, 95, 1),(94, 95, 1),(95, 94, 1),(95, 94, 1),(96, 103, 256),(97, 104, 256),(98, 105, 256),(99, 103, 256),(100, 104, 256),(101, 105, 256),(102, 106, 256),(103, 96, 256),(103, 99, 256),(103, 111, 256),(104, 97, 256),(104, 100, 256),(104, 107, 256),(105, 98, 256),(105, 101, 256),(106, 102, 256),(107, 104, 256),(107, 108, 1),(108, 107, 1),(108, 109, 1),(109, 8, 1),(109, 108, 1),(109, 110, 256),(110, 109, 256),(111, 103, 256),(111, 112, 256),(112, 111, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
