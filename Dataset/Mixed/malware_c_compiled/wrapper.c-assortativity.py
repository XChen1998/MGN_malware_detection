#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(6, 8, 256),(7, 11, 256),(8, 6, 256),(8, 9, 1),(8, 12, 256),(9, 8, 1),(10, 11, 256),(10, 20, 256),(11, 7, 256),(11, 10, 256),(11, 14, 256),(12, 8, 256),(12, 13, 1),(12, 13, 1),(13, 12, 1),(13, 12, 1),(14, 11, 256),(14, 15, 256),(15, 14, 256),(15, 16, 1),(16, 15, 1),(16, 17, 1),(17, 16, 1),(17, 18, 1),(18, 17, 1),(20, 10, 256),(20, 21, 256),(21, 20, 256),(21, 22, 1),(22, 21, 1)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
