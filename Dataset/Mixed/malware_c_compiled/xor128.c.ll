@xor128.x = internal global i32 123456789, align 4
@xor128.y = internal global i32 362436069, align 4
@xor128.z = internal global i32 521288629, align 4
@xor128.w = internal global i32 88675123, align 4
  %1 = alloca i32, align 4
  %f = alloca i32, align 4
  %i = alloca i32, align 4
  %rnd = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i32 65)
  store i32 %3, i32* %f, align 4
  store i32 0, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %11 = call i32 @xor128()
  %t = alloca i32, align 4
  %1 = load i32, i32* @xor128.x, align 4
  %2 = load i32, i32* @xor128.x, align 4
  %3 = shl i32 %2, 11
  %4 = xor i32 %1, %3
  store i32 %4, i32* %t, align 4
  %5 = load i32, i32* @xor128.y, align 4
  store i32 %5, i32* @xor128.x, align 4
  %6 = load i32, i32* @xor128.z, align 4
  store i32 %6, i32* @xor128.y, align 4
  %7 = load i32, i32* @xor128.w, align 4
  store i32 %7, i32* @xor128.z, align 4
  %8 = load i32, i32* @xor128.w, align 4
  %9 = load i32, i32* @xor128.w, align 4
  %10 = lshr i32 %9, 19
  %11 = xor i32 %8, %10
  %12 = load i32, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  %14 = lshr i32 %13, 8
  %15 = xor i32 %12, %14
  %16 = xor i32 %11, %15
  store i32 %16, i32* @xor128.w, align 4
  %17 = load i32, i32* @xor128.w, align 4
  store i32 %12, i32* %rnd, align 4
  %14 = load i32, i32* %rnd, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  %18 = load i32, i32* %f, align 4
  %19 = bitcast i32* %rnd to i8*
  %20 = call i64 @write(i32 %18, i8* %19, i64 4)
  %23 = load i32, i32* %i, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = icmp slt i32 %7, 100
  %27 = load i32, i32* %f, align 4
  %28 = call i32 @close(i32 %27)
