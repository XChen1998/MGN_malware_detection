#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 1, 1),(1, 0, 1),(1, 2, 256),(2, 1, 256),(3, 4, 256),(3, 6, 256),(4, 3, 256),(4, 5, 1),(5, 4, 1),(5, 6, 256),(6, 3, 256),(6, 5, 256),(7, 8, 256),(8, 7, 256),(8, 9, 256),(9, 8, 256),(9, 10, 1),(10, 9, 1),(20, 46, 256),(21, 29, 256),(22, 30, 256),(23, 31, 256),(24, 32, 256),(25, 33, 256),(27, 37, 256),(28, 44, 256),(29, 21, 256),(29, 40, 256),(30, 22, 256),(30, 34, 256),(30, 36, 256),(31, 23, 256),(31, 42, 256),(32, 24, 256),(33, 25, 256),(34, 30, 256),(34, 35, 1),(35, 34, 1),(36, 30, 256),(36, 37, 256),(37, 27, 256),(37, 36, 256),(37, 41, 256),(40, 29, 256),(41, 37, 256),(42, 31, 256),(43, 44, 256),(44, 28, 256),(44, 43, 256),(46, 20, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
