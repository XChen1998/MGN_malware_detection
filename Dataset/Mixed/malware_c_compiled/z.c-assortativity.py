#!/usr/bin/python

import networkx as nx
import glob
import numpy as np
import json
import os
import re
G = nx.Graph()
elist = [(0, 30, 256),(1, 6, 256),(2, 7, 256),(3, 8, 256),(4, 9, 256),(5, 10, 256),(6, 1, 256),(7, 2, 256),(7, 11, 256),(7, 13, 256),(8, 3, 256),(8, 19, 256),(9, 4, 256),(9, 69, 256),(9, 71, 256),(10, 5, 256),(10, 15, 256),(10, 17, 256),(11, 7, 256),(11, 12, 1),(11, 30, 256),(11, 31, 1),(11, 44, 256),(11, 45, 1),(12, 11, 1),(12, 61, 256),(12, 62, 1),(13, 7, 256),(13, 14, 1),(14, 13, 1),(15, 10, 256),(15, 16, 1),(15, 18, 1),(16, 15, 1),(16, 17, 256),(16, 38, 1),(17, 10, 256),(17, 16, 256),(17, 72, 256),(17, 74, 256),(18, 15, 1),(19, 8, 256),(19, 20, 1),(20, 19, 1),(20, 21, 256),(20, 53, 1),(21, 20, 256),(21, 22, 1),(21, 22, 1),(22, 21, 1),(22, 21, 1),(23, 28, 256),(23, 38, 1),(24, 32, 256),(25, 28, 256),(28, 23, 256),(28, 25, 256),(28, 29, 1),(29, 28, 1),(29, 34, 256),(30, 0, 256),(30, 11, 256),(30, 44, 256),(31, 11, 1),(32, 24, 256),(32, 33, 256),(33, 32, 256),(34, 29, 256),(34, 35, 1),(35, 34, 1),(35, 36, 256),(36, 35, 256),(36, 37, 1),(36, 37, 1),(37, 36, 1),(37, 36, 1),(38, 16, 1),(38, 23, 1),(38, 42, 256),(38, 53, 1),(39, 46, 256),(40, 42, 256),(42, 38, 256),(42, 40, 256),(42, 43, 1),(43, 42, 1),(43, 49, 256),(44, 11, 256),(44, 30, 256),(45, 11, 1),(46, 39, 256),(46, 47, 256),(47, 46, 256),(48, 68, 1),(49, 43, 256),(49, 50, 1),(50, 49, 1),(50, 51, 256),(51, 50, 256),(51, 52, 1),(51, 52, 1),(52, 51, 1),(52, 51, 1),(53, 20, 1),(53, 38, 1),(53, 58, 256),(54, 66, 256),(55, 58, 256),(56, 61, 256),(58, 53, 256),(58, 55, 256),(58, 59, 256),(58, 63, 256),(59, 58, 256),(59, 60, 1),(59, 60, 1),(60, 59, 1),(60, 59, 1),(61, 12, 256),(61, 56, 256),(62, 12, 1),(63, 58, 256),(63, 64, 1),(63, 64, 1),(64, 63, 1),(64, 63, 1),(64, 65, 1),(65, 64, 1),(66, 54, 256),(66, 67, 256),(66, 81, 256),(67, 66, 256),(68, 48, 1),(68, 70, 1),(69, 9, 256),(69, 70, 1),(70, 68, 1),(70, 69, 1),(70, 71, 256),(71, 9, 256),(71, 70, 256),(71, 76, 256),(71, 80, 256),(72, 17, 256),(72, 73, 1),(72, 75, 1),(73, 72, 1),(73, 74, 256),(74, 17, 256),(74, 73, 256),(75, 72, 1),(76, 71, 256),(76, 77, 1),(77, 76, 1),(78, 79, 1),(78, 79, 1),(79, 78, 1),(79, 78, 1),(80, 71, 256),(80, 81, 256),(81, 66, 256),(81, 80, 256),(81, 82, 256),(82, 81, 256)]
G.add_weighted_edges_from(elist)
r = nx.degree_assortativity_coefficient(G)
print("assortativity coefficient = %3.3f"%r)
if os.path.isfile("graphs.gpickle"):
	# Load the graphs from a file
	graphs = nx.read_gpickle("graphs.gpickle")

else:
	graphs = {}
# Define a regular expression pattern to match operators
op_pattern = re.compile(r"^.*?\s+(?P<op>[a-z]+)")
# Get the name of the current file
filename = os.path.basename(__file__)

# Print the filename
#print(filename.split("-"))
filell = filename.split("-")[0] + ".ll"
with open(filell, "r") as file:

	lines = file.readlines()

#print(lines)
for node in G.nodes():
	#print(node)
	#print(lines[node])
	match = op_pattern.match(lines[node])
	if match:
		operator = match.group("op")
		#print(operator)
		G.nodes[node]["operation"] = operator
graphs[filename.split("-")[0]] = G
nx.write_gpickle(graphs, "graphs.gpickle")
