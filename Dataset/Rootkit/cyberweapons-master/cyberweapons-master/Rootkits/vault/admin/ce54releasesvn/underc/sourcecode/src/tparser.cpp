
/*  A Bison parser, made from parser.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	TOKEN	258
#define	IDEN	259
#define	CONSTANT	260
#define	TYPENAME	261
#define	TYPENAME_FUNCTION	262
#define	TEMPLATE_NAME	263
#define	TEMPLATE_NAME_EXPR	264
#define	THIS_CLASSNAME	265
#define	FLOAT	266
#define	DOUBLE	267
#define	UNSIGNED	268
#define	INT	269
#define	SHORT	270
#define	LONG	271
#define	CHAR	272
#define	VOID	273
#define	BOOL	274
#define	TYPEDEF	275
#define	CLASS	276
#define	STRUCT	277
#define	ENUM	278
#define	OPERATOR	279
#define	GOTO	280
#define	UNION	281
#define	STATIC_CAST	282
#define	CONST_CAST	283
#define	DYNAMIC_CAST	284
#define	REINTERPRET_CAST	285
#define	STRUCT_X	286
#define	CLASS_X	287
#define	STRUCT_Y	288
#define	CLASS_Y	289
#define	UNION_Y	290
#define	IF	291
#define	ELSE	292
#define	WHILE	293
#define	DO	294
#define	FOR	295
#define	SWITCH	296
#define	CASE	297
#define	RETURN	298
#define	CONTINUE	299
#define	BREAK	300
#define	DEFAULT	301
#define	NAMESPACE	302
#define	USING	303
#define	TRY	304
#define	CATCH	305
#define	THROW	306
#define	TEMPLATE	307
#define	EXTERN	308
#define	THREEDOT	309
#define	TYPEOF	310
#define	EXPLICIT	311
#define	FRIEND	312
#define	LAMBDA	313
#define	FAKE_INIT_LIST	314
#define	CONST	315
#define	STATIC	316
#define	STDCALL	317
#define	API	318
#define	VIRTUAL	319
#define	PRIVATE	320
#define	PROTECTED	321
#define	PUBLIC	322
#define	COMMA	323
#define	ASSIGN	324
#define	MUL_A	325
#define	DIV_A	326
#define	MOD_A	327
#define	ADD_A	328
#define	MINUS_A	329
#define	SHL_A	330
#define	SHR_A	331
#define	BAND_A	332
#define	BOR_A	333
#define	XOR_A	334
#define	ARITH_IF	335
#define	LOG_OR	336
#define	LOG_AND	337
#define	BIN_OR	338
#define	BIN_XOR	339
#define	BIN_AND	340
#define	EQUAL	341
#define	NOT_EQUAL	342
#define	LESS_THAN	343
#define	LEQ	344
#define	GREATER	345
#define	GEQ	346
#define	LSHIFT	347
#define	RSHIFT	348
#define	PLUS	349
#define	MINUS	350
#define	STAR	351
#define	DIVIDE	352
#define	MODULO	353
#define	MEMBER_ARROW	354
#define	MEMBER_DOT	355
#define	NEW	356
#define	DELETE	357
#define	TYPECAST	358
#define	DEREF	359
#define	ADDR	360
#define	UPLUS	361
#define	UMINUS	362
#define	LOG_NOT	363
#define	BIN_NOT	364
#define	INCR	365
#define	DECR	366
#define	SIZEOF	367
#define	TYPE_CONSTRUCT	368
#define	FUN_CALL	369
#define	ARRAY	370
#define	ARROW	371
#define	DOT	372
#define	BINARY_SCOPE	373
#define	UNARY_SCOPE	374

#line 9 "parser.y"

/* *SJD* essential prototypes for C++ compilation */
int yylex();
int yyerror(const char *s);
#include <stdlib.h>
#define xmalloc malloc

#define MSDOS
#include "common.h"
using namespace Parser;
using namespace Expressions;

#define YYERROR_VERBOSE 1
#define YYDEBUG 1

//#define YYPURE 

/* some shortcuts */
typedef Stack<bool,40> BoolStack;
BoolStack als(false);
BoolStack dcl_stack;
BoolStack typedef_stack;

bool dump_it = false;
PEntry last_type_entry;

PExpr gFunInit = NULL;  // used to flag pure virtual methods...

void dcl_set(bool yes, bool comma_flag) {
 dcl_stack.push(state.in_declaration);
 if (dcl_stack.depth() > 40) outln("runaway dcl stack");
 state.in_declaration = yes;
 als.push(comma_flag);  /* force ',' _not_ to be COMMA */
}

void dcl_reset() { 
 state.in_declaration = dcl_stack.pop();
 als.pop();
}

void force_comma_flag() { 
 als.clear();
 dcl_stack.clear();
 dcl_set(false,false);
}

bool in_arg_list()   {
 return als.TOS();
}

inline void enter_arglist() { dcl_set(false); }

void leave_arglist() { dcl_reset(); }

string tag_name; /* A fiddle */
bool IEF=false;
/*BoolStack ief_stack;*/
void IEF_set()   { /*ief_stack.push(IEF);*/ IEF=true; }
void IEF_reset() { IEF=false; /*ief_stack.pop();*/ } 

void ttpush(TType t) { tpush(AsType(t)); }

void raise_error(string msg) 
{
 int yyerror(const char *);

 if (state.err != "") { msg = state.err; state.err = ""; }
 state.reset();
 als.clear(); als.push(false); 
 yyerror(msg.c_str());
}

bool check_error()
{
 if (state.err != "") {
    raise_error(state.err);
	state.err = "";
	return true;
 }
 return false;
}


#line 93 "parser.y"
typedef union{
  int    val; 
  long   ctype;
  char*  str;
  Entry* entry;
  Expr*  expression;
  ExprList *elist;
  Class *classptr;
  TypeList *typelist;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		566
#define	YYFLAG		-32768
#define	YYNTBASE	129

#define YYTRANSLATE(x) ((unsigned)(x) <= 374 ? yytranslate[x] : 283)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   124,
   125,     2,     2,   128,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   123,   122,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   126,     2,   127,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   120,     2,   121,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     8,     9,    14,    16,    18,    20,
    22,    24,    26,    29,    31,    33,    35,    37,    39,    41,
    43,    45,    47,    49,    51,    53,    55,    57,    59,    61,
    63,    65,    67,    69,    71,    73,    76,    80,    81,    85,
    87,    89,    91,    93,    96,   101,   107,   109,   113,   116,
   118,   121,   124,   127,   132,   135,   137,   139,   142,   144,
   147,   149,   152,   155,   160,   161,   162,   166,   168,   170,
   174,   177,   180,   183,   184,   186,   188,   191,   194,   198,
   200,   202,   204,   206,   208,   210,   212,   217,   219,   222,
   224,   226,   228,   230,   232,   234,   236,   237,   239,   240,
   242,   244,   246,   248,   250,   255,   256,   261,   262,   264,
   267,   275,   279,   282,   286,   290,   293,   296,   298,   299,
   302,   305,   307,   309,   311,   315,   316,   318,   322,   324,
   327,   330,   331,   333,   337,   338,   340,   342,   343,   346,
   348,   349,   355,   358,   362,   364,   366,   368,   372,   374,
   376,   378,   379,   381,   383,   385,   387,   389,   391,   393,
   394,   398,   400,   402,   403,   405,   407,   409,   410,   413,
   414,   422,   425,   428,   429,   433,   438,   439,   440,   446,
   447,   451,   452,   454,   456,   459,   460,   462,   466,   467,
   468,   474,   475,   477,   482,   486,   491,   495,   496,   497,
   503,   506,   509,   512,   514,   515,   517,   519,   521,   523,
   525,   527,   529,   531,   533,   535,   537,   541,   545,   547,
   548,   552,   554,   556,   558,   560,   562,   566,   568,   570,
   574,   578,   582,   586,   590,   594,   598,   602,   605,   608,
   611,   615,   619,   623,   627,   631,   635,   639,   643,   647,
   651,   654,   657,   660,   663,   668,   673,   679,   683,   687,
   688,   693,   697,   701,   704,   707,   713,   716,   721,   724,
   728,   732,   736,   740,   744,   749,   752,   753,   758,   759,
   764,   765,   770,   772,   773,   776,   777,   779,   782,   784,
   788,   790,   794,   796,   800,   801,   803,   804,   807,   810,
   813,   814,   820,   821,   822,   828,   829,   835,   837,   840,
   842,   843,   844,   845,   857,   858,   865,   869,   873,   876,
   879,   882,   885,   886,   890,   894,   895,   900,   902,   905,
   909,   911,   913,   915,   917,   921,   923,   925,   929,   932,
   935,   938,   941,   944,   948,   950,   952,   955,   957,   959,
   961,   963,   966,   970,   972,   976,   979,   982,   984,   986,
   988
};

static const short yyrhs[] = {   130,
     0,     0,   133,     0,   130,   133,     0,     0,   120,   132,
   130,   121,     0,   122,     0,   131,     0,   134,     0,   144,
     0,   149,     0,   195,     0,   219,   122,     0,   135,     0,
   194,     0,   238,     0,   239,     0,   241,     0,   244,     0,
   247,     0,   251,     0,   253,     0,   254,     0,   255,     0,
   256,     0,   210,     0,   213,     0,   272,     0,   271,     0,
   257,     0,   264,     0,   204,     0,   208,     0,   209,     0,
   145,     0,     1,   122,     0,   157,   175,   122,     0,     0,
    20,   136,   137,     0,   134,     0,   144,     0,    10,     0,
   138,     0,   109,   138,     0,    24,   157,   167,   171,     0,
   157,   166,   171,   156,   178,     0,    56,     0,   139,   171,
   122,     0,   141,   122,     0,   143,     0,   142,   143,     0,
   140,   122,     0,   148,   146,     0,   147,   120,   130,   121,
     0,   147,   146,     0,   144,     0,   134,     0,    53,     5,
     0,    53,     0,   141,   131,     0,   150,     0,   142,   150,
     0,   140,   131,     0,   139,   171,   151,   131,     0,     0,
     0,   123,   152,   153,     0,    59,     0,   154,     0,   154,
    68,   153,     0,   265,   230,     0,     4,   230,     0,   157,
   166,     0,     0,    60,     0,   161,     0,   158,   161,     0,
    60,   161,     0,   158,    60,   161,     0,    61,     0,    64,
     0,    62,     0,    63,     0,   124,     0,   125,     0,   266,
     0,    55,   159,   219,   160,     0,   162,     0,    13,   162,
     0,    13,     0,    11,     0,    12,     0,    19,     0,    18,
     0,   192,     0,   197,     0,     0,    13,     0,     0,    14,
     0,    14,     0,    15,     0,    16,     0,    17,     0,   124,
    96,   168,   125,     0,     0,   126,   165,   176,   127,     0,
     0,   168,     0,   163,   171,     0,   124,   214,    96,   168,
   125,   216,   171,     0,    96,   156,   166,     0,   105,   166,
     0,   214,   168,   216,     0,   214,   140,   216,     0,   166,
   164,     0,   163,   164,     0,     1,     0,     0,    96,   167,
     0,   105,   167,     0,     3,     0,   124,     0,   125,     0,
   169,   172,   170,     0,     0,   173,     0,   173,   128,   172,
     0,    54,     0,   155,   178,     0,   166,   178,     0,     0,
   174,     0,   174,   128,   175,     0,     0,   219,     0,    69,
     0,     0,   177,   219,     0,   231,     0,     0,   177,   120,
   179,   182,   121,     0,   123,     5,     0,   120,   182,   121,
     0,   224,     0,   180,     0,   181,     0,   182,   128,   181,
     0,    67,     0,    65,     0,    66,     0,     0,   183,     0,
    21,     0,    22,     0,    26,     0,    34,     0,    33,     0,
    35,     0,     0,   123,   184,   266,     0,     3,     0,     6,
     0,     0,   188,     0,   268,     0,     8,     0,     0,   191,
   189,     0,     0,   185,   190,   187,   120,   193,   130,   121,
     0,   186,   190,     0,   183,   123,     0,     0,    57,   196,
   144,     0,    57,    21,   189,   122,     0,     0,     0,    23,
   198,   201,   199,   200,     0,     0,   120,   203,   121,     0,
     0,     3,     0,     6,     0,     3,   178,     0,     0,   202,
     0,   203,   128,   202,     0,     0,     0,    47,   205,   207,
   206,   131,     0,     0,   189,     0,    48,    47,     6,   122,
     0,    48,   218,   122,     0,    48,   214,     8,   216,     0,
    48,   266,   122,     0,     0,     0,    25,   211,     3,   212,
   122,     0,     3,   123,     0,     4,   123,     0,   267,   118,
     0,   118,     0,     0,    70,     0,    71,     0,    72,     0,
    73,     0,    74,     0,    75,     0,    76,     0,    77,     0,
    78,     0,    79,     0,     4,     0,   214,   218,   216,     0,
   215,     4,   216,     0,   224,     0,     0,   126,   224,   127,
     0,   155,     0,    27,     0,    28,     0,    29,     0,    30,
     0,    88,   221,    90,     0,     5,     0,   218,     0,   124,
   224,   125,     0,   224,    96,   224,     0,   224,    97,   224,
     0,   224,    98,   224,     0,   224,    94,   224,     0,   224,
    95,   224,     0,   224,    85,   224,     0,   224,    83,   224,
     0,    94,   224,     0,    95,   224,     0,   108,   224,     0,
   224,    88,   224,     0,   224,    90,   224,     0,   224,    89,
   224,     0,   224,    91,   224,     0,   224,    86,   224,     0,
   224,    87,   224,     0,   224,    82,   224,     0,   224,    81,
   224,     0,   224,    69,   224,     0,   224,   217,   224,     0,
   224,   110,     0,   110,   224,     0,   224,   111,     0,   111,
   224,     0,   112,   124,   224,   125,     0,   112,   124,   221,
   125,     0,   224,    80,   224,   123,   224,     0,   224,    68,
   224,     0,   101,   161,   220,     0,     0,   101,     7,   225,
   230,     0,   101,   161,   230,     0,   102,   229,   224,     0,
    96,   224,     0,   105,   224,     0,   222,   223,   124,   224,
   125,     0,     7,   230,     0,   124,   221,   125,   224,     0,
   109,   224,     0,   224,    92,   224,     0,   224,    93,   224,
     0,   224,   105,   224,     0,   224,    84,   224,     0,   224,
   105,   224,     0,   224,   126,   224,   127,     0,   224,   230,
     0,     0,   224,   117,   226,     3,     0,     0,   224,   116,
   227,     3,     0,     0,   224,    99,   228,     3,     0,     1,
     0,     0,   126,   127,     0,     0,   230,     0,   124,   125,
     0,   231,     0,   169,   232,   170,     0,   224,     0,   232,
   128,   224,     0,     1,     0,   124,   219,   125,     0,     0,
   219,     0,     0,   236,   133,     0,    36,   233,     0,   237,
   235,     0,     0,   237,   235,    37,   240,   235,     0,     0,
     0,    38,   242,   233,   243,   235,     0,     0,    39,   245,
   235,    38,   233,     0,   122,     0,   219,   122,     0,   134,
     0,     0,     0,     0,    40,   124,   248,   246,   249,   234,
   122,   234,   125,   250,   235,     0,     0,    41,   124,   219,
   125,   252,   131,     0,    43,   234,   122,     0,    42,   219,
   123,     0,    46,   123,     0,    45,   122,     0,    44,   122,
     0,   258,   263,     0,     0,    49,   259,   260,     0,   120,
   130,   121,     0,     0,    50,   171,   262,   260,     0,   261,
     0,   261,   263,     0,    51,   234,   122,     0,     7,     0,
   268,     0,     6,     0,   268,     0,   214,   266,   216,     0,
     7,     0,   269,     0,   214,   267,   216,     0,     8,   278,
     0,     9,   278,     0,    52,   278,     0,   270,   141,     0,
   274,   275,     0,   274,   275,   278,     0,    31,     0,    32,
     0,   270,   273,     0,     3,     0,     8,     0,    88,     0,
    90,     0,   276,   277,     0,   276,   279,   277,     0,   282,
     0,   279,   128,   282,     0,    21,     3,     0,    21,     6,
     0,   280,     0,   155,     0,     5,     0,   281,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   152,   154,   155,   156,   159,   162,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
   179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
   189,   190,   191,   192,   193,   194,   198,   207,   211,   214,
   216,   220,   231,   233,   240,   248,   253,   257,   266,   275,
   276,   277,   290,   292,   293,   296,   298,   301,   305,   311,
   314,   316,   318,   322,   329,   330,   333,   337,   339,   340,
   343,   352,   361,   366,   367,   370,   372,   373,   374,   377,
   379,   380,   381,   384,   387,   390,   391,   392,   393,   394,
   395,   396,   397,   398,   399,   400,   403,   404,   406,   407,
   410,   411,   412,   417,   420,   424,   427,   430,   431,   432,
   433,   436,   437,   438,   439,   441,   442,   443,   447,   448,
   449,   452,   456,   459,   462,   466,   467,   468,   469,   475,
   485,   495,   496,   497,   500,   501,   507,   510,   511,   515,
   518,   519,   522,   530,   533,   534,   537,   538,   547,   549,
   550,   553,   553,   556,   556,   556,   559,   560,   561,   564,
   565,   569,   571,   574,   575,   576,   580,   583,   583,   588,
   598,   605,   609,   613,   615,   615,   624,   626,   631,   634,
   635,   638,   639,   640,   643,   650,   651,   652,   658,   660,
   666,   668,   669,   672,   683,   686,   688,   693,   694,   695,
   698,   700,   706,   720,   724,   728,   729,   729,   729,   729,
   730,   730,   730,   730,   730,   733,   734,   736,   740,   744,
   745,   748,   752,   752,   752,   752,   755,   760,   762,   764,
   766,   767,   768,   769,   770,   771,   772,   774,   775,   777,
   778,   779,   780,   781,   782,   783,   784,   785,   787,   788,
   790,   791,   792,   793,   797,   801,   802,   803,   804,   807,
   808,   810,   812,   813,   814,   816,   819,   822,   826,   827,
   828,   829,   830,   831,   833,   836,   838,   841,   843,   846,
   849,   852,   854,   857,   858,   861,   862,   865,   866,   869,
   875,   877,   878,   882,   887,   888,   891,   894,   897,   901,
   905,   908,   911,   913,   914,   918,   921,   924,   925,   926,
   929,   931,   932,   934,   939,   941,   943,   947,   950,   954,
   958,   964,   969,   974,   976,   983,   988,   990,   992,   995,
  1002,  1004,  1008,  1010,  1011,  1015,  1017,  1018,  1021,  1026,
  1032,  1037,  1045,  1052,  1060,  1061,  1064,  1069,  1070,  1074,
  1076,  1079,  1081,  1085,  1087,  1090,  1092,  1095,  1103,  1108,
  1109
};

static const char * const yytname[] = {   "$","error","$undefined.","TOKEN",
"IDEN","CONSTANT","TYPENAME","TYPENAME_FUNCTION","TEMPLATE_NAME","TEMPLATE_NAME_EXPR",
"THIS_CLASSNAME","FLOAT","DOUBLE","UNSIGNED","INT","SHORT","LONG","CHAR","VOID",
"BOOL","TYPEDEF","CLASS","STRUCT","ENUM","OPERATOR","GOTO","UNION","STATIC_CAST",
"CONST_CAST","DYNAMIC_CAST","REINTERPRET_CAST","STRUCT_X","CLASS_X","STRUCT_Y",
"CLASS_Y","UNION_Y","IF","ELSE","WHILE","DO","FOR","SWITCH","CASE","RETURN",
"CONTINUE","BREAK","DEFAULT","NAMESPACE","USING","TRY","CATCH","THROW","TEMPLATE",
"EXTERN","THREEDOT","TYPEOF","EXPLICIT","FRIEND","LAMBDA","FAKE_INIT_LIST","CONST",
"STATIC","STDCALL","API","VIRTUAL","PRIVATE","PROTECTED","PUBLIC","COMMA","ASSIGN",
"MUL_A","DIV_A","MOD_A","ADD_A","MINUS_A","SHL_A","SHR_A","BAND_A","BOR_A","XOR_A",
"ARITH_IF","LOG_OR","LOG_AND","BIN_OR","BIN_XOR","BIN_AND","EQUAL","NOT_EQUAL",
"LESS_THAN","LEQ","GREATER","GEQ","LSHIFT","RSHIFT","PLUS","MINUS","STAR","DIVIDE",
"MODULO","MEMBER_ARROW","MEMBER_DOT","NEW","DELETE","TYPECAST","DEREF","ADDR",
"UPLUS","UMINUS","LOG_NOT","BIN_NOT","INCR","DECR","SIZEOF","TYPE_CONSTRUCT",
"FUN_CALL","ARRAY","ARROW","DOT","BINARY_SCOPE","UNARY_SCOPE","'{'","'}'","';'",
"':'","'('","')'","'['","']'","','","program","statement_list","block","@1",
"statement","declaration","typedef_stmt","@2","declaration_stmt","this_classname",
"construct_destruct","conversion_operator","function_front","explicit_mod","ctor_dtor_dcl",
"function_declaration","extern_c_declaration","any_declaration","extern_c","extern_qualifier",
"function_definition","ctor_dtor","poss_class_init_list","@3","class_init_list",
"class_init_item","type_expr","poss_const","mod_type_name","modifiers","open_parens",
"close_parens","type_name","integer","pointer_expr","array_expr","@4","tname_expr",
"tname_exp2","token","begin_list","end_list","arg_list","type_list","type_expr_init",
"init_tname_expr","tname_expr_list","poss_int_const","init_assign","poss_initialization",
"@5","brace_expr","brace_item","brace_list","access_modifier","poss_access_modifier",
"class_or_struct","class_or_struct_ex","poss_derived","token_or_typename","class_name",
"class_id","@6","class_declaration","@7","access_specifier","friend_declaration",
"@8","enum_stmt","@9","@10","poss_enum_list","poss_tag","enum_item","enum_list",
"namespace_declaration","@11","@12","poss_class_name","using_directive","using_declaration",
"goto_stmt","@13","@14","goto_label","scope","global_scope","end_scope","assign_op",
"scoped_name","expr","poss_size","type_expression","typecast_type","type_bracket",
"_expr","@15","@16","@17","@18","poss_array","function_arg_list","init_list",
"expr_list","condition","poss_expr","controlled_statement","@19","if_front",
"if_stmt","if_else_stmt","@20","while_stmt","@21","@22","do_stmt","@23","for_init",
"for_stmt","@24","@25","@26","switch_stmt","@27","return_stmt","case_label",
"break_stmt","continue_stmt","try_catch_stmt","try_block","@28","except_block",
"catch_block","@29","catch_block_list","throw_stmt","typename_function","typename_class",
"typename_expr","template_class","template_expr","template_header","template_function_declaration",
"template_class_declaration","struct_or_class_x","template_class_header","template_class_name",
"begin_templ_list","end_templ_list","template_type_list","templ_item_list","class_item",
"class_parm","templ_item","class_item"
};
#endif

static const short yyr1[] = {     0,
   129,   130,   130,   130,   132,   131,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   134,   136,   135,   137,
   137,   138,   139,   139,   140,   141,   142,   143,   144,   144,
   144,   144,   145,   145,   145,   146,   146,   147,   148,   149,
   149,   149,   149,   150,   151,   152,   151,   153,   153,   153,
   154,   154,   155,   156,   156,   157,   157,   157,   157,   158,
   158,   158,   158,   159,   160,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,    -1,    -1,    -1,    -1,
   162,   162,   162,   162,   163,   165,   164,   166,   166,   166,
   166,   166,   166,   166,   166,   166,   166,   166,   167,   167,
   167,   168,   169,   170,   171,   172,   172,   172,   172,   173,
   174,   175,   175,   175,   176,   176,   177,   178,   178,   178,
   179,   178,   178,   180,   181,   181,   182,   182,   183,   183,
   183,   184,   184,   185,   185,   185,   186,   186,   186,   187,
   187,   188,   188,   189,   189,   189,   189,   191,   190,   193,
   192,   192,   194,   196,   195,   195,   198,   199,   197,   200,
   200,   201,   201,   201,   202,   203,   203,   203,   205,   206,
   204,   207,   207,   208,   209,   209,   209,   211,   212,   210,
   213,   213,   214,   215,   216,   217,   217,   217,   217,   217,
   217,   217,   217,   217,   217,   218,   218,   218,   219,   220,
   220,   221,   222,   222,   222,   222,   223,   224,   224,   224,
   224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
   224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
   224,   224,   224,   224,   224,   224,   224,   224,   224,   225,
   224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
   224,   224,   224,   224,   224,   224,   226,   224,   227,   224,
   228,   224,   224,   229,   229,    -1,    -1,   230,   230,   231,
   232,   232,   232,   233,   234,   234,   236,   235,   237,   238,
   240,   239,   242,   243,   241,   245,   244,   246,   246,   246,
   248,   249,   250,   247,   252,   251,   253,   254,   254,   255,
   256,   257,   259,   258,   260,   262,   261,   263,   263,   264,
   265,   265,   266,   266,   266,   267,   267,   267,   268,   269,
   270,   271,   272,   272,   273,   273,   274,   275,   275,   276,
   277,   278,   278,   279,   279,   280,   280,   281,   282,   282,
   282
};

static const short yyr2[] = {     0,
     1,     0,     1,     2,     0,     4,     1,     1,     1,     1,
     1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     2,     3,     0,     3,     1,
     1,     1,     1,     2,     4,     5,     1,     3,     2,     1,
     2,     2,     2,     4,     2,     1,     1,     2,     1,     2,
     1,     2,     2,     4,     0,     0,     3,     1,     1,     3,
     2,     2,     2,     0,     1,     1,     2,     2,     3,     1,
     1,     1,     1,     1,     1,     1,     4,     1,     2,     1,
     1,     1,     1,     1,     1,     1,     0,     1,     0,     1,
     1,     1,     1,     1,     4,     0,     4,     0,     1,     2,
     7,     3,     2,     3,     3,     2,     2,     1,     0,     2,
     2,     1,     1,     1,     3,     0,     1,     3,     1,     2,
     2,     0,     1,     3,     0,     1,     1,     0,     2,     1,
     0,     5,     2,     3,     1,     1,     1,     3,     1,     1,
     1,     0,     1,     1,     1,     1,     1,     1,     1,     0,
     3,     1,     1,     0,     1,     1,     1,     0,     2,     0,
     7,     2,     2,     0,     3,     4,     0,     0,     5,     0,
     3,     0,     1,     1,     2,     0,     1,     3,     0,     0,
     5,     0,     1,     4,     3,     4,     3,     0,     0,     5,
     2,     2,     2,     1,     0,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     3,     3,     1,     0,
     3,     1,     1,     1,     1,     1,     3,     1,     1,     3,
     3,     3,     3,     3,     3,     3,     3,     2,     2,     2,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     2,     2,     2,     2,     4,     4,     5,     3,     3,     0,
     4,     3,     3,     2,     2,     5,     2,     4,     2,     3,
     3,     3,     3,     3,     4,     2,     0,     4,     0,     4,
     0,     4,     1,     0,     2,     0,     1,     2,     1,     3,
     1,     3,     1,     3,     0,     1,     0,     2,     2,     2,
     0,     5,     0,     0,     5,     0,     5,     1,     2,     1,
     0,     0,     0,    11,     0,     6,     3,     3,     2,     2,
     2,     2,     0,     3,     3,     0,     4,     1,     2,     3,
     1,     1,     1,     1,     3,     1,     1,     3,     2,     2,
     2,     2,     2,     3,     1,     1,     2,     1,     1,     1,
     1,     2,     3,     1,     3,     2,     2,     1,     1,     1,
     1
};

static const short yydefact[] = {     0,
   283,     0,   216,   228,   333,   336,     0,     0,    42,    91,
    92,    90,   101,   102,   103,   104,    94,    93,    38,   154,
   155,   177,     0,   198,   156,   223,   224,   225,   226,   158,
   157,   159,     0,   303,   306,     0,     0,     0,     0,     0,
     0,     0,   189,     0,   323,     0,     0,    59,     0,    47,
   174,     0,    80,    82,    83,    81,   150,   151,   149,     0,
     0,     0,     0,   284,     0,     0,     0,     0,     0,     0,
   204,     5,     7,     0,     0,     8,     3,     9,    14,    43,
     0,     0,     0,     0,    50,    10,    35,     0,     0,    11,
    61,     0,     0,    76,    88,     0,   168,   168,    95,    15,
    12,    96,    32,    33,    34,    26,    27,     0,     0,   229,
     0,     0,   219,   297,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    30,     0,    31,    86,     0,   334,
   337,     0,    29,    28,     0,    36,   201,   202,   123,     0,
   267,   289,   350,     0,   339,   340,    89,     0,   182,   336,
   119,     0,     0,     0,   299,     0,   297,   311,     0,   283,
   216,     0,     0,     0,   296,     0,   321,   320,   319,   164,
     0,     0,     0,     0,     0,     0,   341,    58,    84,     0,
   164,     0,    78,   238,   239,   264,   260,   220,     0,     0,
   265,   240,    44,   269,   252,   254,     0,     0,   222,     0,
     0,     0,     4,   123,   126,    65,    52,    63,    49,    60,
     0,    51,    62,     0,    57,     0,     0,     0,     0,    56,
    55,    53,   118,   122,    74,     0,     0,     0,   138,   109,
   133,     0,     0,     0,    77,   173,   160,   164,   172,   205,
   205,     0,   205,    13,     0,     0,     0,     0,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   281,     0,   251,
   253,   279,   277,     0,     0,   276,   300,     0,     0,   328,
   322,   203,   345,   346,   342,     0,   347,   348,   349,   343,
   288,   283,   291,     0,   360,   154,   351,   359,   352,     0,
   358,   361,   354,    40,    39,    41,   183,   184,   178,   119,
   119,     0,   199,     0,   304,     0,     0,     0,   318,   317,
   162,   163,   167,   165,   193,   190,   166,     0,   205,   195,
   197,     0,   324,   330,     0,     0,   175,     0,     0,   259,
   262,   285,   263,     0,     0,     0,    73,     0,   230,   129,
   138,     0,   127,    48,    66,     0,     0,     0,    75,     0,
   113,     0,     0,   106,   117,   110,   137,     0,   116,     0,
    74,     0,   131,   140,     0,    37,   205,   205,     0,    79,
   152,     0,   169,   217,   335,   338,   218,     0,     0,   258,
   249,     0,   248,   247,   237,   273,   236,   245,   246,   241,
   243,   242,   244,   270,   271,   234,   235,   231,   232,   233,
     0,   272,     0,     0,     0,   250,   301,   298,   326,   329,
     0,   344,   124,     0,   290,   356,   357,     0,   353,   180,
   120,   121,    45,     0,   294,   297,     0,   308,   310,     0,
     0,   312,   315,     0,   194,   196,     0,    85,    87,   176,
   261,     0,   256,   255,     6,   268,   130,   125,   126,     0,
    64,    54,   112,     0,     0,     0,   143,   138,   141,   139,
   138,   134,   115,   114,   153,     0,   170,   227,     0,     0,
   282,   280,   278,   275,   297,     0,   292,   355,   186,   179,
   200,   305,   307,   309,     0,     0,   191,   325,   221,   128,
     0,   331,    68,    67,    69,     0,   332,   105,     0,     0,
   136,    46,     0,   161,     0,   266,   257,   302,   327,   138,
   187,     0,     0,   316,    72,     0,    71,   205,   107,     0,
   146,   147,     0,   145,     0,   185,   181,     0,     0,    70,
     0,     0,   142,     0,   171,   188,     0,   111,   144,   148,
   313,   297,   314,     0,     0,     0
};

static const short yydefgoto[] = {   564,
    75,    76,   198,    77,    78,    79,   148,   315,    80,    81,
    82,    83,    84,    85,    86,    87,   221,    88,    89,    90,
    91,   366,   470,   514,   515,   199,   370,    92,    93,   180,
   459,    94,    95,   228,   379,   476,   481,   322,   230,   140,
   435,   381,   362,   363,   231,   232,   520,   382,   383,   523,
   541,   542,   543,    96,   486,    97,    98,   392,   334,   335,
   237,   238,    99,   525,   100,   101,   182,   102,   149,   440,
   500,   319,   531,   532,   103,   170,   454,   336,   104,   105,
   106,   153,   444,   107,   163,   109,   394,   285,   110,   111,
   350,   201,   112,   246,   113,   348,   424,   423,   421,   190,
   286,   142,   304,   155,   166,   287,   288,   114,   115,   116,
   495,   117,   156,   446,   118,   157,   452,   119,   327,   505,
   562,   120,   506,   121,   122,   123,   124,   125,   126,   175,
   343,   290,   496,   291,   127,   516,   128,   129,   130,   131,
   132,   133,   134,   297,   135,   300,   144,   309,   145,   310,
   311,   312,   313
};

static const short yypact[] = {   591,
   -77,   -47,    11,-32768,-32768,   -34,    22,    22,-32768,-32768,
-32768,   214,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  3089,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    31,-32768,-32768,    39,    64,  2099,  1893,     2,
    53,    76,-32768,   202,-32768,  1893,    22,   198,    83,-32768,
   192,   655,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2099,
  2099,  2099,   780,    90,  2099,  2099,  1925,  2099,  2099,   108,
-32768,-32768,-32768,  1855,   716,-32768,-32768,-32768,-32768,-32768,
   119,    51,   172,     7,-32768,-32768,-32768,  2236,  2351,-32768,
-32768,   405,  1798,-32768,-32768,   121,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   216,   246,-32768,
   135,   189,  2850,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   235,-32768,-32768,   168,-32768,
-32768,  2971,-32768,-32768,   143,-32768,-32768,-32768,   164,  2211,
-32768,-32768,-32768,  2411,-32768,-32768,-32768,  2351,   117,-32768,
     1,   247,   290,  2099,-32768,    31,-32768,-32768,  2099,-32768,
-32768,  2099,    94,   174,-32768,   180,-32768,-32768,-32768,   234,
   302,   346,   195,   197,   204,   200,-32768,-32768,-32768,  2099,
   234,  2351,-32768,   374,   374,   374,   207,   187,   199,  2099,
   374,   374,-32768,   374,   374,   374,  1855,  1001,-32768,   392,
   203,  2614,-32768,-32768,  3030,    72,-32768,-32768,-32768,-32768,
   322,-32768,-32768,  1001,-32768,   119,   211,   213,     7,-32768,
-32768,-32768,-32768,-32768,   276,   300,    18,   188,     3,-32768,
   209,   218,   161,   655,-32768,-32768,   215,   234,-32768,-32768,
-32768,   168,-32768,-32768,  3089,   219,  2099,  2099,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2099,  2099,
  2099,  2099,  2099,  2099,  2099,  2099,  2099,  2099,  2099,  2099,
  2099,  2099,  2099,  2099,  2099,  2099,  2099,-32768,  2099,-32768,
-32768,-32768,-32768,  2099,  2099,-32768,   307,  1611,   119,   235,
-32768,-32768,-32768,-32768,-32768,    78,-32768,-32768,-32768,    22,
-32768,-32768,  2850,    25,-32768,   178,-32768,-32768,-32768,   -28,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,     1,
     1,   119,-32768,   222,-32768,   313,  1733,   233,-32768,-32768,
-32768,-32768,    22,-32768,-32768,-32768,-32768,   237,    22,-32768,
-32768,  1001,-32768,-32768,   236,   240,-32768,   -34,  2099,-32768,
-32768,-32768,   374,   238,  2673,  1123,   239,  2099,-32768,-32768,
    13,   241,   243,-32768,-32768,   244,  1245,   250,-32768,   300,
   239,   365,    42,-32768,-32768,-32768,-32768,   369,-32768,   838,
   276,  2037,-32768,-32768,   405,-32768,-32768,-32768,   309,-32768,
   125,   255,-32768,-32768,-32768,-32768,-32768,   287,  2099,  3085,
  3085,  2732,  3130,  3174,  3217,  3259,  3300,  3339,  3339,  3374,
  3374,  3374,  3374,   975,   975,   439,   439,   332,   332,   332,
   375,  3300,   379,   380,  2434,  2850,-32768,-32768,-32768,-32768,
   188,-32768,-32768,  2099,-32768,-32768,-32768,  2617,-32768,   264,
-32768,-32768,-32768,   265,-32768,-32768,    31,-32768,-32768,   405,
   269,-32768,-32768,   244,-32768,-32768,  1367,-32768,-32768,-32768,
-32768,  2494,-32768,-32768,-32768,   374,-32768,-32768,  3030,    50,
-32768,-32768,   239,   261,   365,   466,-32768,    13,-32768,-32768,
     3,-32768,-32768,-32768,-32768,   247,-32768,-32768,  2791,  2099,
-32768,-32768,-32768,-32768,-32768,   204,  2850,-32768,   391,-32768,
-32768,-32768,-32768,-32768,  1893,   244,-32768,-32768,-32768,-32768,
   -34,-32768,-32768,-32768,   329,   -34,-32768,-32768,   275,   277,
-32768,-32768,  2068,-32768,  1001,-32768,  2850,-32768,-32768,    13,
-32768,   -50,   280,-32768,-32768,    50,-32768,-32768,-32768,  2068,
-32768,-32768,   -10,  2850,  1489,-32768,-32768,   391,   876,-32768,
   119,    -9,-32768,  2068,-32768,-32768,   278,-32768,-32768,-32768,
-32768,-32768,-32768,   407,   409,-32768
};

static const short yypgoto[] = {-32768,
  -186,   -62,-32768,   -69,   -46,-32768,-32768,-32768,   -45,   -52,
   -57,   -33,   -41,   -60,   147,-32768,   321,-32768,-32768,-32768,
   327,-32768,-32768,  -123,-32768,  -128,    34,    -4,-32768,-32768,
-32768,   -13,   406,-32768,   191,-32768,   -79,   -82,  -195,   -71,
    55,   -74,   -49,-32768,-32768,    36,-32768,-32768,  -343,-32768,
-32768,  -127,  -111,    41,-32768,-32768,-32768,-32768,-32768,  -152,
   337,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  -118,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,     0,-32768,  -208,-32768,    -3,   -37,
-32768,  -151,-32768,-32768,    -1,-32768,-32768,-32768,-32768,-32768,
    -2,  -199,-32768,  -148,   -43,  -146,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   -56,-32768,-32768,   146,-32768,-32768,   -39,   -68,  -155,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   131,     6,-32768,
-32768,-32768,     8
};


#define	YYLAST		3500


static const short yytable[] = {   108,
   164,   165,   176,   141,   174,   203,   206,   325,   165,   205,
   326,   356,   229,   146,   337,   308,     9,   467,   151,   208,
   210,   193,   152,   212,   150,   337,     8,   367,   346,   384,
   217,   217,   395,   396,   397,   216,   216,   388,   183,   242,
   173,   215,   215,   172,   136,   354,   219,   219,   150,   188,
     8,   152,   177,   511,   218,   218,   512,     7,   184,   185,
   186,   307,   152,   191,   192,   194,   195,   196,   241,   200,
   547,   377,   202,   108,   108,   137,   361,   548,   223,   235,
   224,   377,   337,   242,   150,   393,     8,   152,   152,   139,
   217,   233,   152,   398,   242,   216,   320,   161,   295,   438,
   150,   314,     8,   242,   240,   321,   219,   108,   513,   143,
   553,   559,   241,   372,   218,   211,   324,   554,   554,   317,
   357,   328,   318,   167,   217,   378,   204,   296,   374,   216,
   456,   152,   241,   138,   522,   378,   204,   475,   303,   200,
   219,   368,   345,   152,   205,   298,   371,   152,   218,   433,
   299,   152,   434,   376,   154,   457,   205,   380,   212,   240,
   194,   384,   158,   224,   242,   193,   216,   150,   240,     8,
    72,   108,   207,   225,   168,   387,   474,   296,   483,   484,
   436,   152,   226,   437,    23,   351,   546,   159,   353,    57,
    58,    59,   200,   364,   365,   355,   108,   108,   169,   233,
   200,   227,   178,  -108,   152,   161,   179,     5,   150,     7,
     8,    71,   181,   108,   429,   189,   431,   205,   428,   161,
   390,     5,   150,     7,     8,   233,   373,    13,    14,    15,
    16,   197,   389,   152,   220,   220,   331,   441,   442,   332,
   200,   333,   204,   236,   152,   400,   401,   443,   171,   243,
   205,   361,     5,   150,     7,     8,   244,   402,   403,   404,
   405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
   415,   416,   417,   418,   419,   420,   245,   422,   384,   519,
   449,   384,   425,   426,   289,   292,   203,   108,   301,   451,
   473,    72,   323,   209,   316,   233,   329,   203,   503,   502,
   223,   330,   224,   471,   242,   432,   150,   338,     8,   308,
   139,   204,   349,   374,   517,   150,   340,     8,   341,    71,
   242,   344,   450,   342,  -336,   352,   108,   358,   347,   551,
   384,     9,   207,    71,   209,   369,   385,   391,   545,   386,
   361,   108,   399,   427,   480,   461,   445,   462,   528,   161,
   447,     5,   150,   339,     8,   108,   466,   453,   455,   205,
   458,   460,   463,    72,   374,   433,   108,   224,  -108,   233,
   469,   364,   389,   477,   487,   200,   488,   491,   303,   108,
   517,   492,   493,   499,   233,   518,   501,   203,   389,  -108,
   504,   507,   223,   530,   224,   225,   536,   489,   150,   538,
     8,   549,   561,   539,   226,   223,   565,   224,   566,   222,
   213,   150,   550,     8,   478,   563,   468,   147,   375,   510,
   482,  -108,  -108,   227,  -108,  -108,   560,  -108,   552,   556,
   278,   485,   497,   200,   239,   430,   279,   152,   521,   529,
   439,   280,   281,   534,     0,   498,   524,   282,   283,   233,
     0,     0,     0,     0,     0,   139,   108,   284,     0,     0,
  -108,   533,     0,    71,   200,     0,   160,   165,   152,   161,
     4,     0,     6,  -108,     8,   203,   558,     0,   279,   205,
     0,  -108,     0,   280,   281,   152,     0,   225,   527,   282,
   283,     0,    26,    27,    28,    29,   226,   139,     0,   284,
   225,     0,     0,     0,     0,   557,     0,     0,   535,   226,
     0,   165,     0,   537,  -108,   227,  -108,  -108,     0,  -108,
     0,   544,     0,     0,   108,     0,  -108,  -108,   227,     0,
  -108,     0,  -108,     0,   275,   276,   277,   278,   544,     0,
     0,     0,     0,   279,   108,     0,     0,     0,   280,   281,
     0,     0,   544,     0,   282,   283,     0,     0,     0,    60,
    61,    62,   139,     0,   284,     0,    63,    64,     0,     0,
    65,     0,     0,    66,   162,    68,    69,    70,     0,     0,
     0,     0,     0,    71,     0,     0,     0,     0,     0,    74,
    -2,     1,  -135,     2,     3,     4,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,     0,     0,    30,    31,    32,    33,     0,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
     0,    46,    47,    48,     0,    49,    50,    51,     0,     0,
    52,    53,    54,    55,    56,    57,    58,    59,     0,     0,
     5,   150,     7,     8,     0,    10,    11,    12,    13,    14,
    15,    16,    17,    18,     0,    20,    21,    22,     0,     0,
    25,     0,     0,     0,    60,    61,    62,    30,    31,    32,
     0,    63,    64,     0,     0,    65,     0,     0,    66,    67,
    68,    69,    70,     0,     0,     0,     0,     0,    71,    49,
    72,     0,    73,     0,    74,    -1,     1,     0,     2,     3,
     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,     0,     0,    30,    31,
    32,    33,     0,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,     0,    46,    47,    48,     0,
    49,    50,    51,     0,     0,    52,    53,    54,    55,    56,
    57,    58,    59,     0,     0,     5,   187,     7,     8,     0,
    10,    11,    12,    13,    14,    15,    16,    17,    18,     0,
    20,    21,    22,     0,     0,    25,     0,     0,     0,    60,
    61,    62,    30,    31,    32,     0,    63,    64,     0,     0,
    65,     0,     0,    66,    67,    68,    69,    70,     0,     0,
     0,     0,     0,    71,    49,    72,     0,    73,   302,    74,
     0,   161,     4,     5,     6,     7,     8,     0,    10,    11,
    12,    13,    14,    15,    16,    17,    18,     0,    20,    21,
    22,     0,     0,    25,    26,    27,    28,    29,     0,     0,
    30,    31,    32,     0,     0,     0,   160,     0,     0,   161,
     4,     0,     6,     0,     8,     0,     0,     0,     0,     0,
     0,   360,    49,     0,     0,     0,     0,    52,    53,    54,
    55,    56,    26,    27,    28,    29,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    60,    61,    62,     0,     0,     0,     0,    63,    64,
     0,     0,    65,     0,     0,    66,   162,    68,    69,    70,
     0,     0,     0,     0,     0,    71,     0,     0,     0,     0,
     0,    74,  -126,     0,     0,     0,     0,     0,     0,    60,
    61,    62,     0,     0,     0,     0,    63,    64,     0,     0,
    65,     0,     0,    66,   162,    68,    69,    70,     0,     0,
     0,     0,     0,    71,     0,     0,     0,     0,     0,    74,
  -295,     1,     0,     2,     3,     4,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,     0,     0,    30,    31,    32,    33,     0,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
     0,    46,    47,    48,     0,    49,    50,    51,     0,     0,
    52,    53,    54,    55,    56,    57,    58,    59,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,     0,     0,     0,   280,   281,     0,     0,     0,     0,
   282,   283,     0,     0,    60,    61,    62,     0,   139,     0,
   284,    63,    64,     0,     0,    65,     0,     0,    66,    67,
    68,    69,    70,     0,     0,     0,     0,     0,    71,     0,
    72,    -2,    73,     1,    74,     2,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,     0,     0,    30,    31,    32,    33,     0,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,     0,    46,    47,    48,     0,    49,    50,    51,
     0,     0,    52,    53,    54,    55,    56,    57,    58,    59,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    60,    61,    62,     0,
     0,     0,     0,    63,    64,     0,     0,    65,     0,     0,
    66,    67,    68,    69,    70,     0,     0,     0,     0,     0,
    71,     0,    72,   465,    73,     1,    74,     2,     3,     4,
     5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,     0,     0,    30,    31,    32,
    33,     0,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,     0,    46,    47,    48,     0,    49,
    50,    51,     0,     0,    52,    53,    54,    55,    56,    57,
    58,    59,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    60,    61,
    62,     0,     0,     0,     0,    63,    64,     0,     0,    65,
     0,     0,    66,    67,    68,    69,    70,     0,     0,     0,
     0,     0,    71,     0,    72,   472,    73,     1,    74,     2,
     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,     0,     0,    30,
    31,    32,    33,     0,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,     0,    46,    47,    48,
     0,    49,    50,    51,     0,     0,    52,    53,    54,    55,
    56,    57,    58,    59,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    60,    61,    62,     0,     0,     0,     0,    63,    64,     0,
     0,    65,     0,     0,    66,    67,    68,    69,    70,     0,
     0,     0,     0,     0,    71,     0,    72,   508,    73,     1,
    74,     2,     3,     4,     5,     6,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,     0,
     0,    30,    31,    32,    33,     0,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,     0,    46,
    47,    48,     0,    49,    50,    51,     0,     0,    52,    53,
    54,    55,    56,    57,    58,    59,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    60,    61,    62,     0,     0,     0,     0,    63,
    64,     0,     0,    65,     0,     0,    66,    67,    68,    69,
    70,     0,     0,     0,     0,     0,    71,     0,    72,   555,
    73,     1,    74,     2,     3,     4,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,     0,     0,    30,    31,    32,    33,     0,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
     0,    46,    47,    48,     0,    49,    50,    51,     0,     0,
    52,    53,    54,    55,    56,    57,    58,    59,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    60,    61,    62,     0,     0,     0,
     0,    63,    64,     0,     0,    65,     0,     0,    66,    67,
    68,    69,    70,     0,     0,     0,     0,     0,    71,     0,
    72,     0,    73,   160,    74,     0,   161,     4,     5,     6,
     7,     8,     0,    10,    11,    12,    13,    14,    15,    16,
    17,    18,     0,    20,    21,    22,     0,     0,    25,    26,
    27,    28,    29,     0,     0,    30,    31,    32,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    49,     0,     0,
     0,     0,    52,    53,    54,    55,    56,     0,     0,     0,
     0,     0,     0,     5,   150,     7,     8,     0,    10,    11,
    12,    13,    14,    15,    16,    17,    18,     0,    20,    21,
    22,     0,     0,    25,     0,     0,    60,    61,    62,     0,
    30,    31,    32,    63,    64,     0,     0,    65,     0,     0,
    66,   162,    68,    69,    70,     0,     0,     0,     0,     0,
    71,     0,    49,     0,   448,   160,    74,   234,   161,     4,
     5,     6,     7,     8,     0,    10,    11,    12,    13,    14,
    15,    16,    17,    18,     0,    20,    21,    22,     0,     0,
    25,    26,    27,    28,    29,     0,     0,    30,    31,    32,
     0,     0,     0,   160,     0,     0,   161,     4,     0,     6,
     0,     8,     0,     0,     0,     0,     0,     0,     0,    49,
     0,     0,     0,     0,    52,    53,    54,    55,    56,    26,
    27,    28,    29,     0,     0,   160,     0,     0,   161,     4,
     0,     6,     0,     8,     9,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    60,    61,
    62,    26,    27,    28,    29,    63,    64,     0,     0,    65,
     0,     0,    66,   162,    68,    69,    70,     0,     0,     0,
     0,     0,    71,     0,     0,     0,     0,     0,    74,     0,
     0,     0,     0,     0,     0,     0,    60,    61,    62,     0,
     0,     0,     0,    63,    64,     0,     0,    65,     0,     0,
    66,   162,    68,    69,    70,     0,     0,     0,     0,     0,
    71,     0,     0,     0,  -295,     0,    74,     0,    60,    61,
    62,     0,     0,     0,     0,    63,    64,     0,     0,    65,
     0,     0,    66,   162,    68,    69,    70,   160,     0,     0,
   161,     4,    71,     6,     0,     8,     0,     0,    74,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    26,    27,    28,    29,     0,   160,     0,
     0,   161,     4,     0,     6,     0,     8,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    26,    27,    28,    29,     0,   160,
     0,     0,   161,     4,     0,     6,     0,     8,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    26,    27,    28,    29,     0,
    60,    61,    62,     0,     0,     0,     0,    63,    64,     0,
     0,    65,     0,     0,    66,   162,    68,    69,    70,     0,
     0,     0,     0,     0,    71,     0,   479,     0,     0,     0,
    74,    60,    61,    62,     0,     0,     0,     0,    63,    64,
     0,     0,    65,     0,     0,    66,   162,    68,    69,    70,
     0,     0,     0,     0,     0,    71,     0,   540,     0,     0,
     0,    74,    60,    61,    62,     0,     0,     0,     0,    63,
    64,     0,     0,    65,     0,     0,    66,   162,    68,    69,
    70,   302,     0,     0,   161,     4,    71,     6,     0,     8,
     0,     0,    74,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    26,    27,    28,
    29,     5,   150,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,     0,    20,    21,    22,    23,
     0,    25,     0,     0,     0,     0,     0,     0,    30,    31,
    32,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    49,    50,     0,     0,     0,    52,    53,    54,    55,    56,
     0,     0,     0,     0,    60,    61,    62,     0,     0,     0,
     0,    63,    64,     0,     0,    65,     0,     0,    66,   162,
    68,    69,    70,     0,     0,     0,     0,     0,    71,     0,
     0,     0,     0,     0,    74,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   211,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   214,     5,   150,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
     0,    20,    21,    22,    23,     0,    25,     0,     0,     0,
     0,     0,     0,    30,    31,    32,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    49,    50,     0,     0,     0,
    52,    53,    54,    55,    56,   305,     5,   150,     7,     8,
     0,    10,    11,    12,    13,    14,    15,    16,    17,    18,
     0,   306,    21,    22,     0,     0,    25,     0,     0,     0,
     0,     0,     0,    30,    31,    32,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   211,
     0,     0,     0,     0,     0,    49,     0,     0,     0,     0,
    52,    53,    54,    55,    56,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   307,   247,   248,   249,   250,   251,   252,   253,   254,   255,
   256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
     0,     0,     0,   280,   281,     0,     0,     0,     0,   282,
   283,     0,     0,     0,     0,     0,     0,   139,     0,   284,
   494,   247,   248,   249,   250,   251,   252,   253,   254,   255,
   256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
     0,     0,     0,   280,   281,     0,     0,     0,     0,   282,
   283,     0,     0,     0,     0,     0,     0,   139,     0,   284,
   509,   305,     5,   150,     7,     8,     0,    10,    11,    12,
    13,    14,    15,    16,    17,    18,     0,   306,    21,    22,
     0,     0,    25,     0,     0,     0,     0,     0,     0,    30,
    31,    32,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    49,     0,     0,     0,     0,    52,    53,    54,    55,
    56,   247,   248,   249,   250,   251,   252,   253,   254,   255,
   256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
     0,     0,     0,   280,   281,     0,     0,     0,     0,   282,
   283,     0,     0,     0,     0,     0,     0,   139,   359,   284,
   247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
   257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,     0,
     0,     0,   280,   281,     0,     0,     0,     0,   282,   283,
     0,     0,     0,     0,     0,     0,   139,   464,   284,   247,
   248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
   258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,     0,     0,
     0,   280,   281,     0,     0,     0,     0,   282,   283,     0,
     0,     0,     0,     0,   490,   139,     0,   284,   247,   248,
   249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
   259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,     0,     0,     0,
   280,   281,     0,     0,     0,     0,   282,   283,     0,     0,
     0,     0,     0,     0,   139,   526,   284,   247,   248,   249,
   250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
   260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,     0,     0,     0,   280,
   281,     0,     0,     0,     0,   282,   283,     0,     0,     0,
     0,     0,     0,   139,     0,   284,     5,   150,     7,     8,
     0,    10,    11,    12,    13,    14,    15,    16,    17,    18,
     0,    20,    21,    22,     0,     0,    25,     0,     0,     0,
     0,   293,   294,    30,    31,    32,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    49,     0,     0,     0,     0,
    52,    53,    54,    55,    56,     5,   150,     7,     8,     0,
    10,    11,    12,    13,    14,    15,    16,    17,    18,     0,
    20,    21,    22,     0,     0,    25,     0,     0,     0,     0,
     0,     0,    30,    31,    32,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   360,    49,     0,     0,     0,     0,    52,
    53,    54,    55,    56,     5,   150,     7,     8,     0,    10,
    11,    12,    13,    14,    15,    16,    17,    18,     0,    20,
    21,    22,     0,     0,    25,     0,     0,     0,     0,     0,
     0,    30,    31,    32,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    49,     0,     0,     0,     0,    52,    53,
    54,    55,    56,   248,   249,   250,   251,   252,   253,   254,
   255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,     0,     0,     0,   280,   281,     0,     0,     0,     0,
   282,   283,     0,     0,     0,     0,     0,     0,   139,     0,
   284,   261,   262,   263,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,     0,     0,     0,   280,
   281,     0,     0,     0,     0,   282,   283,     0,     0,     0,
     0,     0,     0,   139,     0,   284,   262,   263,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
     0,     0,     0,   280,   281,     0,     0,     0,     0,   282,
   283,     0,     0,     0,     0,     0,     0,   139,     0,   284,
   263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,     0,     0,     0,   280,   281,     0,     0,
     0,     0,   282,   283,     0,     0,     0,     0,     0,     0,
   139,     0,   284,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,     0,     0,     0,   280,   281,
     0,     0,     0,     0,   282,   283,     0,     0,     0,     0,
     0,     0,   139,     0,   284,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,     0,     0,     0,   280,
   281,     0,     0,     0,     0,   282,   283,     0,     0,     0,
     0,     0,     0,   139,     0,   284,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,     0,     0,     0,   280,   281,
     0,     0,     0,     0,   282,   283,     0,     0,     0,     0,
     0,     0,   139,     0,   284,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
     0,     0,     0,   280,   281,     0,     0,     0,     0,   282,
   283,     0,     0,     0,     0,     0,     0,   139,     0,   284
};

static const short yycheck[] = {     0,
    38,    39,    46,     6,    44,    75,    81,   156,    46,    81,
   157,   198,    92,     8,   170,   144,    10,   361,    23,    82,
    83,    67,    23,    84,     7,   181,     9,   214,   181,   229,
    88,    89,   241,   242,   243,    88,    89,   233,    52,   108,
    44,    88,    89,    44,   122,   197,    88,    89,     7,    63,
     9,    52,    47,     4,    88,    89,     7,     8,    60,    61,
    62,    90,    63,    65,    66,    67,    68,    69,   108,    74,
   121,    69,    74,    74,    75,   123,   205,   128,     1,    93,
     3,    69,   238,   152,     7,   238,     9,    88,    89,   124,
   148,    92,    93,   245,   163,   148,    96,     4,   132,   128,
     7,   148,     9,   172,   108,   105,   148,   108,    59,    88,
   121,   121,   152,    96,   148,   109,   154,   128,   128,     3,
   200,   159,     6,   122,   182,   123,   124,   132,   126,   182,
   339,   132,   172,   123,   478,   123,   124,    96,   140,   144,
   182,   216,   180,   144,   216,     3,   226,   148,   182,   125,
     8,   152,   128,   228,   124,   342,   228,   229,   219,   163,
   162,   361,   124,     3,   233,   211,   219,     7,   172,     9,
   120,   172,   122,    96,   122,   233,   372,   182,   387,   388,
     3,   182,   105,     6,    24,   188,   530,   124,   190,    65,
    66,    67,   197,   122,   123,   197,   197,   198,   123,   200,
   205,   124,     5,   126,   205,     4,   124,     6,     7,     8,
     9,   118,    21,   214,   289,   126,   296,   289,   288,     4,
   234,     6,     7,     8,     9,   226,   227,    14,    15,    16,
    17,   124,   233,   234,    88,    89,     3,   320,   321,     6,
   245,     8,   124,   123,   245,   247,   248,   322,    47,     4,
   322,   380,     6,     7,     8,     9,   122,   259,   260,   261,
   262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,    88,   279,   478,   475,
   327,   481,   284,   285,    50,   118,   356,   288,   125,   327,
   370,   120,     3,   122,   148,   296,   123,   367,   447,   446,
     1,   122,     3,   366,   373,   300,     7,     6,     9,   438,
   124,   124,   126,   126,   470,     7,   122,     9,   122,   118,
   389,   122,   327,   120,   118,   127,   327,   125,   182,   538,
   530,    10,   122,   118,   122,    60,   128,   123,   525,   122,
   469,   342,   124,    37,   382,   348,   125,   349,   495,     4,
    38,     6,     7,     8,     9,   356,   358,   125,   122,   431,
   125,   122,   125,   120,   126,   125,   367,     3,    69,   370,
   128,   122,   373,     5,   120,   380,    90,     3,   380,   380,
   536,     3,     3,   120,   385,   125,   122,   457,   389,    90,
   122,   454,     1,     3,     3,    96,    68,   399,     7,   125,
     9,   122,   125,   127,   105,     1,     0,     3,     0,    89,
    84,     7,   536,     9,   381,   562,   362,    12,   228,   469,
   385,   122,   123,   124,   125,   126,   554,   128,   540,   548,
    99,   391,   434,   438,    98,   290,   105,   438,   476,   496,
   310,   110,   111,   506,    -1,   438,   486,   116,   117,   450,
    -1,    -1,    -1,    -1,    -1,   124,   457,   126,    -1,    -1,
    69,   505,    -1,   118,   469,    -1,     1,   505,   469,     4,
     5,    -1,     7,    69,     9,   545,   551,    -1,   105,   551,
    -1,    90,    -1,   110,   111,   486,    -1,    96,   490,   116,
   117,    -1,    27,    28,    29,    30,   105,   124,    -1,   126,
    96,    -1,    -1,    -1,    -1,   549,    -1,    -1,   511,   105,
    -1,   549,    -1,   516,   123,   124,   125,   126,    -1,   128,
    -1,   523,    -1,    -1,   525,    -1,   122,   123,   124,    -1,
   126,    -1,   128,    -1,    96,    97,    98,    99,   540,    -1,
    -1,    -1,    -1,   105,   545,    -1,    -1,    -1,   110,   111,
    -1,    -1,   554,    -1,   116,   117,    -1,    -1,    -1,    94,
    95,    96,   124,    -1,   126,    -1,   101,   102,    -1,    -1,
   105,    -1,    -1,   108,   109,   110,   111,   112,    -1,    -1,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,   124,
     0,     1,   127,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    -1,    -1,    33,    34,    35,    36,    -1,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    -1,    51,    52,    53,    -1,    55,    56,    57,    -1,    -1,
    60,    61,    62,    63,    64,    65,    66,    67,    -1,    -1,
     6,     7,     8,     9,    -1,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    -1,    21,    22,    23,    -1,    -1,
    26,    -1,    -1,    -1,    94,    95,    96,    33,    34,    35,
    -1,   101,   102,    -1,    -1,   105,    -1,    -1,   108,   109,
   110,   111,   112,    -1,    -1,    -1,    -1,    -1,   118,    55,
   120,    -1,   122,    -1,   124,     0,     1,    -1,     3,     4,
     5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    -1,    -1,    33,    34,
    35,    36,    -1,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    -1,    51,    52,    53,    -1,
    55,    56,    57,    -1,    -1,    60,    61,    62,    63,    64,
    65,    66,    67,    -1,    -1,     6,     7,     8,     9,    -1,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    -1,
    21,    22,    23,    -1,    -1,    26,    -1,    -1,    -1,    94,
    95,    96,    33,    34,    35,    -1,   101,   102,    -1,    -1,
   105,    -1,    -1,   108,   109,   110,   111,   112,    -1,    -1,
    -1,    -1,    -1,   118,    55,   120,    -1,   122,     1,   124,
    -1,     4,     5,     6,     7,     8,     9,    -1,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    -1,    21,    22,
    23,    -1,    -1,    26,    27,    28,    29,    30,    -1,    -1,
    33,    34,    35,    -1,    -1,    -1,     1,    -1,    -1,     4,
     5,    -1,     7,    -1,     9,    -1,    -1,    -1,    -1,    -1,
    -1,    54,    55,    -1,    -1,    -1,    -1,    60,    61,    62,
    63,    64,    27,    28,    29,    30,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    94,    95,    96,    -1,    -1,    -1,    -1,   101,   102,
    -1,    -1,   105,    -1,    -1,   108,   109,   110,   111,   112,
    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,
    -1,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    94,
    95,    96,    -1,    -1,    -1,    -1,   101,   102,    -1,    -1,
   105,    -1,    -1,   108,   109,   110,   111,   112,    -1,    -1,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,   124,
   125,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    -1,    -1,    33,    34,    35,    36,    -1,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    -1,    51,    52,    53,    -1,    55,    56,    57,    -1,    -1,
    60,    61,    62,    63,    64,    65,    66,    67,    94,    95,
    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,   105,
    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,
   116,   117,    -1,    -1,    94,    95,    96,    -1,   124,    -1,
   126,   101,   102,    -1,    -1,   105,    -1,    -1,   108,   109,
   110,   111,   112,    -1,    -1,    -1,    -1,    -1,   118,    -1,
   120,   121,   122,     1,   124,     3,     4,     5,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    -1,    -1,    33,    34,    35,    36,    -1,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    -1,    51,    52,    53,    -1,    55,    56,    57,
    -1,    -1,    60,    61,    62,    63,    64,    65,    66,    67,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,    -1,
    -1,    -1,    -1,   101,   102,    -1,    -1,   105,    -1,    -1,
   108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,
   118,    -1,   120,   121,   122,     1,   124,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    -1,    -1,    33,    34,    35,
    36,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    -1,    51,    52,    53,    -1,    55,
    56,    57,    -1,    -1,    60,    61,    62,    63,    64,    65,
    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
    96,    -1,    -1,    -1,    -1,   101,   102,    -1,    -1,   105,
    -1,    -1,   108,   109,   110,   111,   112,    -1,    -1,    -1,
    -1,    -1,   118,    -1,   120,   121,   122,     1,   124,     3,
     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    -1,    -1,    33,
    34,    35,    36,    -1,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    -1,    51,    52,    53,
    -1,    55,    56,    57,    -1,    -1,    60,    61,    62,    63,
    64,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    94,    95,    96,    -1,    -1,    -1,    -1,   101,   102,    -1,
    -1,   105,    -1,    -1,   108,   109,   110,   111,   112,    -1,
    -1,    -1,    -1,    -1,   118,    -1,   120,   121,   122,     1,
   124,     3,     4,     5,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
    -1,    33,    34,    35,    36,    -1,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    -1,    51,
    52,    53,    -1,    55,    56,    57,    -1,    -1,    60,    61,
    62,    63,    64,    65,    66,    67,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,   101,
   102,    -1,    -1,   105,    -1,    -1,   108,   109,   110,   111,
   112,    -1,    -1,    -1,    -1,    -1,   118,    -1,   120,   121,
   122,     1,   124,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    -1,    -1,    33,    34,    35,    36,    -1,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    -1,    51,    52,    53,    -1,    55,    56,    57,    -1,    -1,
    60,    61,    62,    63,    64,    65,    66,    67,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
    -1,   101,   102,    -1,    -1,   105,    -1,    -1,   108,   109,
   110,   111,   112,    -1,    -1,    -1,    -1,    -1,   118,    -1,
   120,    -1,   122,     1,   124,    -1,     4,     5,     6,     7,
     8,     9,    -1,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    -1,    21,    22,    23,    -1,    -1,    26,    27,
    28,    29,    30,    -1,    -1,    33,    34,    35,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
    -1,    -1,    60,    61,    62,    63,    64,    -1,    -1,    -1,
    -1,    -1,    -1,     6,     7,     8,     9,    -1,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    -1,    21,    22,
    23,    -1,    -1,    26,    -1,    -1,    94,    95,    96,    -1,
    33,    34,    35,   101,   102,    -1,    -1,   105,    -1,    -1,
   108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,
   118,    -1,    55,    -1,   122,     1,   124,    60,     4,     5,
     6,     7,     8,     9,    -1,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    -1,    21,    22,    23,    -1,    -1,
    26,    27,    28,    29,    30,    -1,    -1,    33,    34,    35,
    -1,    -1,    -1,     1,    -1,    -1,     4,     5,    -1,     7,
    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,
    -1,    -1,    -1,    -1,    60,    61,    62,    63,    64,    27,
    28,    29,    30,    -1,    -1,     1,    -1,    -1,     4,     5,
    -1,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
    96,    27,    28,    29,    30,   101,   102,    -1,    -1,   105,
    -1,    -1,   108,   109,   110,   111,   112,    -1,    -1,    -1,
    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,   124,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,    -1,
    -1,    -1,    -1,   101,   102,    -1,    -1,   105,    -1,    -1,
   108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,
   118,    -1,    -1,    -1,   122,    -1,   124,    -1,    94,    95,
    96,    -1,    -1,    -1,    -1,   101,   102,    -1,    -1,   105,
    -1,    -1,   108,   109,   110,   111,   112,     1,    -1,    -1,
     4,     5,   118,     7,    -1,     9,    -1,    -1,   124,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    27,    28,    29,    30,    -1,     1,    -1,
    -1,     4,     5,    -1,     7,    -1,     9,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    27,    28,    29,    30,    -1,     1,
    -1,    -1,     4,     5,    -1,     7,    -1,     9,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    27,    28,    29,    30,    -1,
    94,    95,    96,    -1,    -1,    -1,    -1,   101,   102,    -1,
    -1,   105,    -1,    -1,   108,   109,   110,   111,   112,    -1,
    -1,    -1,    -1,    -1,   118,    -1,   120,    -1,    -1,    -1,
   124,    94,    95,    96,    -1,    -1,    -1,    -1,   101,   102,
    -1,    -1,   105,    -1,    -1,   108,   109,   110,   111,   112,
    -1,    -1,    -1,    -1,    -1,   118,    -1,   120,    -1,    -1,
    -1,   124,    94,    95,    96,    -1,    -1,    -1,    -1,   101,
   102,    -1,    -1,   105,    -1,    -1,   108,   109,   110,   111,
   112,     1,    -1,    -1,     4,     5,   118,     7,    -1,     9,
    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    27,    28,    29,
    30,     6,     7,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    -1,    21,    22,    23,    24,
    -1,    26,    -1,    -1,    -1,    -1,    -1,    -1,    33,    34,
    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    55,    56,    -1,    -1,    -1,    60,    61,    62,    63,    64,
    -1,    -1,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
    -1,   101,   102,    -1,    -1,   105,    -1,    -1,   108,   109,
   110,   111,   112,    -1,    -1,    -1,    -1,    -1,   118,    -1,
    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   120,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    -1,    21,    22,    23,    24,    -1,    26,    -1,    -1,    -1,
    -1,    -1,    -1,    33,    34,    35,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    55,    56,    -1,    -1,    -1,
    60,    61,    62,    63,    64,     5,     6,     7,     8,     9,
    -1,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    -1,    21,    22,    23,    -1,    -1,    26,    -1,    -1,    -1,
    -1,    -1,    -1,    33,    34,    35,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,
    60,    61,    62,    63,    64,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    90,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,    -1,    -1,    -1,    -1,    -1,   105,    -1,
    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,   116,
   117,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,   126,
   127,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,    -1,    -1,    -1,    -1,    -1,   105,    -1,
    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,   116,
   117,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,   126,
   127,     5,     6,     7,     8,     9,    -1,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    -1,    21,    22,    23,
    -1,    -1,    26,    -1,    -1,    -1,    -1,    -1,    -1,    33,
    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    55,    -1,    -1,    -1,    -1,    60,    61,    62,    63,
    64,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,    -1,    -1,    -1,    -1,    -1,   105,    -1,
    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,   116,
   117,    -1,    -1,    -1,    -1,    -1,    -1,   124,   125,   126,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,    -1,    -1,    -1,    -1,    -1,   105,    -1,    -1,
    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,   116,   117,
    -1,    -1,    -1,    -1,    -1,    -1,   124,   125,   126,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,    -1,    -1,    -1,    -1,    -1,   105,    -1,    -1,    -1,
    -1,   110,   111,    -1,    -1,    -1,    -1,   116,   117,    -1,
    -1,    -1,    -1,    -1,   123,   124,    -1,   126,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
    -1,    -1,    -1,    -1,    -1,   105,    -1,    -1,    -1,    -1,
   110,   111,    -1,    -1,    -1,    -1,   116,   117,    -1,    -1,
    -1,    -1,    -1,    -1,   124,   125,   126,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,    -1,
    -1,    -1,    -1,    -1,   105,    -1,    -1,    -1,    -1,   110,
   111,    -1,    -1,    -1,    -1,   116,   117,    -1,    -1,    -1,
    -1,    -1,    -1,   124,    -1,   126,     6,     7,     8,     9,
    -1,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    -1,    21,    22,    23,    -1,    -1,    26,    -1,    -1,    -1,
    -1,    31,    32,    33,    34,    35,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,
    60,    61,    62,    63,    64,     6,     7,     8,     9,    -1,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    -1,
    21,    22,    23,    -1,    -1,    26,    -1,    -1,    -1,    -1,
    -1,    -1,    33,    34,    35,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    54,    55,    -1,    -1,    -1,    -1,    60,
    61,    62,    63,    64,     6,     7,     8,     9,    -1,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    -1,    21,
    22,    23,    -1,    -1,    26,    -1,    -1,    -1,    -1,    -1,
    -1,    33,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    60,    61,
    62,    63,    64,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,   105,
    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,
   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,
   126,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,    -1,
    -1,    -1,    -1,    -1,   105,    -1,    -1,    -1,    -1,   110,
   111,    -1,    -1,    -1,    -1,   116,   117,    -1,    -1,    -1,
    -1,    -1,    -1,   124,    -1,   126,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,    -1,    -1,    -1,    -1,    -1,   105,    -1,
    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,   116,
   117,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,   126,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,
    -1,   105,    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,
    -1,    -1,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,
   124,    -1,   126,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,    -1,    -1,
    -1,    -1,    -1,   105,    -1,    -1,    -1,    -1,   110,   111,
    -1,    -1,    -1,    -1,   116,   117,    -1,    -1,    -1,    -1,
    -1,    -1,   124,    -1,   126,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,    -1,
    -1,    -1,    -1,    -1,   105,    -1,    -1,    -1,    -1,   110,
   111,    -1,    -1,    -1,    -1,   116,   117,    -1,    -1,    -1,
    -1,    -1,    -1,   124,    -1,   126,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,    -1,    -1,
    -1,    -1,    -1,   105,    -1,    -1,    -1,    -1,   110,   111,
    -1,    -1,    -1,    -1,   116,   117,    -1,    -1,    -1,    -1,
    -1,    -1,   124,    -1,   126,    92,    93,    94,    95,    96,
    97,    98,    99,    -1,    -1,    -1,    -1,    -1,   105,    -1,
    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,   116,
   117,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,   126
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* found in the main program! */
int yyerror(const char *);
int yylex();

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 3:
#line 155 "parser.y"
{statement_end();;
    break;}
case 4:
#line 156 "parser.y"
{statement_end();;
    break;}
case 5:
#line 160 "parser.y"
{ state.init_block(PLAIN_BLOCK); IEF_set(); ;
    break;}
case 6:
#line 162 "parser.y"
{ state.finalize_block(); IEF_reset();;
    break;}
case 13:
#line 171 "parser.y"
{expression_end(yyvsp[-1].expression);;
    break;}
case 36:
#line 194 "parser.y"
{ raise_error("Error in statement"); YYABORT; ;
    break;}
case 37:
#line 200 "parser.y"
{ 
    Type dt = tpop();
	dcl_reset();
	state.check_dcl_init(dt);
 ;
    break;}
case 38:
#line 209 "parser.y"
{ state.in_typedef = true; ;
    break;}
case 39:
#line 211 "parser.y"
{ state.in_typedef = false; ;
    break;}
case 42:
#line 222 "parser.y"
{
   dcl_set();
   state.token_stack.push(yyvsp[0].classptr->constructor_name());
   tpush(t_void);
   state.in_construct_destruct = IsConstructor;
   yyval.classptr = yyvsp[0].classptr;
  ;
    break;}
case 43:
#line 232 "parser.y"
{;
    break;}
case 44:
#line 234 "parser.y"
{
  state.token_stack.TOS() = yyvsp[0].classptr->destructor_name();
  state.in_construct_destruct = IsDestructor;
;
    break;}
case 45:
#line 242 "parser.y"
{ 
   state.token_stack.push(CONVERSION_OPNAME);
   ttpush(yyvsp[-1].ctype); yyval.ctype = yyvsp[-1].ctype;
  ;
    break;}
case 46:
#line 250 "parser.y"
{ yyval.ctype=yyvsp[-3].ctype; stots(yyval.ctype); state.member_is_const = yyvsp[-1].val; gFunInit = yyvsp[0].expression; ;
    break;}
case 47:
#line 254 "parser.y"
{ state.modifier = Explicit; ;
    break;}
case 48:
#line 259 "parser.y"
{  
   state.declare_function(t_void,state.token_stack.pop());
   tpop();
   check_error();
 ;
    break;}
case 49:
#line 268 "parser.y"
{
   state.declare_function(AsType(yyvsp[-1].ctype),state.token_stack.pop(), gFunInit); 
   dcl_reset();
   gFunInit = NULL;
   tpop();
   check_error();
 ;
    break;}
case 52:
#line 278 "parser.y"
{ 
    state.declare_function(AsType(yyvsp[-1].ctype),state.token_stack.pop());
	tpop();
	check_error();
  ;
    break;}
case 53:
#line 291 "parser.y"
{ state.extern_flag = false; ;
    break;}
case 54:
#line 292 "parser.y"
{ state.extern_flag_C = false; ;
    break;}
case 55:
#line 293 "parser.y"
{ state.extern_flag_C = false; ;
    break;}
case 58:
#line 302 "parser.y"
{ state.extern_flag_C = true; ;
    break;}
case 59:
#line 306 "parser.y"
{ state.extern_flag = true; ;
    break;}
case 60:
#line 313 "parser.y"
{ ;
    break;}
case 61:
#line 315 "parser.y"
{;
    break;}
case 62:
#line 317 "parser.y"
{;
    break;}
case 63:
#line 319 "parser.y"
{;
    break;}
case 66:
#line 331 "parser.y"
{   state.init_block(CONSTRUCTOR_BLOCK);  ;
    break;}
case 67:
#line 333 "parser.y"
{  check_error(); state.in_method = true; ;
    break;}
case 71:
#line 345 "parser.y"
{ 
	 ((Class*)state.context().parent_context())
	    ->add_class_init_list(AsType(yyvsp[-1].ctype).as_class()->entry(),yyvsp[0].elist);
	/* fix 1.2.3a Can crash UC if we don't catch errors in the init list */
	 if (check_error()) YYABORT;  
	;
    break;}
case 72:
#line 354 "parser.y"
{ ((Class*)state.context().parent_context())
	      ->add_class_init_list(yyvsp[-1].entry,yyvsp[0].elist);
	 if (check_error()) YYABORT;
    ;
    break;}
case 73:
#line 363 "parser.y"
{ yyval.ctype = yyvsp[0].ctype;  ;
    break;}
case 74:
#line 366 "parser.y"
{ yyval.val=0; ;
    break;}
case 75:
#line 367 "parser.y"
{ yyval.val=1; ;
    break;}
case 76:
#line 371 "parser.y"
{dcl_set();;
    break;}
case 77:
#line 372 "parser.y"
{dcl_set();;
    break;}
case 78:
#line 373 "parser.y"
{dcl_set(); tots().make_const();;
    break;}
case 79:
#line 374 "parser.y"
{dcl_set(); tots().make_const();;
    break;}
case 80:
#line 378 "parser.y"
{state.modifier = Static;  ;
    break;}
case 81:
#line 379 "parser.y"
{state.modifier = Virtual; ;
    break;}
case 82:
#line 380 "parser.y"
{state.modifier = Stdcall; ;
    break;}
case 83:
#line 381 "parser.y"
{state.modifier = Api;     ;
    break;}
case 84:
#line 384 "parser.y"
{dcl_set(false);;
    break;}
case 85:
#line 387 "parser.y"
{dcl_reset();;
    break;}
case 86:
#line 390 "parser.y"
{ ttpush(yyvsp[0].ctype);  ;
    break;}
case 87:
#line 391 "parser.y"
{ tpush(typeof_op(yyvsp[-1].expression)); ;
    break;}
case 88:
#line 392 "parser.y"
{ ;
    break;}
case 89:
#line 393 "parser.y"
{ tots().make_unsigned(); ;
    break;}
case 90:
#line 394 "parser.y"
{ tpush(t_int); tots().make_unsigned(); ;
    break;}
case 91:
#line 395 "parser.y"
{ tpush(t_float);  ;
    break;}
case 92:
#line 396 "parser.y"
{ tpush(t_double); ;
    break;}
case 93:
#line 397 "parser.y"
{ tpush(t_bool); ;
    break;}
case 94:
#line 398 "parser.y"
{ tpush(t_void); ;
    break;}
case 95:
#line 399 "parser.y"
{ ;
    break;}
case 96:
#line 400 "parser.y"
{ ;
    break;}
case 97:
#line 403 "parser.y"
{ yyval.val=0; ;
    break;}
case 98:
#line 404 "parser.y"
{ yyval.val=1; ;
    break;}
case 99:
#line 406 "parser.y"
{ yyval.val=0; ;
    break;}
case 100:
#line 407 "parser.y"
{ yyval.val=1; ;
    break;}
case 101:
#line 410 "parser.y"
{ tpush(t_int);   ;
    break;}
case 102:
#line 411 "parser.y"
{ tpush(t_short); ;
    break;}
case 103:
#line 412 "parser.y"
{ tpush(t_long);  ;
    break;}
case 104:
#line 417 "parser.y"
{ tpush(t_char);  ;
    break;}
case 105:
#line 421 "parser.y"
{ yyval.ctype = incr_ptr(yyvsp[-1].ctype); ;
    break;}
case 106:
#line 425 "parser.y"
{dcl_set(false);;
    break;}
case 107:
#line 427 "parser.y"
{ dcl_reset(); yyval.expression = yyvsp[-1].expression; ;
    break;}
case 108:
#line 430 "parser.y"
{ yyval.ctype=ttots(); state.token_stack.push(""); ;
    break;}
case 109:
#line 431 "parser.y"
{ yyval.ctype=yyvsp[0].ctype;   ;
    break;}
case 110:
#line 432 "parser.y"
{ Type t = AsType(yyvsp[-1].ctype); t.decr_pointer(); yyval.ctype = AsTType(state.signature_type(t));     ;
    break;}
case 111:
#line 435 "parser.y"
{ state.class_dcl = AsType(yyvsp[-5].ctype); yyval.ctype = AsTType(state.signature_type(AsType(yyvsp[-3].ctype)));  ;
    break;}
case 112:
#line 436 "parser.y"
{ yyval.ctype = incr_ptr(yyvsp[0].ctype);         ;
    break;}
case 113:
#line 437 "parser.y"
{ yyval.ctype = make_ref(yyvsp[0].ctype);         ;
    break;}
case 114:
#line 438 "parser.y"
{ yyval.ctype = yyvsp[-1].ctype;   state.class_dcl = AsType(yyvsp[-2].ctype); ;
    break;}
case 115:
#line 440 "parser.y"
{ yyval.ctype = yyvsp[-1].ctype;   state.class_dcl = AsType(yyvsp[-2].ctype); ;
    break;}
case 116:
#line 441 "parser.y"
{ yyval.ctype = make_array(yyvsp[-1].ctype,yyvsp[0].expression); check_error();   ;
    break;}
case 117:
#line 442 "parser.y"
{ yyval.ctype = make_array(yyvsp[-1].ctype,yyvsp[0].expression); check_error();   ;
    break;}
case 118:
#line 443 "parser.y"
{ raise_error("Error in type expression"); YYABORT; ;
    break;}
case 119:
#line 447 "parser.y"
{ yyval.ctype = ttots(); ;
    break;}
case 120:
#line 448 "parser.y"
{ yyval.ctype = incr_ptr(yyvsp[0].ctype); ;
    break;}
case 121:
#line 449 "parser.y"
{ yyval.ctype = make_ref(yyvsp[0].ctype); ;
    break;}
case 122:
#line 452 "parser.y"
{ yyval.ctype=ttots(); state.token_stack.push(yyvsp[0].str); ;
    break;}
case 123:
#line 456 "parser.y"
{ dcl_set(false); state.begin_args(); ;
    break;}
case 124:
#line 459 "parser.y"
{ dcl_reset(); ;
    break;}
case 129:
#line 470 "parser.y"
{ 
   state.add_to_arg_list(t_void,"...",0);
 ;
    break;}
case 130:
#line 477 "parser.y"
{  
  state.add_to_arg_list(AsType(yyvsp[-1].ctype),state.token_stack.pop(),yyvsp[0].expression);
  tpop();
  dcl_reset();
;
    break;}
case 131:
#line 486 "parser.y"
{
  string name = state.token_stack.pop();
  Type t = AsType(yyvsp[-1].ctype);
  temp_context()->reserved_space(t.size());
  state.add_variable(t,name,yyvsp[0].expression,state.modifier);
  if (check_error()) YYABORT;
  ;
    break;}
case 135:
#line 500 "parser.y"
{ yyval.expression=NULL; ;
    break;}
case 136:
#line 501 "parser.y"
{yyval.expression=yyvsp[0].expression;;
    break;}
case 137:
#line 507 "parser.y"
{ dcl_set(false); ;
    break;}
case 138:
#line 510 "parser.y"
{ yyval.expression=NULL; ;
    break;}
case 139:
#line 513 "parser.y"
{ dcl_reset(); yyval.expression=yyvsp[0].expression; ;
    break;}
case 140:
#line 516 "parser.y"
{ yyval.expression=expr_list_op(yyvsp[0].elist,true); ;
    break;}
case 141:
#line 518 "parser.y"
{ enter_arglist();;
    break;}
case 142:
#line 520 "parser.y"
{leave_arglist(); dcl_reset(); yyval.expression=expr_list_op(yyvsp[-1].elist,false); ;
    break;}
case 143:
#line 523 "parser.y"
{ yyval.expression = new Expr(ECONST,t_void,yyvsp[0].entry,NULL); ;
    break;}
case 144:
#line 530 "parser.y"
{ yyval.elist = yyvsp[-1].elist; ;
    break;}
case 145:
#line 533 "parser.y"
{ yyval.expression = yyvsp[0].expression; ;
    break;}
case 146:
#line 534 "parser.y"
{ yyval.expression = expr_list_op(yyvsp[0].elist,false); ;
    break;}
case 147:
#line 537 "parser.y"
{ yyval.elist = new ExprList; yyval.elist->push_back(yyvsp[0].expression);  ;
    break;}
case 148:
#line 538 "parser.y"
{ yyval.elist = yyvsp[-2].elist; yyval.elist->push_back(yyvsp[0].expression); ;
    break;}
case 149:
#line 548 "parser.y"
{yyval.val=Public;;
    break;}
case 150:
#line 549 "parser.y"
{yyval.val=Private;;
    break;}
case 151:
#line 550 "parser.y"
{yyval.val=Protected;;
    break;}
case 152:
#line 553 "parser.y"
{ yyval.val=Default; ;
    break;}
case 157:
#line 559 "parser.y"
{ yyval.val = CLASS; ;
    break;}
case 158:
#line 560 "parser.y"
{ yyval.val = STRUCT; ;
    break;}
case 159:
#line 561 "parser.y"
{ yyval.val = UNION;  ;
    break;}
case 160:
#line 564 "parser.y"
{ yyval.val=NotDerived; ;
    break;}
case 161:
#line 566 "parser.y"
{ yyval.val=yyvsp[-1].val; state.class_dcl = AsType(yyvsp[0].ctype); ;
    break;}
case 162:
#line 570 "parser.y"
{ yyval.str = yyvsp[0].str;               ;
    break;}
case 163:
#line 571 "parser.y"
{ yyval.str = yyvsp[0].entry->name.c_str(); ;
    break;}
case 164:
#line 574 "parser.y"
{ yyval.str = "";               ;
    break;}
case 165:
#line 575 "parser.y"
{ yyval.str = yyvsp[0].str;               ;
    break;}
case 166:
#line 577 "parser.y"
{ PClass pc = AsType(yyvsp[0].ctype).as_class();
     yyval.str = pc->name().c_str();
    ;
    break;}
case 167:
#line 580 "parser.y"
{ yyval.str = yyvsp[0].entry->name.c_str(); ;
    break;}
case 168:
#line 583 "parser.y"
{ dcl_set();;
    break;}
case 169:
#line 583 "parser.y"
{ dcl_reset(); yyval.str = yyvsp[0].str;  ;
    break;}
case 170:
#line 590 "parser.y"
{ 
	   tpush(state.add_class(yyvsp[-3].val,yyvsp[-2].str,yyvsp[-1].val,state.class_dcl));
       if (check_error()) YYABORT;
	   state.init_block(CLASS_BLOCK); IEF_set();
       typedef_stack.push(state.in_typedef);
       state.in_typedef = false;
      ;
    break;}
case 171:
#line 600 "parser.y"
{
	   state.finalize_block(); IEF_reset();
  	   state.in_typedef = typedef_stack.pop(); 
	 ;
    break;}
case 172:
#line 606 "parser.y"
{ tpush(state.add_class(yyvsp[-1].val,yyvsp[0].str,ForwardClass,t_void)); ;
    break;}
case 173:
#line 610 "parser.y"
{ state.set_access_mode(yyvsp[-1].val); ;
    break;}
case 174:
#line 614 "parser.y"
{ state.in_friend_dcl = true; ;
    break;}
case 176:
#line 615 "parser.y"
{ state.add_friend_class(yyvsp[-2].val); ;
    break;}
case 177:
#line 625 "parser.y"
{ dcl_set(); ;
    break;}
case 178:
#line 626 "parser.y"
{
    tpush(state.do_enum(tag_name));
    if (check_error()) YYABORT;
   ;
    break;}
case 179:
#line 631 "parser.y"
{ dcl_reset(); ;
    break;}
case 182:
#line 638 "parser.y"
{yyval.str=NULL; tag_name="";;
    break;}
case 183:
#line 639 "parser.y"
{yyval.str=yyvsp[0].str; tag_name=yyvsp[0].str;;
    break;}
case 184:
#line 640 "parser.y"
{yyval.str=""; tag_name=yyvsp[0].entry->name.c_str();;
    break;}
case 185:
#line 645 "parser.y"
{ 
  state.add_enum(tots(),yyvsp[-1].str,yyvsp[0].expression);
 ;
    break;}
case 189:
#line 659 "parser.y"
{ dcl_set(); ;
    break;}
case 190:
#line 660 "parser.y"
{ dcl_reset(); 
    state.add_namespace(yyvsp[0].str ? yyvsp[0].str : "");
    state.in_class = true;
    if (check_error()) YYABORT;
   ;
    break;}
case 192:
#line 668 "parser.y"
{ yyval.str = NULL; ;
    break;}
case 193:
#line 669 "parser.y"
{ yyval.str = yyvsp[0].str;  ;
    break;}
case 194:
#line 675 "parser.y"
{ 
   	if ((Namespace *)yyvsp[-1].entry->data != &state.context()) 
      state.context().inject_namespace((Namespace *)yyvsp[-1].entry->data);
    else raise_error("Cannot inject a namespace into itself");
    if (check_error()) YYABORT;
   ;
    break;}
case 195:
#line 685 "parser.y"
{  state.context().inject_entry(yyvsp[-1].entry);  ;
    break;}
case 196:
#line 687 "parser.y"
{ state.context().inject_entry(yyvsp[-1].entry); ;
    break;}
case 197:
#line 689 "parser.y"
{ state.context().inject_entry(last_type_entry);  ;
    break;}
case 198:
#line 694 "parser.y"
{ dcl_set(true); ;
    break;}
case 199:
#line 694 "parser.y"
{ dcl_reset(); ;
    break;}
case 200:
#line 695 "parser.y"
{ do_goto(yyvsp[-2].str); ;
    break;}
case 201:
#line 699 "parser.y"
{ goto_label_new(yyvsp[-1].str); ;
    break;}
case 202:
#line 700 "parser.y"
{ goto_label_existing(yyvsp[-1].entry); ;
    break;}
case 203:
#line 708 "parser.y"
{ state.begin_scope(AsType(yyvsp[-1].ctype)); yyval.ctype = yyvsp[-1].ctype; ;
    break;}
case 204:
#line 722 "parser.y"
{ state.begin_scope(&global()); ;
    break;}
case 205:
#line 725 "parser.y"
{ state.end_scope(); ;
    break;}
case 217:
#line 735 "parser.y"
{ yyval.entry = yyvsp[-1].entry; ;
    break;}
case 218:
#line 737 "parser.y"
{ yyval.entry = yyvsp[-1].entry; ;
    break;}
case 219:
#line 741 "parser.y"
{   if (check_error()) YYABORT;   yyval.expression = yyvsp[0].expression; ;
    break;}
case 220:
#line 744 "parser.y"
{ yyval.expression = NULL; ;
    break;}
case 221:
#line 745 "parser.y"
{ yyval.expression = yyvsp[-1].expression; ;
    break;}
case 222:
#line 749 "parser.y"
{ dcl_reset(); yyval.ctype=yyvsp[0].ctype; state.token_stack.pop(); tpop(); ;
    break;}
case 227:
#line 756 "parser.y"
{ yyval.ctype=yyvsp[-1].ctype; ;
    break;}
case 228:
#line 761 "parser.y"
{ yyval.expression =  entry_op(yyvsp[0].entry); ;
    break;}
case 229:
#line 762 "parser.y"
{ yyval.expression =  entry_op(yyvsp[0].entry); ;
    break;}
case 230:
#line 764 "parser.y"
{ yyval.expression =  yyvsp[-1].expression; ;
    break;}
case 231:
#line 766 "parser.y"
{ yyval.expression=arith_op(STAR,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 232:
#line 767 "parser.y"
{ yyval.expression=arith_op(DIVIDE,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 233:
#line 768 "parser.y"
{ yyval.expression=arith_op(MODULO,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 234:
#line 769 "parser.y"
{ yyval.expression=arith_op(PLUS,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 235:
#line 770 "parser.y"
{ yyval.expression=arith_op(MINUS,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 236:
#line 771 "parser.y"
{ yyval.expression=arith_op(BIN_AND,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 237:
#line 772 "parser.y"
{ yyval.expression=arith_op(BIN_OR,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 238:
#line 774 "parser.y"
{ yyval.expression=yyvsp[0].expression; ;
    break;}
case 239:
#line 775 "parser.y"
{ yyval.expression=unary_op(UMINUS,yyvsp[0].expression); ;
    break;}
case 240:
#line 777 "parser.y"
{ yyval.expression=relational_op(LOG_NOT,yyvsp[0].expression,NULL); ;
    break;}
case 241:
#line 778 "parser.y"
{ yyval.expression=relational_op(LESS_THAN,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 242:
#line 779 "parser.y"
{ yyval.expression=relational_op(GREATER,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 243:
#line 780 "parser.y"
{ yyval.expression=relational_op(LEQ,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 244:
#line 781 "parser.y"
{ yyval.expression=relational_op(GEQ,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 245:
#line 782 "parser.y"
{ yyval.expression=equal_op(yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 246:
#line 783 "parser.y"
{ yyval.expression=relational_op(NOT_EQUAL,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 247:
#line 784 "parser.y"
{ yyval.expression=relational_op(LOG_AND,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 248:
#line 785 "parser.y"
{ yyval.expression=relational_op(LOG_OR,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 249:
#line 787 "parser.y"
{ yyval.expression=assign_op(yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 250:
#line 788 "parser.y"
{ yyval.expression=compound_assign_op(yyvsp[-1].val,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 251:
#line 790 "parser.y"
{ yyval.expression=inc_dec_op(INCR,yyvsp[-1].expression,true); ;
    break;}
case 252:
#line 791 "parser.y"
{ yyval.expression=inc_dec_op(INCR,yyvsp[0].expression,false); ;
    break;}
case 253:
#line 792 "parser.y"
{ yyval.expression=inc_dec_op(DECR,yyvsp[-1].expression,true); ;
    break;}
case 254:
#line 793 "parser.y"
{ yyval.expression=inc_dec_op(DECR,yyvsp[0].expression,false); ;
    break;}
case 255:
#line 797 "parser.y"
{ 
    if (yyvsp[-1].expression->is_entry()) yyval.expression = sizeof_op(size_of_entry(yyvsp[-1].expression->entry()));
	              else  yyval.expression = sizeof_op(yyvsp[-1].expression->type().size());
 ;
    break;}
case 256:
#line 801 "parser.y"
{ yyval.expression=sizeof_op(AsType(yyvsp[-1].ctype).size());  ;
    break;}
case 257:
#line 802 "parser.y"
{ yyval.expression=arith_if_op(yyvsp[-4].expression,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 258:
#line 803 "parser.y"
{ yyval.expression=bin_op(COMMA,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 259:
#line 805 "parser.y"
{ yyval.expression = new_op(tpop(),yyvsp[0].expression,NULL);  ;
    break;}
case 260:
#line 807 "parser.y"
{ tpush(yyvsp[0].entry->type); ;
    break;}
case 261:
#line 808 "parser.y"
{ yyval.expression = new_op(tpop(),NULL,yyvsp[0].elist);  ;
    break;}
case 262:
#line 811 "parser.y"
{ yyval.expression = new_op(tpop(),NULL,yyvsp[0].elist);  ;
    break;}
case 263:
#line 812 "parser.y"
{ yyval.expression = delete_op(yyvsp[0].expression,yyvsp[-1].val==1); ;
    break;}
case 264:
#line 813 "parser.y"
{ yyval.expression = deref_op(yyvsp[0].expression); ;
    break;}
case 265:
#line 814 "parser.y"
{ yyval.expression = addr_op(yyvsp[0].expression); ;
    break;}
case 266:
#line 817 "parser.y"
{ yyval.expression = typecast_op(yyvsp[-4].val,AsType(yyvsp[-3].ctype),yyvsp[-1].expression); ;
    break;}
case 267:
#line 820 "parser.y"
{ yyval.expression = function_cast_op(yyvsp[-1].entry->type /*AsType($1)*/,yyvsp[0].elist); ;
    break;}
case 268:
#line 823 "parser.y"
{ yyval.expression = typecast_op(REINTERPRET_CAST,AsType(yyvsp[-2].ctype),yyvsp[0].expression); ;
    break;}
case 269:
#line 826 "parser.y"
{ yyval.expression=unary_op(BIN_NOT,yyvsp[0].expression); ;
    break;}
case 270:
#line 827 "parser.y"
{ yyval.expression=bin_op(LSHIFT,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 271:
#line 828 "parser.y"
{ yyval.expression=bin_op(RSHIFT,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 272:
#line 829 "parser.y"
{ yyval.expression=bin_op(BIN_AND,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 273:
#line 830 "parser.y"
{ yyval.expression=bin_op(BIN_XOR,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 274:
#line 831 "parser.y"
{ yyval.expression=bin_op(BIN_OR,yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 275:
#line 834 "parser.y"
{ yyval.expression=array_op(yyvsp[-3].expression, yyvsp[-1].expression); ;
    break;}
case 276:
#line 836 "parser.y"
{ yyval.expression=function_op(yyvsp[-1].expression,yyvsp[0].elist); ;
    break;}
case 277:
#line 839 "parser.y"
{dcl_set(); ;
    break;}
case 278:
#line 841 "parser.y"
{ dcl_reset(); yyval.expression=selection_op(yyvsp[-3].expression,yyvsp[0].str,false);  ;
    break;}
case 279:
#line 844 "parser.y"
{dcl_set();;
    break;}
case 280:
#line 846 "parser.y"
{ dcl_reset(); yyval.expression=selection_op(yyvsp[-3].expression,yyvsp[0].str,true);  ;
    break;}
case 281:
#line 850 "parser.y"
{dcl_set();;
    break;}
case 282:
#line 852 "parser.y"
{ dcl_reset(); yyval.expression=selection_op(yyvsp[-3].expression,yyvsp[0].str,true,true);  ;
    break;}
case 283:
#line 854 "parser.y"
{ raise_error("error in expression"); YYABORT; ;
    break;}
case 284:
#line 857 "parser.y"
{ yyval.val = 0; ;
    break;}
case 285:
#line 858 "parser.y"
{ yyval.val = 1; ;
    break;}
case 286:
#line 861 "parser.y"
{ yyval.elist = NULL; ;
    break;}
case 287:
#line 862 "parser.y"
{ yyval.elist = yyvsp[0].elist; ;
    break;}
case 288:
#line 865 "parser.y"
{ yyval.elist = new ExprList; ;
    break;}
case 289:
#line 866 "parser.y"
{ yyval.elist = yyvsp[0].elist; ;
    break;}
case 290:
#line 872 "parser.y"
{ yyval.elist = yyvsp[-1].elist; ;
    break;}
case 291:
#line 876 "parser.y"
{ yyval.elist = new ExprList; yyval.elist->push_back(yyvsp[0].expression);  ;
    break;}
case 292:
#line 877 "parser.y"
{ yyval.elist = yyvsp[-2].elist; yyval.elist->push_back(yyvsp[0].expression); ;
    break;}
case 293:
#line 878 "parser.y"
{ raise_error("Error in arg list"); YYABORT; ;
    break;}
case 294:
#line 883 "parser.y"
{ yyval.expression = yyvsp[-1].expression; ;
    break;}
case 295:
#line 887 "parser.y"
{ yyval.expression = NULL; ;
    break;}
case 296:
#line 888 "parser.y"
{ yyval.expression = yyvsp[0].expression; ;
    break;}
case 297:
#line 892 "parser.y"
{IEF_set();;
    break;}
case 298:
#line 894 "parser.y"
{IEF_reset(); check_temp_context(); ;
    break;}
case 299:
#line 898 "parser.y"
{ do_loop_start(yyvsp[0].expression,false); ;
    break;}
case 300:
#line 902 "parser.y"
{ do_loop_end(false); ;
    break;}
case 301:
#line 907 "parser.y"
{ do_loop_end(true,true); ;
    break;}
case 302:
#line 908 "parser.y"
{ do_loop_end(false);     ;
    break;}
case 303:
#line 912 "parser.y"
{ label_here(); state.in_loop = true; ;
    break;}
case 304:
#line 913 "parser.y"
{ do_loop_start(yyvsp[0].expression,true); ;
    break;}
case 305:
#line 914 "parser.y"
{ do_loop_end(true); state.in_loop = false;;
    break;}
case 306:
#line 919 "parser.y"
{ label_here(); push_label_stack(); state.in_loop = true;;
    break;}
case 307:
#line 921 "parser.y"
{ do_do_end(yyvsp[0].expression); state.in_loop = false;
    break;}
case 309:
#line 925 "parser.y"
{ code().compile(yyvsp[-1].expression,DROP_VALUE); ;
    break;}
case 311:
#line 930 "parser.y"
{ state.init_block(PLAIN_BLOCK); ;
    break;}
case 312:
#line 931 "parser.y"
{ label_here();	state.in_loop = true; ;
    break;}
case 313:
#line 933 "parser.y"
{ do_loop_start(yyvsp[-3].expression,true); ;
    break;}
case 314:
#line 934 "parser.y"
{ do_for_end(yyvsp[-3].expression);    state.in_loop = false;
								 state.finalize_block();
							   ;
    break;}
case 315:
#line 940 "parser.y"
{ do_switch(yyvsp[-1].expression); ;
    break;}
case 317:
#line 944 "parser.y"
{ if (!do_return (yyvsp[-1].expression)) { check_error(); YYABORT; }  ;
    break;}
case 318:
#line 949 "parser.y"
{ do_case (yyvsp[-1].expression);   ;
    break;}
case 319:
#line 951 "parser.y"
{ do_case(NULL);  ;
    break;}
case 320:
#line 955 "parser.y"
{ if (!do_break_continue(BREAK)) { check_error(); YYABORT; } ;
    break;}
case 321:
#line 959 "parser.y"
{ if (!do_break_continue(CONTINUE)) { check_error(); YYABORT; } ;
    break;}
case 322:
#line 966 "parser.y"
{ do_end_try_catch_block(true); ;
    break;}
case 323:
#line 971 "parser.y"
{ state.init_block(PLAIN_BLOCK); IEF_set(); 
	do_start_try_block();  ;
    break;}
case 325:
#line 979 "parser.y"
{ state.finalize_block(); IEF_reset();
     do_end_try_catch_block(false);   ;
    break;}
case 326:
#line 985 "parser.y"
{ state.init_block(PLAIN_BLOCK); IEF_set(); 
    do_start_catch_block(); if (check_error()) YYABORT; ;
    break;}
case 330:
#line 997 "parser.y"
{ do_throw(yyvsp[-1].expression); ;
    break;}
case 331:
#line 1003 "parser.y"
{ yyval.ctype = AsTType(yyvsp[0].entry->type); ;
    break;}
case 332:
#line 1004 "parser.y"
{ yyval.ctype = yyvsp[0].ctype; ;
    break;}
case 333:
#line 1009 "parser.y"
{ last_type_entry = yyvsp[0].entry; yyval.ctype = AsTType(yyvsp[0].entry->type); ;
    break;}
case 334:
#line 1010 "parser.y"
{ yyval.ctype = yyvsp[0].ctype; ;
    break;}
case 335:
#line 1011 "parser.y"
{ yyval.ctype = yyvsp[-1].ctype; ;
    break;}
case 336:
#line 1016 "parser.y"
{ yyval.ctype = AsTType(yyvsp[0].entry->type); ;
    break;}
case 337:
#line 1017 "parser.y"
{ yyval.ctype = yyvsp[0].ctype; ;
    break;}
case 338:
#line 1018 "parser.y"
{ yyval.ctype = yyvsp[-1].ctype; ;
    break;}
case 339:
#line 1023 "parser.y"
{ yyval.ctype = AsTType(Template::get_template_type(yyvsp[-1].entry,yyvsp[0].typelist)); ;
    break;}
case 340:
#line 1028 "parser.y"
{ yyval.ctype = AsTType(Template::get_template_type(yyvsp[-1].entry,yyvsp[0].typelist)); ;
    break;}
case 341:
#line 1034 "parser.y"
{ Template::do_template_header(yyvsp[0].typelist); ;
    break;}
case 342:
#line 1040 "parser.y"
{ Template::do_function_template(); 
  	if (yychar != YYEMPTY) yyclearin;
  ;
    break;}
case 343:
#line 1047 "parser.y"
{
    dcl_reset();    
    Template::do_class_template(yyvsp[-1].val,yyvsp[0].str,yychar,NULL);
	if (yychar != YYEMPTY) yyclearin;
   ;
    break;}
case 344:
#line 1053 "parser.y"
{
    dcl_reset();        
    Template::do_class_template(yyvsp[-2].val,yyvsp[-1].str,yychar,yyvsp[0].typelist);
	if (yychar != YYEMPTY) yyclearin;
   ;
    break;}
case 347:
#line 1066 "parser.y"
{ dcl_set(); yyval.val = yyvsp[0].val; ;
    break;}
case 348:
#line 1069 "parser.y"
{ yyval.str = yyvsp[0].str;                     ;
    break;}
case 349:
#line 1070 "parser.y"
{ yyval.str = yyvsp[0].entry->name.c_str();       ;
    break;}
case 350:
#line 1074 "parser.y"
{ dcl_set(true); state.begin_templ_list(); ;
    break;}
case 351:
#line 1076 "parser.y"
{ dcl_reset();   state.end_templ_list();   ;
    break;}
case 352:
#line 1080 "parser.y"
{ yyval.typelist = new TypeList; ;
    break;}
case 353:
#line 1081 "parser.y"
{ yyval.typelist = yyvsp[-1].typelist; ;
    break;}
case 354:
#line 1086 "parser.y"
{ yyval.typelist = new TypeList; yyval.typelist->push_back(AsType(yyvsp[0].ctype)); ;
    break;}
case 355:
#line 1087 "parser.y"
{ yyval.typelist = yyvsp[-2].typelist; yyval.typelist->push_back(AsType(yyvsp[0].ctype));   ;
    break;}
case 356:
#line 1091 "parser.y"
{ yyval.str = yyvsp[0].str; ;
    break;}
case 357:
#line 1092 "parser.y"
{ yyval.str = yyvsp[0].entry->name.c_str(); ;
    break;}
case 358:
#line 1096 "parser.y"
{
   string c = yyvsp[0].str;
   yyval.ctype = AsTType(Template::dummy(t_null,c));
  ;
    break;}
case 359:
#line 1104 "parser.y"
{
                     yyval.ctype = AsTType(Template::dummy(AsType(yyvsp[0].ctype),state.token_stack.pop()));
	                 dcl_reset();  tpop();
	               ;
    break;}
case 360:
#line 1108 "parser.y"
{ yyval.ctype = AsTType(Template::dummy(yyvsp[0].entry)); ;
    break;}
case 361:
#line 1109 "parser.y"
{ yyval.ctype = yyvsp[0].ctype; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1113 "parser.y"
  



