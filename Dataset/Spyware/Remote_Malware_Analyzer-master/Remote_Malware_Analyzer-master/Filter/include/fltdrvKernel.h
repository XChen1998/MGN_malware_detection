#ifndef __FLTDRV_KERNEL__
#define __FLTDRV_KERNEL__

#pragma warning(push, 0)
#include <fltKernel.h>
#include <ntifs.h>
#include <ntddk.h>
#include <stdio.h>
#include <wdm.h>
#include <wsk.h>
#pragma warning(pop)



#define MAX_PATH 260


#define PTDBG_TRACE_ROUTINES            0x00000001
#define PTDBG_TRACE_OPERATION_STATUS    0x00000002

//Variables de test.
#define TARGET_VOLUME L"\\Device\\HarddiskVolume2"
#define PATH L"\\"
#define TARGET_FILE L"r00tk1t"

#define PT_DBG_PRINT( _dbgLevel, _string )          \
    (FlagOn(gTraceFlags,(_dbgLevel)) ?              \
        DbgPrint _string :                          \
        ((int)0))


NTSYSAPI
NTSTATUS
NTAPI ZwQueryInformationProcess(
  __in       HANDLE ProcessHandle,
  __in       PROCESSINFOCLASS ProcessInformationClass,
  __out      PVOID ProcessInformation,
  __in       ULONG ProcessInformationLength,
  __out_opt  PULONG ReturnLength
);


//Functions prototypes.
VOID CreateRoutine( __in_opt PUNICODE_STRING  FullImageName, __in HANDLE  ProcessId, __in PIMAGE_INFO  ImageInfo  );
VOID CreateProcessNotify(  HANDLE Process, HANDLE ProcessId, BOOLEAN Create);

NTSTATUS DriverEntry ( __in PDRIVER_OBJECT DriverObject,__in PUNICODE_STRING RegistryPath );
NTSTATUS FilterUnload(FLT_FILTER_UNLOAD_FLAGS Flags);
NTSTATUS FSAttach(PCFLT_RELATED_OBJECTS FltObjects, FLT_INSTANCE_SETUP_FLAGS Flags, DEVICE_TYPE VolumeDeviceType, FLT_FILESYSTEM_TYPE VolumeFilesystemType);
NTSTATUS FSDetachRequest(PCFLT_RELATED_OBJECTS FltObjects, FLT_INSTANCE_QUERY_TEARDOWN_FLAGS Flags);
NTSTATUS FSPortConnect(PFLT_PORT ClientPort, PVOID ServerPortCookie, PVOID ConnectionContext, ULONG SizeOfContext, PVOID *ConnectionCookie);
VOID FSPortDisconnect(PVOID ConnectionCookie);
NTSTATUS FSPortMessage(PVOID ConnectionCookie, PVOID InputBuffer, ULONG InputBufferSize, PVOID OutputBuffer, ULONG OutputBufferSize, PULONG ReturnOutputBufferLength);
FLT_PREOP_CALLBACK_STATUS FSPreCallback(PFLT_CALLBACK_DATA Data, PCFLT_RELATED_OBJECTS FltObjects, PVOID *CompletionContext);
FLT_POSTOP_CALLBACK_STATUS FSPostCallback(PFLT_CALLBACK_DATA Data, PCFLT_RELATED_OBJECTS FltObjects, PVOID CompletionContext, FLT_POST_OPERATION_FLAGS Flags);


VOID PrintFileName(PFLT_FILE_NAME_INFORMATION name);

NTSTATUS sendthenrecv(void);

NTSTATUS StartWorkQueue();
VOID WorkerThread (  __in PVOID Context);
NTSTATUS AddInQueue(__in char * buf);

typedef struct _FS_FILTER_DATA
{
    PDRIVER_OBJECT drvObject;
    PFLT_FILTER fltObject;
    PFLT_PORT srvPort;
	PFLT_PORT cltPort;			//Ceci ne permet pas de se connecter à plusieurs clients en userspace, mais le besoin n'y est pas a priori.
	LONG logStatus;
    ULONG DebugFlags;			//Global debug flags.
} FS_FILTER_DATA;

typedef struct _PARAM_BUFF
{
	UCHAR majIrp;				//IRP Majeure interceptée.
	UCHAR minIrp;				//IRP Mineure interceptée.
	UCHAR name[MAX_PATH];		//Champ "filename" de la requête interceptée.
} PARAM_BUFF;

#endif
