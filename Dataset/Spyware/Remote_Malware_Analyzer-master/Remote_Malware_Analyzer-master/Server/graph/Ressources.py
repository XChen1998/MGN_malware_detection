
class res_process :
	
	nb_creer = 0 # pour compter le nombre de processus creer depuis le debut
	nb_exist = 0 # pour compter le nombre de processus encore actifs
	def __init__(self): # constructeur par default de la calsse processus, normalement inutile.
		self.PID = 0 # on enregistre le PID
		self.PPID = 0 # le PID parent
		self.nom = "" # on ne nconnait pas le nom
		self.papa = "" # ni celui du pere
		res_process.nb_creer = res_process.nb_creer + 1
		res_process.nb_exist = res_process.nb_exist +1 # on incremente le compteur de processus
		
		self.corrompu = False # le fichier n'est pas corrompu a la creation
		
	def __init__(self, chif1, mot1, chif2, mot2): # constructeur de rocessus
		self.PID = chif1
		self.nom = mot1
		
		self.PPID = chif2 # on enregistre les pid
		self.papa = mot2 # on enregistre les noms
		res_process.nb_creer = res_process.nb_creer + 1
		res_process.nb_exist = res_process.nb_exist +1 # on incremente les compteur
		
		self.corrompu = False # le fichier n'est pas corrompu a la creation
		
		
	def __del__(self): # destructeur de processus
		res_process.nb_exist = res_process.nb_exist - 1 # on decremente le compteur


class res_fichier :
	
	nb_creer = 0 # poour compter le nombre de fichier creer depuis le debut
	nb_exist = 0 # pour compter le nombre de fichier encore existant
	def __init__(self): # constructeur par default, normalement inutile
		self.name = "" # on ne connait pas le nom
		
		self.corrompu = False # le fichier n'est pas corrompu a la creation
		
		res_fichier.nb_exist = res_fichier.nb_exist + 1 # on incremente les compteurs
		res_fichier.nb_creer = res_fichier.nb_creer + 1 # on incremente les compteurs
		
	def __init__(self, mot1): # constructeur de fichier
		self.name = mot1 # on enregistre le nom du fichier
		
		self.corrompu = False # le fchier n'est pas corrompu a la creation
		
		res_fichier.nb_exist = res_fichier.nb_exist + 1 # on incremente les compteurs
		res_fichier.nb_creer = res_fichier.nb_creer + 1 # on incremente les compteurs
		
	def __del__(self) :
		res_fichier.nb_exist = res_fichier.nb_exist - 1 # on decremente le compteur


class res_registre :
	
	nb_creer = 0 # poour compter le nombre de fichier creer depuis le debut
	nb_exist = 0 # pour compter le nombre de fichier encore existant
	def __init__(self): # constructeur par default, normalement inutile
		self.name = "" # on ne connait pas le nom
		
		self.corrompu = False # le fichier n'est pas corrompu a la creation
		
		res_fichier.nb_exist = res_fichier.nb_exist + 1 # on incremente les compteurs
		res_fichier.nb_creer = res_fichier.nb_creer + 1 # on incremente les compteurs
		
	def __init__(self, mot1): # constructeur de fichier
		self.name = mot1 # on enregistre le nom du fichier
		
		self.corrompu = False # le fchier n'est pas corrompu a la creation
		
		res_fichier.nb_exist = res_fichier.nb_exist + 1 # on incremente les compteurs
		res_fichier.nb_creer = res_fichier.nb_creer + 1 # on incremente les compteurs
		
	def __del__(self) :
		res_fichier.nb_exist = res_fichier.nb_exist - 1 # on decremente le compteur


class systemTrace :
	
	nb_proces_corrompu = 0 #on compte les object corrompu
	nb_fichier_corrompu = 0
	nb_registre_corrompu = 0

	def __init__(self): # constructeur, avec initialisation des dict
		self.source_corrup = "" # le fichier corrompu de depart doit etre defini
		
		self.tab_proc = {} # le dict des processus (vide)
		self.tab_proc[0] = res_process(0, "system", 0, "system")
		
		self.tab_fich = {} # le dict des fichiers (vide)
		self.tab_reg = {} # le dict des registre (vide)
		fichier = open("expension.txt", "w")
		fichier.write("Trackeur de trace :\n")
		fichier.close()
		
	def __init__(self, mot): # constructeur, avec initialisation des dict
		self.source_corrup = mot # le fichier corrompu de depart a ete donne en parametre
		print "La sourc de corruption est : ", mot
		
		self.tab_proc = {} # le dict des processus (vide)
		self.tab_proc[0] = res_process(0, "system", 0, "system")
		
		self.tab_fich = {} # le dict des fichiers (vide)
		self.tab_reg = {} # le dict des registre (vide)
		fichier = open("expension.txt", "w")
		fichier.write("Trackeur de trace :\n")
		fichier.close()
		
	def def_corrup(self, corrupteur):
		self.source_corrup = corrupteur # on defini le fichier corrompu de depart
	
	
	def new_proc(self, bebepid, bebename, papapid, papaname): # on a une creation de processus
		if bebepid not in self.tab_proc : # on ajoute une entre pid dans le dico et on creer le processus a metre dedans
			self.tab_proc[bebepid] = res_process(bebepid, bebename, papapid, papaname) 
		else:
			print "creation d'un processus deja existant !", bebepid # la, y'a un probleme...
			print "\t",self.tab_proc[bebepid].nom
			
		if papapid in self.tab_proc and self.tab_proc[papapid].corrompu and not self.tab_proc[bebepid].corrompu :
			self.tab_proc[bebepid].corrompu = True # on verifie si le fichier pere est corrompu
			systemTrace.nb_proces_corrompu = systemTrace.nb_proces_corrompu + 1
			self.sauvetrace("-- begin processus corrompu\nsource : processus parent\npid="+str(bebepid)+" ppid="+str(papapid)+"\n-- end process\n")
		if self.source_corrup in bebename.split("\\") and not self.tab_proc[bebepid].corrompu :
			self.tab_proc[bebepid].corrompu = True # on verifie si le fichier est la source de corrompu
			systemTrace.nb_proces_corrompu = systemTrace.nb_proces_corrompu + 1
			self.sauvetrace("-- begin processus corrompu\nsource : point depart\npid="+str(bebepid)+" ppid="+str(papapid)+"\n-- end process\n")
	
	def del_proc(self, bebepid, bebename, papapid, papaname): # un processus est detruit
		if bebepid not in self.tab_proc :
			print "destruction d'un processus inexistant !" # pas genant, mais bizare ...
		else:
			del self.tab_proc[bebepid] # on le supprime

	def create_fichier(self, fichier, pidpapa):
		if pidpapa not in self.tab_proc : #on verifie que le process pere existe
			print "process pere inconnu !", pidpapa
		elif fichier not in self.tab_fich : # on verifie que lefichier n'existe pas deja
			self.tab_fich[fichier] = res_fichier(fichier) # on le creer
			
		if pidpapa in self.tab_proc and self.tab_proc[pidpapa].corrompu and not self.tab_fich[fichier].corrompu : # on verifie s'il est corrompu
			self.tab_fich[fichier].corrompu = True
			systemTrace.nb_fichier_corrompu = systemTrace.nb_fichier_corrompu + 1
			self.sauvetrace("-- begin fichier corrompu\nsource : processus create\npid="+str(pidpapa)+" fichier="+str(fichier)+"\n-- end fichier\n")
		if self.source_corrup in fichier.split("\\") and not self.tab_fich[fichier].corrompu:
			self.tab_fich[fichier].corrompu = True
			systemTrace.nb_fichier_corrompu = systemTrace.nb_fichier_corrompu + 1
			self.sauvetrace("-- begin fichier corrompu\nsource : point depart\npid="+str(pidpapa)+" fichier="+str(fichier)+"\n-- end fichier\n")
		#else : #le fichier existe deja !
		#	print "creation d'un fichier deja existant !"
			
	def acces_fichier(self, fichier, pidpapa) :
		if fichier not in self.tab_fich :
			#print "acces a un fichier inexistant !"
			self.create_fichier(fichier,0)
		
		if pidpapa not in self.tab_proc :
			print "access fichier par un process inexistant !"
		else :
			if self.tab_fich[fichier].corrompu and not self.tab_proc[pidpapa].corrompu :
				self.tab_proc[pidpapa].corrompu = True
				systemTrace.nb_fichier_corrompu = systemTrace.nb_fichier_corrompu + 1
				self.sauvetrace("-- begin processus corrompu\nsource : lecture fichier\npid="+str(pidpapa)+" fichier="+str(fichier)+"\n-- end process\n")
				
	def modif_fichier(self, fichier, pidpapa) :
		if fichier not in self.tab_fich :
			#print "modification d'un fichier inexistant !"
			self.create_fichier(fichier,0)
			
		if pidpapa not in self.tab_proc :
			print "modification fichier par un process inexistant !"
		else :
			if self.tab_proc[pidpapa].corrompu and not self.tab_fich[fichier].corrompu :
				self.tab_fich[fichier].corrompu = True
				systemTrace.nb_fichier_corrompu = systemTrace.nb_fichier_corrompu + 1
				self.sauvetrace("-- begin fichier corrompu\nsource : processus acces\npid="+str(pidpapa)+" fichier="+str(fichier)+"\n-- end fichier\n")
				
				
	
	def create_registre(self, registre, pidpapa):
		if pidpapa not in self.tab_proc : #on verifie que le process pere existe
			print "process pere inconnu !", pidpapa
		elif registre not in self.tab_reg : # on verifie que lefichier n'existe pas deja
			self.tab_reg[registre] = res_registre(registre) # on le creer
			
		if pidpapa in self.tab_proc and self.tab_proc[pidpapa].corrompu and not self.tab_reg[registre].corrompu : # on verifie s'il est corrompu
			self.tab_reg[registre].corrompu = True
			systemTrace.nb_registre_corrompu = systemTrace.nb_registre_corrompu + 1
			self.sauvetrace("-- begin registre corrompu\nsource : processus create\npid="+str(pidpapa)+" registre="+str(registre)+"\n-- end fichier\n")
		if self.source_corrup in registre.split("\\") and not self.tab_reg[registre].corrompu :
			self.tab_reg[registre].corrompu = True
			systemTrace.nb_registre_corrompu = systemTrace.nb_registre_corrompu + 1
			self.sauvetrace("-- begin registre corrompu\nsource : point depart\npid="+str(pidpapa)+" fichier="+str(registre)+"\n-- end fichier\n")
		#else : #le fichier existe deja !
		#	print "creation d'un fichier deja existant !"
			
	def acces_registre(self, registre, pidpapa) :
		if registre not in self.tab_reg :
			#print "acces a un fichier inexistant !"
			self.create_registre(registre,0)
		
		if pidpapa not in self.tab_proc :
			print "access fichier par un process inexistant !"
		else :
			if self.tab_reg[registre].corrompu and not self.tab_proc[pidpapa].corrompu:
				self.tab_proc[pidpapa].corrompu = True
				systemTrace.nb_registre_corrompu = systemTrace.nb_registre_corrompu + 1
				self.sauvetrace("-- begin processus corrompu\nsource : lecture registre\npid="+str(pidpapa)+" fichier="+str(registre)+"\n-- end process\n")
				
	def modif_registre(self, registre, pidpapa) :
		if registre not in self.tab_reg :
			#print "modification d'un fichier inexistant !"
			self.create_registre(registre,0)
			
		if pidpapa not in self.tab_proc :
			print "modification fichier par un process inexistant !"
		else :
			if self.tab_proc[pidpapa].corrompu and not self.tab_reg[registre].corrompu :
				self.tab_reg[registre].corrompu = True
				systemTrace.nb_registre_corrompu = systemTrace.nb_registre_corrompu + 1
				self.sauvetrace("-- begin registre corrompu\nsource : processus acces\npid="+str(pidpapa)+" fichier="+str(registre)+"\n-- end fichier\n")
				
				
	
	
	def sauvetrace(self, text):
		fichier = open("expension.txt", "a")
		fichier.write(text)
		fichier.close()
