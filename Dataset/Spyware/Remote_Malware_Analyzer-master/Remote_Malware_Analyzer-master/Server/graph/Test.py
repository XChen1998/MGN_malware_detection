import sys
from Ressources import *

if __name__ == "__main__":
	if len(sys.argv) < 2:
		print("donnez un fichier en entree") # pour prendre en argument le fichier a lire.
		sys.exit(1) # on avait pas de fichier a lire, alors on s'en va.
		
	argument = sys.argv[1] # on recupere le nom du fichier a lire.
	try:
		trace = open(argument, "r") # on ouvre le fichier en lecture
	except:
		print "Le fichier ne s'ouvre pas !"
		sys.exit(1) # si on est ici, il y a eu un probleme d'ouverture du fichier.
		
		
	poursuite = systemTrace("xxx-porn-movie.avi.exe")
	
	ligne = "go !" #on initialise la ligne
      
	# je creer des variable pour compter le nombre d'acces au different types de ressources utilise
	nb_proc = 0 # les processus
	nb_proc_good = 0
	nb_proc_bad = 0
	
	nb_registre = 0 # les acces au registre
	
	#les types d'acces registre
	nb_reg_open = 0
	nb_query_value_key = 0
	nb_reg_create = 0
	nb_reg_set_value_key = 0
	nb_reg_delete = 0
	
	nb_acces = 0 # les acces fichier
		
	# les types d'acces fichier
	nb_create = 0
	nb_read = 0
	nb_write = 0
	nb_Todok = 0
	nb_unlink = 0
	nb_query = 0
	nb_load = 0
	nb_device_io_control = 0
	nb_query_EA = 0
	nb_set_EA = 0
	nb_non_renseigne = 0
	nb_create_overwrite_if = 0
	nb_create_open = 0
	
	nb_inconnu = 0 # les lignes non traite
	
	position = 0 # numero de ligne courrante
	
	# je veut savoir si on me signale que le prochain access processus sera une destruction
	destruction = False
	
	while ligne != '' :  # il faut faire une boucle sur tout le fichier
		ligne = trace.readline().rstrip('\n\r') # on lit la ligne courante
		position = position + 1
		phrase = ligne.split()
		
		if ligne == "------ Create process" : # cette ligne ne sert a rien, vu que par default je considere les processus comme en mode creation
			destruction = False
		elif ligne == "------ Descruction process" : # l'information que le procesqsus est en mode destruction se trouve en dehors des entre process 
			destruction = True
		elif ligne == "---- Begin" :
			nb_proc = nb_proc + 1 # nous entrons dans un nouvel acces processus
			papa = ["inconnu","0"] # on initialise le processus parent a 0
			bebe = ["inconnu","0"] # on initialise le processus fils a 0, normalement, cela ne sert a rien.
			
			while ligne != "---- END" : #tant que l'on ne sort pas de l'entree process
				ligne = trace.readline().rstrip('\n\r') # on lit la ligne courante
				position = position + 1
				phrase = ligne.split()
					
				if phrase[0] == "Parent" : #on cherche le pid du processus parent
					papa[0] = phrase[4]
					papa[1] = phrase[5].split('=')[1] #on enregistre qui est le processus parent
				
				elif phrase[0] == "Process" :
					bebe[0] = phrase[3]
					try:
						bebe[1] = phrase[4].split('=')[1]
					except:
						crade = True
						variable = 5
						while crade : # il y a un espace dans le nom de fichier, alors j'avance jusqu'a retrouver le PID
							try:
								bebe[1] = phrase[variable].split('=')[1]
								crade = False
							except:
								variable = variable + 1
						
			if bebe[0] == "inconnu" :
				nb_proc_bad = nb_proc_bad + 1
			else :
				nb_proc_good = nb_proc_good +1
				if destruction :
					poursuite.del_proc(bebe[1],bebe[0],papa[1],papa[0])
				else :
					poursuite.new_proc(bebe[1],bebe[0],papa[1],papa[0])
			
			destruction = False
			
			
		elif phrase.__len__() > 2 and phrase[0] == "Parent" :
			# ce cas est pour ratrapper les process sans begin !!
			
			nb_proc = nb_proc + 1 # nous entrons dans un nouvel acces processus
			papa = ["inconnu","0"] # on initialise le processus parent a 0
			bebe = ["inconnu","0"] # on initialise le processus fils a 0, normalement, cela ne sert a rien.
			
			papa[0] = phrase[4]
			papa[1] = phrase[5].split("=")[1] #on enregistre qui est le processus parent
			
			while ligne != "---- END" : #tant que l'on ne sort pas de l'entree process
				ligne = trace.readline().rstrip('\n\r') # on lit la ligne courante
				position = position + 1
				phrase = ligne.split()
					
				if phrase[0] == "Parent" : #on cherche le pid du processus parent
					papa[0] = phrase[4]
					papa[1] = phrase[5].split('=')[1] #on enregistre qui est le processus parent
				
				elif phrase[0] == "Process" and phrase[1] == "name" and phrase[2] == ":":
					bebe[0] = phrase[3]
					try:
						bebe[1] = phrase[4].split('=')[1]
					except:
						crade = True
						variable = 5
						while crade : # il y a un espace dans le nom de fichier, alors j'avance jusqu'a retrouver le PID
							try:
								bebe[1] = phrase[variable].split('=')[1]
								crade = False
							except:
								variable = variable + 1
						
			if bebe[0] == "inconnu" :
				nb_proc_bad = nb_proc_bad + 1
			else :
				nb_proc_good = nb_proc_good +1
				if destruction :
					poursuite.del_proc(bebe[1],bebe[0],papa[1],papa[0])
				else :
					poursuite.new_proc(bebe[1],bebe[0],papa[1],papa[0])
			
			destruction = False
			
			
			
		elif ligne == "------- Enter in IRP" or ligne == "------- Loading":
			nb_acces = nb_acces + 1 # nous entrons dans un nouvel acces fichier
			# un acces fichier est enregistrer sous forme de liste :
			# Access = [0: num_trace, 1: num_cpu, 2: timestamp, 3: access_type, 4: pid name, 5: pid number, 6: object name]
			Access = ['','','','','','','','']
			
			while ligne != "-------- Exit IRP" and ligne != "------- End loading" :
				ligne = trace.readline().rstrip('\n\r') # on lit la ligne courante tant qu'on ne sort pas de l'access fichier
				position = position + 1
				phrase = ligne.split()
				
				if phrase[0][:5] == "trace" :  # si la ligne donne la trace, on la recupere ainssi que le numero cpu
					Access[0] = phrase[0]
					Access[1] = phrase[2]
				
				elif phrase[0][:9] == "timestamp" : # si la ligne donne le timestamp, on le recupere (meme si il sert a rien)
					Access[2] = phrase[0]
				
				elif phrase[0] == "Access" : #si la ligne donne le type d'access, on le recopie.
					Access[3] = phrase[2] 
				
				elif phrase[0] == "pid" : # si la ligne donne le pid, on le recupere avec le nom du programme
					Access[4] = phrase[2]
					Access[5] = phrase[3]
				
				elif phrase[0] == "Object" and phrase[1] == "Name" : # on recupere le nom du fichier accede
					Access[6] = phrase[3]

			if Access[3] == "create_create" :
				nb_create = nb_create + 1
				poursuite.create_fichier(Access[6],Access[5]) # creation d'un fichier avec son nom et le PID parent
			elif Access[3] == "read" :
				nb_read = nb_read + 1
				poursuite.acces_fichier(Access[6],Access[5]) # acces d'un fichier en lecture
			elif Access[3] == "write" :
				nb_write = nb_write + 1
				poursuite.modif_fichier(Access[6],Access[5]) # acces d'un fichier en ecriture
			elif Access[3] == "Todok" :
				nb_Todok = nb_Todok + 1
				# ?
			elif Access[3] == "unlink" :
				nb_unlink = nb_unlink + 1
				poursuite.acces_fichier(Access[6],Access[5]) # acces d'un fichier en lecture
				# ?
			elif Access[3] == "query" :
				nb_query = nb_query +1
				poursuite.acces_fichier(Access[6],Access[5]) # acces d'un fichier en lecture
			elif Access[3] == "load" :
				nb_load = nb_load +1
				poursuite.modif_fichier(Access[6],Access[5]) # acces d'un fichier en ecriture
				# ?
			elif Access[3] == "device_io_control" :
				nb_device_io_control = nb_device_io_control + 1
				# ?
			elif Access[3] == "query_EA" :
				nb_query_EA = nb_query_EA +1
				# poursuite.acces_fichier(Access[6],Access[5]) # acces d'un fichier en lecture
			elif Access[3] == "set_EA" :
				nb_set_EA = nb_set_EA +1
				poursuite.modif_fichier(Access[6],Access[5]) # acces d'un fichier en ecriture
#			elif Access[3] == "create_overwrite_if" :
#				nb_create_overwrite_if = nb_create_overwrite_if + 1
#				poursuite.create_fichier(Access[6],Access[5]) # creation d'un fichier avec son nom et le PID parent
			elif Access[3] == "create_open" :
				nb_create_open = nb_create_open + 1
				poursuite.create_fichier(Access[6],Access[5]) # creation d'un fichier avec son nom et le PID parent
			elif Access[3] == "" :
				nb_non_renseigne = nb_non_renseigne + 1
			else :
				print "type acces fichier inconnu:",Access[3]
			
		
		elif ligne == "-- BEGIN" :
			nb_registre = nb_registre + 1
			# un acces registre est enregistrer sous forme de liste :
			# Access = [0: num_trace, 1: num_cpu, 2: timestamp, 3: access_type, 4: pid name, 5: pid number, 6: object name]
			Access = ['','','','','','','','']
			while ligne != "-- END" :
				ligne = trace.readline().rstrip('\n\r') # on lit la ligne courante tant qu'on ne sort pas de l'access fichier
				position = position + 1
				phrase = ligne.split()

				if(len(phrase)>0):
					if phrase[0][:5] == "trace" :  # si la ligne donne la trace, on la recupere ainssi que le numero cpu
						Access[0] = phrase[0]
						Access[1] = phrase[2]
					
					elif phrase[0][:9] == "timestamp" : # si la ligne donne le timestamp, on le recupere (meme si il sert a rien)
						Access[2] = phrase[0]
					
					elif phrase[0] == "Access" : #si la ligne donne le type d'access, on le recopie.
						Access[3] = phrase[2] 
					
					elif phrase[0] == "pid" : # si la ligne donne le pid, on le recupere avec le nom du programme
						Access[4] = phrase[2]
						Access[5] = phrase[3]
					
					elif len(ligne.split("\\")) > 1 :
						Access[6] = ligne
			
			
			if Access[3] == "open" :
				nb_reg_open = nb_reg_open + 1
				poursuite.acces_registre(Access[6],Access[5])
			elif Access[3] == "query_value_key" :
				nb_query_value_key = nb_query_value_key + 1
				poursuite.acces_registre(Access[6],Access[5])
			elif Access[3] == "create" :
				nb_reg_create = nb_reg_create + 1
				poursuite.create_registre(Access[6],Access[5])
			elif Access[3] == "set_value_key" :
				nb_reg_set_value_key = nb_reg_set_value_key + 1
				poursuite.modif_registre(Access[6],Access[5])
			elif Access[3] == "delete" :
				nb_reg_delete = nb_reg_delete + 1
				poursuite.modif_registre(Access[6],Access[5])
				#?
			else :
				print "type acces registre inconnu:", Access[3]
		
		else :
			nb_inconnu = nb_inconnu +1
			print "lhs :", position, ":", ligne
	
	trace.close()
	#print "fermeture du fichier."
	
	print "\non a traite",nb_proc,"processus."
	#print "\t",nb_proc_good,"se sont bien passe"
	#print "\t",nb_proc_bad,"n'ont pas ete creer"
	
	print nb_acces,"access fichier on ete effectue:"
	print "\t",nb_create,"en creation"
	print "\t",nb_create_overwrite_if, "en mode create_overwrite_if"
	print "\t", nb_create_open, "en mode create_open"
	print "\t",nb_read,"en lecture"
	print "\t",nb_write,"en ecriture"
	print "\t",nb_Todok,"en todok"
	print "\t",nb_unlink,"en unlink"
	print "\t",nb_query,"en query"
	print "\t",nb_load,"en load"
	print "\t",nb_device_io_control,"en device_io_control"
	print "\t",nb_query_EA,"en query_EA"
	print "\t",nb_set_EA,"en set_EA"
	print "\t",nb_non_renseigne, "n'ont pas precise le type d'acces"
	
	print nb_registre, "access registre on ete effectue:"
	print "\t", nb_reg_open, "en mode open"
	print "\t",nb_query_value_key, "en mode query_value_key"
	print "\t",nb_reg_create,"en mode create"
	print "\t",nb_reg_set_value_key, "en mode set_value_key"
	print "\t",nb_reg_delete,"en mode delete"
	
	print nb_inconnu,"lignes etait hors syntaxe."
	
	print "\nLe nombre de processus corrompu est :", poursuite.nb_proces_corrompu
	print "Le nombre de fichiers corrompu est :", poursuite.nb_fichier_corrompu
	print "le nombre de registre corrompu est :", poursuite.nb_registre_corrompu
	#print poursuite.tab_proc
