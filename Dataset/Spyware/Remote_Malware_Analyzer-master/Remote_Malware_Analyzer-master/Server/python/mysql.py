import MySQLdb as mysql

class dbconfig:
    database        =       'sandbox'        # Database to connect to. Please use an empty database for best results.
    user            =       'sandbox'      # User ID to connect with
    password        =       'azerty'      # Password for given User ID
    hostname        =       'localhost'     # Hostname
    port            =        3306           # Port Number


class dbinterface:

    def __init__(self, dbconfig):
        self.dbconfig = dbconfig
        try:
                self.conn = mysql.connect (host = self.dbconfig.hostname,db=self.dbconfig.database, user = self.dbconfig.user, passwd = self.dbconfig.password )
        except:
                print("Connexion failed: toto")
 
    def IdSession(self, md5):
        request = "SELECT MAX(run) FROM session"

        cursor = self.conn.cursor()
        cursor.execute(request.encode("utf-8","replace"))
        row = cursor.fetchone()
        sessionMax = row[0]
        cursor.close()
        return sessionMax
 

    def newIdSession(self, md5):
        request = "SELECT MAX(run) FROM session"

        cursor = self.conn.cursor()
        cursor.execute(request.encode("utf-8","replace"))

        row = cursor.fetchone()
        sessionMax = row[0]
        sessionMax = sessionMax + 1
        insertLine = "INSERT INTO session(run,md5) VALUES('%i', '%s')"%(sessionMax,str(md5))
        cursor.execute(insertLine)
        self.conn.commit()
        cursor.close()
        return sessionMax
 
    def addCreateProcess(self, buf, run):
        ligne = buf.split("\n")
        taille=len(ligne)-2
        pid=ligne[taille-1].split("=")[1]        
        name = ""
        finligne = ligne[taille-1].split(":")[1]
        religne = finligne.split()
        i=0        
        while not "pid=" in religne[i]:
              if name == "":
                 name = religne[i]
              else:
                 name = name + " " + religne[i]
              i=i+1
        name =  name.replace("\\","\\\\")
        name_obj = ""
        finligne = ligne[taille].split(":")[1]
        religne = finligne.split()
        i=0        
        while not "pid=" in religne[i]:
              if name_obj == "":
                 name_obj = religne[i]
              else:
                 name_obj = name_obj + " " + religne[i]
              i=i+1
        name_obj =  name_obj.replace("\\","\\\\")
        cursor = self.conn.cursor()
        insertLine = "INSERT INTO action(trace, cpu, timestamp, pid, name, action, objet, run) VALUES('%i','%i','%i','%i', '%s', '%s','%s','%i')"%(int(0), int(0), int(0),int(pid), name, "load", name_obj, int(run))
        cursor.execute(insertLine)
        self.conn.commit()
        cursor.close()
        ligne=buf.split("\n")
        taille = len(ligne)-2
        self.addProcess(ligne[taille],run)

    def addAction(self, buf, run):
       ligne = buf.split("\n")
       if len(ligne) != 6:
         print ligne
         print len(ligne)
         return
       try:
         trace = ligne[0].split("=")[1].split()[0]
         cpu = ligne[0].split("=")[2]
         timestamp = ligne[1].split("=")[1].split()[0]
         access = ligne[2].split(":")[1].split()[0]
         name = ligne[3].split(":")[1].split()[0]
         pid = ligne[3].split(":")[1].split()[1]
         objet = ligne[4].split(":")[1].replace("\\","\\\\")
         cursor = self.conn.cursor()
         insertLine = "INSERT INTO action(trace, cpu, timestamp, pid, name, action, objet, run) VALUES('%i','%i','%i','%i', '%s', '%s','%s','%i')"%(int(trace), int(cpu), int(timestamp),int(pid), name, access, objet, int(run))
         cursor.execute(insertLine)
         self.conn.commit()
         cursor.close()
       except:
         return

    def addProcess(self, ligne, run):
        liste = ligne.split(":")
        name = ""
        reliste =  liste[1].split()
        i=0
        while not "pid=" in reliste[i]:
              if name == "":
                 name = reliste[i]
              else:
                 name = name + " " + reliste[i]
              i=i+1
        name =  name.replace("\\","\\\\")
        if name != "System":
           finliste = liste[1].split("=")
           pidi = finliste[1].split()
           ppidi = finliste[2].split()
           sidi = finliste[3].split()
           pid= pidi[0]
           ppid= ppidi[0]
           sid= sidi[0]
        else:
           pid=4
           ppid=0
           sid=0

        cursor = self.conn.cursor()
        insertLine = "INSERT INTO process(pid, name, ppid, sid, run) VALUES('%i', '%s', '%i','%i','%i')"%(int(pid), name, int(ppid), int(sid), int(run))
        cursor.execute(insertLine)
        self.conn.commit()
        cursor.close()

    def addRegistry(self, buf, run):
       ligne = buf.split("\n")
       if len(ligne) != 6 and len(ligne) != 7 and len(ligne) != 8:
          print ligne
          print len(ligne)
          return
       if len(ligne) == 8:
          try:
             trace = ligne[0].split("=")[1].split()[0]
             cpu = ligne[0].split("=")[2]
             timestamp = ligne[1].split("=")[1].split()[0]
             access = ligne[2].split(":")[1].split()[0]
             name = ligne[3].split(":")[1].split()[0].replace("\\","\\\\")
             pid = ligne[3].split(":")[1].split("=")[1].split()[0]
             objet = ligne[4].replace("\\","\\\\")
             data = ligne[5]
             data_set = ligne[6]
             data = data + data_set
             cursor = self.conn.cursor()
             insertLine = "INSERT INTO registre(trace, cpu, timestamp, pid, name, action, objet, data,run) VALUES('%i','%i','%i','%i', '%s', '%s','%s','%s','%i')"%(int(trace), int(cpu), int(timestamp),int(pid), name, access, objet, data,int(run))
             cursor.execute(insertLine)
             self.conn.commit()
             cursor.close()
             return
          except:
             print "loupe"
             print ligne
             return


       try:
          trace = ligne[0].split("=")[1].split()[0]
          cpu = ligne[0].split("=")[2]
          timestamp = ligne[1].split("=")[1].split()[0]
          access = ligne[2].split(":")[1].split()[0]
          name = ligne[3].split(":")[1].split()[0].replace("\\","\\\\")
          pid = ligne[3].split(":")[1].split()[1].split()[0]
          objet = ligne[4].replace("\\","\\\\")
          data = ligne[5].replace("\\","\\\\")
          cursor = self.conn.cursor()
          insertLine = "INSERT INTO registre(trace, cpu, timestamp, pid, name, action, objet, data,run) VALUES('%i','%i','%i','%i', '%s', '%s','%s','%s','%i')"%(int(trace), int(cpu), int(timestamp),int(pid), name, access, objet, data,int(run))
          cursor.execute(insertLine)
          self.conn.commit()
          cursor.close()
       except:
          print "loupe"
          print  ligne
          return


