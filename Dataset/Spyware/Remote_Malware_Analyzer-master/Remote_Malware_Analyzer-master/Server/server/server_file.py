import SocketServer
#from line import readTrace
from lineThread import lineThread
from Queue import *
import threading
import logging
import sys

class traceServer(SocketServer.BaseRequestHandler):
    
    def settoRead(qu):
        self.__toRead = qu

    def handle(self):
        rest = ""
        while 1:
            self.data = self.request.recv(3100)
            if not self.data: 
                print("Connexion Error !!!!!!!!!!!!!!")
                self.data = self.request.recv(3100)
                if not self.data:
                    print("Connexion CLOSED !!!!!!!!!!!!")
                    break
            self.server.getQueue().put(self.data)

class traceServerTCP(SocketServer.TCPServer):
    
    def setQueue(self,qu):
        self.toRead = qu
        
    def getQueue(self):
        return self.toRead
    
class traceServerThread(threading.Thread):
    def __init__(self, toRead):
        threading.Thread.__init__(self)
        self.Terminated = False
        self.server = traceServerTCP((HOST, PORT), traceServer)
        self.server.setQueue(toRead)
    
    def run(self):
        while not self.Terminated:
             self.server.serve_forever()
        
    def stop(self):
        self.Terminated = True   

if __name__ == "__main__":
    HOST, PORT = "192.168.99.103", 1338
   # HOST, PORT = "192.168.1.12", 1338
    
    toRead = Queue()
    
    
    trThread = traceServerThread(toRead)
    trThread.daemon = True
    trThread.start()
    
    lineT = lineThread(toRead, sys.argv[1])
    lineT.daemon = True
    lineT.start()
    lineT.join()
    
