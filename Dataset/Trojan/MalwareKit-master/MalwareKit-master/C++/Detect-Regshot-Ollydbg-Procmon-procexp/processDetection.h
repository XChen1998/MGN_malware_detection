#include <windows.h>
#include <Winuser.h>
#include <Tlhelp32.h> 
#include <stdio.h>
#pragma comment(lib, "user32.lib")

DWORD FindProcessId(char* processName)
{
    char* p = strrchr(processName, '\\');
    if(p)
        processName = p+1;

    PROCESSENTRY32 processInfo;
    processInfo.dwSize = sizeof(processInfo);

    HANDLE processesSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);
    if ( processesSnapshot == INVALID_HANDLE_VALUE )
        return 0;

    Process32First(processesSnapshot, &processInfo);
    if ( !strcmp(processName, processInfo.szExeFile) )
    {
        CloseHandle(processesSnapshot);
        return processInfo.th32ProcessID;
    }

    while ( Process32Next(processesSnapshot, &processInfo) )
    {
        if ( !strcmp(processName, processInfo.szExeFile) )
        {
          CloseHandle(processesSnapshot);
          return processInfo.th32ProcessID;
        }
    }

    CloseHandle(processesSnapshot);
    return 0;
}

bool DetectProcessMonitor(){
	if(FindProcessId("Procmon64.exe") || FindProcessId("Procmon.exe *32")){
		return true;
	}else{
		return false;
	}
}

bool DetectProcessExplorer(){
	if(FindProcessId("procexp64.exe") || FindProcessId("procexp.exe *32")){
		return true;
	}else{
		return false;
	}
}

bool DetectOllyDbg(){
    if(FindProcessId("OLLYDBG.EXE") || FindProcessId("ollydbg.exe") || FindProcessId("ollydbg64.exe") || FindProcessId("OLLYDBG64.EXE")){
        return true;
    }else{
        return false;
    }
}

bool DetectRegshot(){
    if(FindProcessId("Regshot-x64-Unicode.exe") || FindProcessId("Regshot-x64-ANSI.exe") ||\
     FindProcessId("Regshot-x86-ANSI.EXE") || FindProcessId("Regshot-x86-Unicode.exe") ||\
     FindProcessId("Regshot-x64-Unicode.exe *32") || FindProcessId("Regshot-x64-ANSI.exe *32") ||\
     FindProcessId("Regshot-x86-ANSI.exe *32") || FindProcessId("Regshot-x86-Unicode.exe *32")\
     ){
        return true;
    }else{
        return false;
    }
}