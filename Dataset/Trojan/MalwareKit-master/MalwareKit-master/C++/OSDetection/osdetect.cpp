#include <windows.h>
#include <iostream>
using namespace std;
#include <stdio.h>
#include <strsafe.h>
#pragma comment(lib, "User32.lib")

typedef void (WINAPI *PGNSI)(LPSYSTEM_INFO);
typedef BOOL (WINAPI *PGPI)(DWORD, DWORD, DWORD, DWORD, PDWORD);

char* GetOS()
{
   OSVERSIONINFOEX osvi;
   SYSTEM_INFO si;
   PGNSI pGNSI;
   PGPI pGPI;
   BOOL bOsVersionInfoEx;

   ZeroMemory(&si, sizeof(SYSTEM_INFO));
   ZeroMemory(&osvi, sizeof(OSVERSIONINFOEX));

   osvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFOEX);
   bOsVersionInfoEx = GetVersionEx((OSVERSIONINFO*) &osvi);

   if( ! bOsVersionInfoEx ){
    #ifdef __APPLE__
      return "Mac";
    #elif __linux__
      return "Linux";
    #elif __unix__
      return "Unix";
    #endif
      return "Other";
   }

   pGNSI = (PGNSI) GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "GetNativeSystemInfo");
   if(NULL != pGNSI)
      pGNSI(&si);
   else GetSystemInfo(&si);

   if ( VER_PLATFORM_WIN32_NT==osvi.dwPlatformId && osvi.dwMajorVersion > 4 ){
      if ( osvi.dwMajorVersion == 6 ){
         if( osvi.dwMinorVersion == 0 ){
            if( osvi.wProductType == VER_NT_WORKSTATION )
                return "Windows Vista";
            else return "Windows Server 2008"; 
         }
         if ( osvi.dwMinorVersion == 1 || osvi.dwMinorVersion == 2 ){
            if ( osvi.wProductType == VER_NT_WORKSTATION && osvi.dwMinorVersion == 1)
                return "Windows 7";
            else
            if ( osvi.wProductType == VER_NT_WORKSTATION && osvi.dwMinorVersion == 2)
                return "Windows 8";
            else return "Windows Server 2008 R2";
         }
      }
      if ( osvi.dwMajorVersion == 5 && osvi.dwMinorVersion == 2 ){
         if ( osvi.wSuiteMask & VER_SUITE_WH_SERVER )
            return "Windows Home Server";
         else if( osvi.wProductType == VER_NT_WORKSTATION && si.wProcessorArchitecture==PROCESSOR_ARCHITECTURE_AMD64)
            return "Windows XP Professional";
         else return "Windows Server 2003"; 
      }

      if ( osvi.dwMajorVersion == 5 && osvi.dwMinorVersion == 1 )
         return "Windows XP";
      if ( osvi.dwMajorVersion == 5 && osvi.dwMinorVersion == 0 )
         return "Windows 2000";
      return "Windows"; 
   }
   else  
      return "Other";
}

int main()
{
    printf(GetOS());
}