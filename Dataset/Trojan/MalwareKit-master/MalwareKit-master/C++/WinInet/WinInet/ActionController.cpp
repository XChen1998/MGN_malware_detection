#include "ActionController.h"

// Date constructor
ActionController::ActionController()
{
	actions = vector<string>();
	arguments = vector<vector<string>>();
	accessMutex = CreateMutex(NULL, true, NULL);
	if (accessMutex == NULL) {
		printf("ActionController could not create its mutex\n");
	}
	ReleaseMutex(accessMutex);
}

void ActionController::addAction(string action, vector<string> action_args)
{
	// wait and lock the access mutex
	WaitForSingleObject(accessMutex, INFINITE);
	actions.push_back(action);
	arguments.push_back(action_args);
	ReleaseMutex(accessMutex);
}

void ActionController::addAction(struct Action action)
{
	// wait and lock the access mutex
	WaitForSingleObject(accessMutex, INFINITE);
	actions.push_back(action.action);
	arguments.push_back(action.arguments);
	ReleaseMutex(accessMutex);
}

struct Action ActionController::getNextAction()
{
	// wait and lock the access mutex
	WaitForSingleObject(accessMutex, INFINITE);
	struct Action action;
	if (!actions.empty()) {
		action = { actions.back(), arguments.back() };
		//action->action = actions.back();
		actions.pop_back();
		//action->arguments = arguments.back();
		arguments.pop_back();
	}
	ReleaseMutex(accessMutex);
	return action;
}

struct Action ActionController::parseAction(string data) {
	// a vector that will store the parameters for the action received
	vector<string> params = vector<string>();
	//printf("data: %s\n", data.c_str());
	int quoteIndex = data.find('\"', 1);
	// seperate the action in the beginning from the action args array at the end
	string action = data.substr(1, quoteIndex - 1);
	// seperate the args array from the rest of the data
	string args = data.substr(quoteIndex + 3, data.size() - (quoteIndex + 4));
	//printf("action: %s\n", action.c_str());
	//printf("args: %s\n", args.c_str());
	//actions->push_back(action);

	// this tokenizes the arguments in the array into seperate strings and pushes them into the vector
	string nextArg;
	int startPos = 0;
	int endPos = args.find(", ");
	while (endPos != -1) {
		nextArg = args.substr(startPos, endPos - startPos);
		params.push_back(nextArg);
		//printf("got: %s\n", nextArg.c_str());
		// add 2 since our token is 2 chars long
		startPos = endPos + 2;
		endPos = args.find(", ", startPos);
	}
	// since we might have an empty array, check that next args is not empty before pushing it
	nextArg = args.substr(startPos);
	if (nextArg != "") {
		//printf("got: %s\n", nextArg.c_str());
		params.push_back(nextArg);
	}
	// create an action out of the parsed data
	struct Action action_struct = { action, params };
	return action_struct;
}

bool ActionController::hasAction() {
	return !actions.empty();
}