#include "curl.h"
#include <wininet.h>
#include <tchar.h>
#include <string>
#include "HttpLib.h"
#include "UtilLib.h"
#include <iostream>

using namespace std;

// returns a dynamically allocated array, DONT FORGET TO CLEAN UP the memeory
char* httpGetRequest(string url, string api, int port, char* args){
	// string variable to store the response from the server
	string response = "";
	// append the query string '?args=value..." to the end of the url
	wstring wapi = s2ws(api) + s2ws(args);

	HINTERNET hInternet = InternetOpenW(L"MyUserAgent", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);

	if (hInternet == NULL)
	{
		cout << "InternetOpenW failed with error code " << GetLastError() << endl;
	}
	else
	{
		HINTERNET hConnect = InternetConnectW(hInternet, s2ws(url).c_str(), port, NULL, NULL, INTERNET_SERVICE_HTTP, 0, NULL);

		if (hConnect == NULL)
		{
			//cout << "InternetConnectW failed with error code " << GetLastError() << endl;
		}
		else
		{
			const wchar_t* parrAcceptTypes[] = { L"text/*", NULL };
			HINTERNET hRequest = HttpOpenRequestW(hConnect, L"GET", wapi.c_str(), NULL, NULL, parrAcceptTypes, INTERNET_FLAG_NO_CACHE_WRITE, 0);

			if (hRequest == NULL)
			{
				//cout << "HttpOpenRequestW failed with error code " << GetLastError() << endl;
			}
			else
			{
				LPCWSTR hdrs = L"Content-Type: application/x-www-form-urlencoded";

				BOOL bRequestSent = HttpSendRequestW(hRequest, hdrs, wcslen(hdrs), NULL, 0);

				if (!bRequestSent)
				{
					//cout << "HttpSendRequestW failed with error code " << GetLastError() << endl;
				}
				else
				{
					const int nBuffSize = 1024;
					char buff[nBuffSize];

					BOOL bKeepReading = true;
					DWORD dwBytesRead = -1;

					while (bKeepReading && dwBytesRead != 0)
					{
						bKeepReading = InternetReadFile(hRequest, buff, nBuffSize, &dwBytesRead);
						response.append(buff, dwBytesRead);
					}
				}
				InternetCloseHandle(hRequest);
			}
			InternetCloseHandle(hConnect);
		}
		InternetCloseHandle(hInternet);
	}
	// allocate memory for the char*
	char *res = new char[response.length() + 1];
	strcpy_s(res, response.length()+1, response.c_str());
	return res;
}

// returns a dynamically allocated array, DONT FORGET TO CLEAN UP the memeory
char* httpPostRequest(string url, string api, int port, char *args){
	string response = "";

	HINTERNET hInternet = InternetOpenW(L"MyUserAgent", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);

	if (hInternet == NULL)
	{
		//cout << "InternetOpenW failed with error code " << GetLastError() << endl;
	}
	else
	{
		HINTERNET hConnect = InternetConnectW(hInternet, s2ws(url).c_str(), port, NULL, NULL, INTERNET_SERVICE_HTTP, 0, NULL);

		if (hConnect == NULL)
		{
			//cout << "InternetConnectW failed with error code " << GetLastError() << endl;
		}
		else
		{
			const wchar_t* parrAcceptTypes[] = { L"text/*", NULL };
			HINTERNET hRequest = HttpOpenRequestW(hConnect, L"POST", s2ws(api).c_str(), NULL, NULL, parrAcceptTypes, 0, 0);

			if (hRequest == NULL)
			{
				//cout << "HttpOpenRequestW failed with error code " << GetLastError() << endl;
			}
			else
			{
				LPCWSTR hdrs = L"Content-Type: application/x-www-form-urlencoded";
			
				//char *data = "some data";

				BOOL bRequestSent = HttpSendRequestW(hRequest, hdrs, wcslen(hdrs), args, strlen(args));

				if (!bRequestSent)
				{
					//cout << "HttpSendRequestW failed with error code " << GetLastError() << endl;
				}
				else
				{
					const int nBuffSize = 1024;
					char buff[nBuffSize];

					BOOL bKeepReading = true;
					DWORD dwBytesRead = -1;

					while (bKeepReading && dwBytesRead != 0)
					{
						bKeepReading = InternetReadFile(hRequest, buff, nBuffSize, &dwBytesRead);
						response.append(buff, dwBytesRead);
					}
				}
				InternetCloseHandle(hRequest);
			}
			InternetCloseHandle(hConnect);
		}
		InternetCloseHandle(hInternet);
	}
	// allocate a char array for the return value
	char* res = new char[response.length() + 1];
	strcpy_s(res, response.length() + 1, response.c_str());
	return res;
}